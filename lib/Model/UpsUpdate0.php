<?php
/**
 * UpsUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * UpsUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpsUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ups_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'powerdown' => 'bool',
        'rmonitor' => 'bool',
        'nocommwarntime' => 'int',
        'remoteport' => 'int',
        'shutdowntimer' => 'int',
        'hostsync' => 'int',
        'description' => 'string',
        'driver' => 'string',
        'extrausers' => 'string',
        'identifier' => 'string',
        'mode' => 'string',
        'monpwd' => 'string',
        'monuser' => 'string',
        'options' => 'string',
        'optionsupsd' => 'string',
        'port' => 'string',
        'remotehost' => 'string',
        'shutdown' => 'string',
        'shutdowncmd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'powerdown' => null,
        'rmonitor' => null,
        'nocommwarntime' => null,
        'remoteport' => null,
        'shutdowntimer' => null,
        'hostsync' => null,
        'description' => null,
        'driver' => null,
        'extrausers' => null,
        'identifier' => null,
        'mode' => null,
        'monpwd' => null,
        'monuser' => null,
        'options' => null,
        'optionsupsd' => null,
        'port' => null,
        'remotehost' => null,
        'shutdown' => null,
        'shutdowncmd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'powerdown' => false,
		'rmonitor' => false,
		'nocommwarntime' => true,
		'remoteport' => false,
		'shutdowntimer' => false,
		'hostsync' => false,
		'description' => false,
		'driver' => false,
		'extrausers' => false,
		'identifier' => false,
		'mode' => false,
		'monpwd' => false,
		'monuser' => false,
		'options' => false,
		'optionsupsd' => false,
		'port' => false,
		'remotehost' => false,
		'shutdown' => false,
		'shutdowncmd' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'powerdown' => 'powerdown',
        'rmonitor' => 'rmonitor',
        'nocommwarntime' => 'nocommwarntime',
        'remoteport' => 'remoteport',
        'shutdowntimer' => 'shutdowntimer',
        'hostsync' => 'hostsync',
        'description' => 'description',
        'driver' => 'driver',
        'extrausers' => 'extrausers',
        'identifier' => 'identifier',
        'mode' => 'mode',
        'monpwd' => 'monpwd',
        'monuser' => 'monuser',
        'options' => 'options',
        'optionsupsd' => 'optionsupsd',
        'port' => 'port',
        'remotehost' => 'remotehost',
        'shutdown' => 'shutdown',
        'shutdowncmd' => 'shutdowncmd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'powerdown' => 'setPowerdown',
        'rmonitor' => 'setRmonitor',
        'nocommwarntime' => 'setNocommwarntime',
        'remoteport' => 'setRemoteport',
        'shutdowntimer' => 'setShutdowntimer',
        'hostsync' => 'setHostsync',
        'description' => 'setDescription',
        'driver' => 'setDriver',
        'extrausers' => 'setExtrausers',
        'identifier' => 'setIdentifier',
        'mode' => 'setMode',
        'monpwd' => 'setMonpwd',
        'monuser' => 'setMonuser',
        'options' => 'setOptions',
        'optionsupsd' => 'setOptionsupsd',
        'port' => 'setPort',
        'remotehost' => 'setRemotehost',
        'shutdown' => 'setShutdown',
        'shutdowncmd' => 'setShutdowncmd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'powerdown' => 'getPowerdown',
        'rmonitor' => 'getRmonitor',
        'nocommwarntime' => 'getNocommwarntime',
        'remoteport' => 'getRemoteport',
        'shutdowntimer' => 'getShutdowntimer',
        'hostsync' => 'getHostsync',
        'description' => 'getDescription',
        'driver' => 'getDriver',
        'extrausers' => 'getExtrausers',
        'identifier' => 'getIdentifier',
        'mode' => 'getMode',
        'monpwd' => 'getMonpwd',
        'monuser' => 'getMonuser',
        'options' => 'getOptions',
        'optionsupsd' => 'getOptionsupsd',
        'port' => 'getPort',
        'remotehost' => 'getRemotehost',
        'shutdown' => 'getShutdown',
        'shutdowncmd' => 'getShutdowncmd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODE_MASTER = 'MASTER';
    public const MODE_SLAVE = 'SLAVE';
    public const SHUTDOWN_LOWBATT = 'LOWBATT';
    public const SHUTDOWN_BATT = 'BATT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_MASTER,
            self::MODE_SLAVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShutdownAllowableValues()
    {
        return [
            self::SHUTDOWN_LOWBATT,
            self::SHUTDOWN_BATT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('powerdown', $data ?? [], null);
        $this->setIfExists('rmonitor', $data ?? [], null);
        $this->setIfExists('nocommwarntime', $data ?? [], null);
        $this->setIfExists('remoteport', $data ?? [], null);
        $this->setIfExists('shutdowntimer', $data ?? [], null);
        $this->setIfExists('hostsync', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('extrausers', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('monpwd', $data ?? [], null);
        $this->setIfExists('monuser', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('optionsupsd', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('remotehost', $data ?? [], null);
        $this->setIfExists('shutdown', $data ?? [], null);
        $this->setIfExists('shutdowncmd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShutdownAllowableValues();
        if (!is_null($this->container['shutdown']) && !in_array($this->container['shutdown'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shutdown', must be one of '%s'",
                $this->container['shutdown'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets powerdown
     *
     * @return bool|null
     */
    public function getPowerdown()
    {
        return $this->container['powerdown'];
    }

    /**
     * Sets powerdown
     *
     * @param bool|null $powerdown `powerdown` when enabled, sets UPS to power off after shutting down the system.
     *
     * @return self
     */
    public function setPowerdown($powerdown)
    {

        if (is_null($powerdown)) {
            throw new \InvalidArgumentException('non-nullable powerdown cannot be null');
        }

        $this->container['powerdown'] = $powerdown;

        return $this;
    }

    /**
     * Gets rmonitor
     *
     * @return bool|null
     */
    public function getRmonitor()
    {
        return $this->container['rmonitor'];
    }

    /**
     * Sets rmonitor
     *
     * @param bool|null $rmonitor rmonitor
     *
     * @return self
     */
    public function setRmonitor($rmonitor)
    {

        if (is_null($rmonitor)) {
            throw new \InvalidArgumentException('non-nullable rmonitor cannot be null');
        }

        $this->container['rmonitor'] = $rmonitor;

        return $this;
    }

    /**
     * Gets nocommwarntime
     *
     * @return int|null
     */
    public function getNocommwarntime()
    {
        return $this->container['nocommwarntime'];
    }

    /**
     * Sets nocommwarntime
     *
     * @param int|null $nocommwarntime `nocommwarntime` is a value in seconds which makes UPS Service wait the specified seconds before alerting that the Service cannot reach configured UPS.
     *
     * @return self
     */
    public function setNocommwarntime($nocommwarntime)
    {

        if (is_null($nocommwarntime)) {
            array_push($this->openAPINullablesSetToNull, 'nocommwarntime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nocommwarntime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['nocommwarntime'] = $nocommwarntime;

        return $this;
    }

    /**
     * Gets remoteport
     *
     * @return int|null
     */
    public function getRemoteport()
    {
        return $this->container['remoteport'];
    }

    /**
     * Sets remoteport
     *
     * @param int|null $remoteport remoteport
     *
     * @return self
     */
    public function setRemoteport($remoteport)
    {

        if (is_null($remoteport)) {
            throw new \InvalidArgumentException('non-nullable remoteport cannot be null');
        }

        $this->container['remoteport'] = $remoteport;

        return $this;
    }

    /**
     * Gets shutdowntimer
     *
     * @return int|null
     */
    public function getShutdowntimer()
    {
        return $this->container['shutdowntimer'];
    }

    /**
     * Sets shutdowntimer
     *
     * @param int|null $shutdowntimer `shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before initiating a shutdown. This only applies when `shutdown` is set to \"BATT\".
     *
     * @return self
     */
    public function setShutdowntimer($shutdowntimer)
    {

        if (is_null($shutdowntimer)) {
            throw new \InvalidArgumentException('non-nullable shutdowntimer cannot be null');
        }

        $this->container['shutdowntimer'] = $shutdowntimer;

        return $this;
    }

    /**
     * Gets hostsync
     *
     * @return int|null
     */
    public function getHostsync()
    {
        return $this->container['hostsync'];
    }

    /**
     * Sets hostsync
     *
     * @param int|null $hostsync hostsync
     *
     * @return self
     */
    public function setHostsync($hostsync)
    {

        if (is_null($hostsync)) {
            throw new \InvalidArgumentException('non-nullable hostsync cannot be null');
        }

        $this->container['hostsync'] = $hostsync;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets driver
     *
     * @return string|null
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     *
     * @param string|null $driver driver
     *
     * @return self
     */
    public function setDriver($driver)
    {

        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }

        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets extrausers
     *
     * @return string|null
     */
    public function getExtrausers()
    {
        return $this->container['extrausers'];
    }

    /**
     * Sets extrausers
     *
     * @param string|null $extrausers extrausers
     *
     * @return self
     */
    public function setExtrausers($extrausers)
    {

        if (is_null($extrausers)) {
            throw new \InvalidArgumentException('non-nullable extrausers cannot be null');
        }

        $this->container['extrausers'] = $extrausers;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {

        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }

        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets monpwd
     *
     * @return string|null
     */
    public function getMonpwd()
    {
        return $this->container['monpwd'];
    }

    /**
     * Sets monpwd
     *
     * @param string|null $monpwd monpwd
     *
     * @return self
     */
    public function setMonpwd($monpwd)
    {

        if (is_null($monpwd)) {
            throw new \InvalidArgumentException('non-nullable monpwd cannot be null');
        }

        $this->container['monpwd'] = $monpwd;

        return $this;
    }

    /**
     * Gets monuser
     *
     * @return string|null
     */
    public function getMonuser()
    {
        return $this->container['monuser'];
    }

    /**
     * Sets monuser
     *
     * @param string|null $monuser monuser
     *
     * @return self
     */
    public function setMonuser($monuser)
    {

        if (is_null($monuser)) {
            throw new \InvalidArgumentException('non-nullable monuser cannot be null');
        }

        $this->container['monuser'] = $monuser;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }

        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets optionsupsd
     *
     * @return string|null
     */
    public function getOptionsupsd()
    {
        return $this->container['optionsupsd'];
    }

    /**
     * Sets optionsupsd
     *
     * @param string|null $optionsupsd optionsupsd
     *
     * @return self
     */
    public function setOptionsupsd($optionsupsd)
    {

        if (is_null($optionsupsd)) {
            throw new \InvalidArgumentException('non-nullable optionsupsd cannot be null');
        }

        $this->container['optionsupsd'] = $optionsupsd;

        return $this;
    }

    /**
     * Gets port
     *
     * @return string|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param string|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {

        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets remotehost
     *
     * @return string|null
     */
    public function getRemotehost()
    {
        return $this->container['remotehost'];
    }

    /**
     * Sets remotehost
     *
     * @param string|null $remotehost remotehost
     *
     * @return self
     */
    public function setRemotehost($remotehost)
    {

        if (is_null($remotehost)) {
            throw new \InvalidArgumentException('non-nullable remotehost cannot be null');
        }

        $this->container['remotehost'] = $remotehost;

        return $this;
    }

    /**
     * Gets shutdown
     *
     * @return string|null
     */
    public function getShutdown()
    {
        return $this->container['shutdown'];
    }

    /**
     * Sets shutdown
     *
     * @param string|null $shutdown `shutdowntimer` is a value in seconds which tells the Service to wait specified seconds for the UPS before initiating a shutdown. This only applies when `shutdown` is set to \"BATT\".
     *
     * @return self
     */
    public function setShutdown($shutdown)
    {
        $allowedValues = $this->getShutdownAllowableValues();
        if (!is_null($shutdown) && !in_array($shutdown, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shutdown', must be one of '%s'",
                    $shutdown,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($shutdown)) {
            throw new \InvalidArgumentException('non-nullable shutdown cannot be null');
        }

        $this->container['shutdown'] = $shutdown;

        return $this;
    }

    /**
     * Gets shutdowncmd
     *
     * @return string|null
     */
    public function getShutdowncmd()
    {
        return $this->container['shutdowncmd'];
    }

    /**
     * Sets shutdowncmd
     *
     * @param string|null $shutdowncmd shutdowncmd
     *
     * @return self
     */
    public function setShutdowncmd($shutdowncmd)
    {

        if (is_null($shutdowncmd)) {
            array_push($this->openAPINullablesSetToNull, 'shutdowncmd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shutdowncmd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['shutdowncmd'] = $shutdowncmd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


