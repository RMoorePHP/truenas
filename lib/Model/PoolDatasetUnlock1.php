<?php
/**
 * PoolDatasetUnlock1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * PoolDatasetUnlock1 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PoolDatasetUnlock1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pool_dataset_unlock_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'force' => 'bool',
        'key_file' => 'bool',
        'recursive' => 'bool',
        'toggle_attachments' => 'bool',
        'datasets' => '\RMoore\Truenas\Model\Dataset[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'force' => null,
        'key_file' => null,
        'recursive' => null,
        'toggle_attachments' => null,
        'datasets' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'force' => false,
		'key_file' => false,
		'recursive' => false,
		'toggle_attachments' => false,
		'datasets' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'force' => 'force',
        'key_file' => 'key_file',
        'recursive' => 'recursive',
        'toggle_attachments' => 'toggle_attachments',
        'datasets' => 'datasets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'force' => 'setForce',
        'key_file' => 'setKeyFile',
        'recursive' => 'setRecursive',
        'toggle_attachments' => 'setToggleAttachments',
        'datasets' => 'setDatasets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'force' => 'getForce',
        'key_file' => 'getKeyFile',
        'recursive' => 'getRecursive',
        'toggle_attachments' => 'getToggleAttachments',
        'datasets' => 'getDatasets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('force', $data ?? [], false);
        $this->setIfExists('key_file', $data ?? [], false);
        $this->setIfExists('recursive', $data ?? [], false);
        $this->setIfExists('toggle_attachments', $data ?? [], true);
        $this->setIfExists('datasets', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets force
     *
     * @return bool|null
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param bool|null $force force
     *
     * @return self
     */
    public function setForce($force)
    {

        if (is_null($force)) {
            throw new \InvalidArgumentException('non-nullable force cannot be null');
        }

        $this->container['force'] = $force;

        return $this;
    }

    /**
     * Gets key_file
     *
     * @return bool|null
     */
    public function getKeyFile()
    {
        return $this->container['key_file'];
    }

    /**
     * Sets key_file
     *
     * @param bool|null $key_file key_file
     *
     * @return self
     */
    public function setKeyFile($key_file)
    {

        if (is_null($key_file)) {
            throw new \InvalidArgumentException('non-nullable key_file cannot be null');
        }

        $this->container['key_file'] = $key_file;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool|null
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool|null $recursive recursive
     *
     * @return self
     */
    public function setRecursive($recursive)
    {

        if (is_null($recursive)) {
            throw new \InvalidArgumentException('non-nullable recursive cannot be null');
        }

        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets toggle_attachments
     *
     * @return bool|null
     */
    public function getToggleAttachments()
    {
        return $this->container['toggle_attachments'];
    }

    /**
     * Sets toggle_attachments
     *
     * @param bool|null $toggle_attachments `toggle_attachments` controls whether attachments  should be put in action after unlocking dataset(s). Toggling attachments can theoretically lead to service interruption when daemons configurations are reloaded (this should not happen,  and if this happens it should be considered a bug). As TrueNAS does not have a state for resources that should be unlocked but are still locked, disabling this option will put the system into an inconsistent state so it should really never be disabled.
     *
     * @return self
     */
    public function setToggleAttachments($toggle_attachments)
    {

        if (is_null($toggle_attachments)) {
            throw new \InvalidArgumentException('non-nullable toggle_attachments cannot be null');
        }

        $this->container['toggle_attachments'] = $toggle_attachments;

        return $this;
    }

    /**
     * Gets datasets
     *
     * @return \RMoore\Truenas\Model\Dataset[]|null
     */
    public function getDatasets()
    {
        return $this->container['datasets'];
    }

    /**
     * Sets datasets
     *
     * @param \RMoore\Truenas\Model\Dataset[]|null $datasets datasets
     *
     * @return self
     */
    public function setDatasets($datasets)
    {

        if (is_null($datasets)) {
            throw new \InvalidArgumentException('non-nullable datasets cannot be null');
        }

        $this->container['datasets'] = $datasets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


