<?php
/**
 * SystemGeneralUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * SystemGeneralUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SystemGeneralUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'system_general_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ui_httpsport' => 'int',
        'ui_httpsredirect' => 'bool',
        'ui_httpsprotocols' => 'string[]',
        'ui_port' => 'int',
        'ui_address' => 'string[]',
        'ui_v6address' => 'string[]',
        'ui_consolemsg' => 'bool',
        'ui_x_frame_options' => 'string',
        'kbdmap' => 'string',
        'language' => 'string',
        'timezone' => 'string',
        'crash_reporting' => 'bool',
        'usage_collection' => 'bool',
        'birthday' => 'string',
        'sysloglevel' => 'string',
        'syslogserver' => 'string',
        'ui_certificate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ui_httpsport' => null,
        'ui_httpsredirect' => null,
        'ui_httpsprotocols' => null,
        'ui_port' => null,
        'ui_address' => null,
        'ui_v6address' => null,
        'ui_consolemsg' => null,
        'ui_x_frame_options' => null,
        'kbdmap' => null,
        'language' => null,
        'timezone' => null,
        'crash_reporting' => null,
        'usage_collection' => null,
        'birthday' => null,
        'sysloglevel' => null,
        'syslogserver' => null,
        'ui_certificate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ui_httpsport' => false,
		'ui_httpsredirect' => false,
		'ui_httpsprotocols' => false,
		'ui_port' => false,
		'ui_address' => false,
		'ui_v6address' => false,
		'ui_consolemsg' => false,
		'ui_x_frame_options' => false,
		'kbdmap' => false,
		'language' => false,
		'timezone' => false,
		'crash_reporting' => true,
		'usage_collection' => true,
		'birthday' => false,
		'sysloglevel' => false,
		'syslogserver' => false,
		'ui_certificate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ui_httpsport' => 'ui_httpsport',
        'ui_httpsredirect' => 'ui_httpsredirect',
        'ui_httpsprotocols' => 'ui_httpsprotocols',
        'ui_port' => 'ui_port',
        'ui_address' => 'ui_address',
        'ui_v6address' => 'ui_v6address',
        'ui_consolemsg' => 'ui_consolemsg',
        'ui_x_frame_options' => 'ui_x_frame_options',
        'kbdmap' => 'kbdmap',
        'language' => 'language',
        'timezone' => 'timezone',
        'crash_reporting' => 'crash_reporting',
        'usage_collection' => 'usage_collection',
        'birthday' => 'birthday',
        'sysloglevel' => 'sysloglevel',
        'syslogserver' => 'syslogserver',
        'ui_certificate' => 'ui_certificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ui_httpsport' => 'setUiHttpsport',
        'ui_httpsredirect' => 'setUiHttpsredirect',
        'ui_httpsprotocols' => 'setUiHttpsprotocols',
        'ui_port' => 'setUiPort',
        'ui_address' => 'setUiAddress',
        'ui_v6address' => 'setUiV6address',
        'ui_consolemsg' => 'setUiConsolemsg',
        'ui_x_frame_options' => 'setUiXFrameOptions',
        'kbdmap' => 'setKbdmap',
        'language' => 'setLanguage',
        'timezone' => 'setTimezone',
        'crash_reporting' => 'setCrashReporting',
        'usage_collection' => 'setUsageCollection',
        'birthday' => 'setBirthday',
        'sysloglevel' => 'setSysloglevel',
        'syslogserver' => 'setSyslogserver',
        'ui_certificate' => 'setUiCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ui_httpsport' => 'getUiHttpsport',
        'ui_httpsredirect' => 'getUiHttpsredirect',
        'ui_httpsprotocols' => 'getUiHttpsprotocols',
        'ui_port' => 'getUiPort',
        'ui_address' => 'getUiAddress',
        'ui_v6address' => 'getUiV6address',
        'ui_consolemsg' => 'getUiConsolemsg',
        'ui_x_frame_options' => 'getUiXFrameOptions',
        'kbdmap' => 'getKbdmap',
        'language' => 'getLanguage',
        'timezone' => 'getTimezone',
        'crash_reporting' => 'getCrashReporting',
        'usage_collection' => 'getUsageCollection',
        'birthday' => 'getBirthday',
        'sysloglevel' => 'getSysloglevel',
        'syslogserver' => 'getSyslogserver',
        'ui_certificate' => 'getUiCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const UI_HTTPSPROTOCOLS_TLSV1 = 'TLSv1';
    public const UI_HTTPSPROTOCOLS_TLSV1_1 = 'TLSv1.1';
    public const UI_HTTPSPROTOCOLS_TLSV1_2 = 'TLSv1.2';
    public const UI_HTTPSPROTOCOLS_TLSV1_3 = 'TLSv1.3';
    public const UI_X_FRAME_OPTIONS_SAMEORIGIN = 'SAMEORIGIN';
    public const UI_X_FRAME_OPTIONS_DENY = 'DENY';
    public const UI_X_FRAME_OPTIONS_ALLOW_ALL = 'ALLOW_ALL';
    public const SYSLOGLEVEL_EMERG = 'F_EMERG';
    public const SYSLOGLEVEL_ALERT = 'F_ALERT';
    public const SYSLOGLEVEL_CRIT = 'F_CRIT';
    public const SYSLOGLEVEL_ERR = 'F_ERR';
    public const SYSLOGLEVEL_WARNING = 'F_WARNING';
    public const SYSLOGLEVEL_NOTICE = 'F_NOTICE';
    public const SYSLOGLEVEL_INFO = 'F_INFO';
    public const SYSLOGLEVEL_DEBUG = 'F_DEBUG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUiHttpsprotocolsAllowableValues()
    {
        return [
            self::UI_HTTPSPROTOCOLS_TLSV1,
            self::UI_HTTPSPROTOCOLS_TLSV1_1,
            self::UI_HTTPSPROTOCOLS_TLSV1_2,
            self::UI_HTTPSPROTOCOLS_TLSV1_3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUiXFrameOptionsAllowableValues()
    {
        return [
            self::UI_X_FRAME_OPTIONS_SAMEORIGIN,
            self::UI_X_FRAME_OPTIONS_DENY,
            self::UI_X_FRAME_OPTIONS_ALLOW_ALL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSysloglevelAllowableValues()
    {
        return [
            self::SYSLOGLEVEL_EMERG,
            self::SYSLOGLEVEL_ALERT,
            self::SYSLOGLEVEL_CRIT,
            self::SYSLOGLEVEL_ERR,
            self::SYSLOGLEVEL_WARNING,
            self::SYSLOGLEVEL_NOTICE,
            self::SYSLOGLEVEL_INFO,
            self::SYSLOGLEVEL_DEBUG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ui_httpsport', $data ?? [], null);
        $this->setIfExists('ui_httpsredirect', $data ?? [], null);
        $this->setIfExists('ui_httpsprotocols', $data ?? [], null);
        $this->setIfExists('ui_port', $data ?? [], null);
        $this->setIfExists('ui_address', $data ?? [], null);
        $this->setIfExists('ui_v6address', $data ?? [], null);
        $this->setIfExists('ui_consolemsg', $data ?? [], null);
        $this->setIfExists('ui_x_frame_options', $data ?? [], null);
        $this->setIfExists('kbdmap', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('crash_reporting', $data ?? [], null);
        $this->setIfExists('usage_collection', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('sysloglevel', $data ?? [], null);
        $this->setIfExists('syslogserver', $data ?? [], null);
        $this->setIfExists('ui_certificate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUiXFrameOptionsAllowableValues();
        if (!is_null($this->container['ui_x_frame_options']) && !in_array($this->container['ui_x_frame_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ui_x_frame_options', must be one of '%s'",
                $this->container['ui_x_frame_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSysloglevelAllowableValues();
        if (!is_null($this->container['sysloglevel']) && !in_array($this->container['sysloglevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sysloglevel', must be one of '%s'",
                $this->container['sysloglevel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ui_httpsport
     *
     * @return int|null
     */
    public function getUiHttpsport()
    {
        return $this->container['ui_httpsport'];
    }

    /**
     * Sets ui_httpsport
     *
     * @param int|null $ui_httpsport ui_httpsport
     *
     * @return self
     */
    public function setUiHttpsport($ui_httpsport)
    {

        if (is_null($ui_httpsport)) {
            throw new \InvalidArgumentException('non-nullable ui_httpsport cannot be null');
        }

        $this->container['ui_httpsport'] = $ui_httpsport;

        return $this;
    }

    /**
     * Gets ui_httpsredirect
     *
     * @return bool|null
     */
    public function getUiHttpsredirect()
    {
        return $this->container['ui_httpsredirect'];
    }

    /**
     * Sets ui_httpsredirect
     *
     * @param bool|null $ui_httpsredirect `ui_httpsredirect` when set, makes sure that all HTTP requests are converted to HTTPS requests to better enhance security.
     *
     * @return self
     */
    public function setUiHttpsredirect($ui_httpsredirect)
    {

        if (is_null($ui_httpsredirect)) {
            throw new \InvalidArgumentException('non-nullable ui_httpsredirect cannot be null');
        }

        $this->container['ui_httpsredirect'] = $ui_httpsredirect;

        return $this;
    }

    /**
     * Gets ui_httpsprotocols
     *
     * @return string[]|null
     */
    public function getUiHttpsprotocols()
    {
        return $this->container['ui_httpsprotocols'];
    }

    /**
     * Sets ui_httpsprotocols
     *
     * @param string[]|null $ui_httpsprotocols ui_httpsprotocols
     *
     * @return self
     */
    public function setUiHttpsprotocols($ui_httpsprotocols)
    {
        $allowedValues = $this->getUiHttpsprotocolsAllowableValues();
        if (!is_null($ui_httpsprotocols) && array_diff($ui_httpsprotocols, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'ui_httpsprotocols', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ui_httpsprotocols)) {
            throw new \InvalidArgumentException('non-nullable ui_httpsprotocols cannot be null');
        }

        $this->container['ui_httpsprotocols'] = $ui_httpsprotocols;

        return $this;
    }

    /**
     * Gets ui_port
     *
     * @return int|null
     */
    public function getUiPort()
    {
        return $this->container['ui_port'];
    }

    /**
     * Sets ui_port
     *
     * @param int|null $ui_port ui_port
     *
     * @return self
     */
    public function setUiPort($ui_port)
    {

        if (is_null($ui_port)) {
            throw new \InvalidArgumentException('non-nullable ui_port cannot be null');
        }

        $this->container['ui_port'] = $ui_port;

        return $this;
    }

    /**
     * Gets ui_address
     *
     * @return string[]|null
     */
    public function getUiAddress()
    {
        return $this->container['ui_address'];
    }

    /**
     * Sets ui_address
     *
     * @param string[]|null $ui_address `ui_address` and `ui_v6address` are a list of valid ipv4/ipv6 addresses respectively which the system will listen on.
     *
     * @return self
     */
    public function setUiAddress($ui_address)
    {

        if (is_null($ui_address)) {
            throw new \InvalidArgumentException('non-nullable ui_address cannot be null');
        }

        $this->container['ui_address'] = $ui_address;

        return $this;
    }

    /**
     * Gets ui_v6address
     *
     * @return string[]|null
     */
    public function getUiV6address()
    {
        return $this->container['ui_v6address'];
    }

    /**
     * Sets ui_v6address
     *
     * @param string[]|null $ui_v6address `ui_address` and `ui_v6address` are a list of valid ipv4/ipv6 addresses respectively which the system will listen on.
     *
     * @return self
     */
    public function setUiV6address($ui_v6address)
    {

        if (is_null($ui_v6address)) {
            throw new \InvalidArgumentException('non-nullable ui_v6address cannot be null');
        }

        $this->container['ui_v6address'] = $ui_v6address;

        return $this;
    }

    /**
     * Gets ui_consolemsg
     *
     * @return bool|null
     */
    public function getUiConsolemsg()
    {
        return $this->container['ui_consolemsg'];
    }

    /**
     * Sets ui_consolemsg
     *
     * @param bool|null $ui_consolemsg ui_consolemsg
     *
     * @return self
     */
    public function setUiConsolemsg($ui_consolemsg)
    {

        if (is_null($ui_consolemsg)) {
            throw new \InvalidArgumentException('non-nullable ui_consolemsg cannot be null');
        }

        $this->container['ui_consolemsg'] = $ui_consolemsg;

        return $this;
    }

    /**
     * Gets ui_x_frame_options
     *
     * @return string|null
     */
    public function getUiXFrameOptions()
    {
        return $this->container['ui_x_frame_options'];
    }

    /**
     * Sets ui_x_frame_options
     *
     * @param string|null $ui_x_frame_options ui_x_frame_options
     *
     * @return self
     */
    public function setUiXFrameOptions($ui_x_frame_options)
    {
        $allowedValues = $this->getUiXFrameOptionsAllowableValues();
        if (!is_null($ui_x_frame_options) && !in_array($ui_x_frame_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ui_x_frame_options', must be one of '%s'",
                    $ui_x_frame_options,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ui_x_frame_options)) {
            throw new \InvalidArgumentException('non-nullable ui_x_frame_options cannot be null');
        }

        $this->container['ui_x_frame_options'] = $ui_x_frame_options;

        return $this;
    }

    /**
     * Gets kbdmap
     *
     * @return string|null
     */
    public function getKbdmap()
    {
        return $this->container['kbdmap'];
    }

    /**
     * Sets kbdmap
     *
     * @param string|null $kbdmap kbdmap
     *
     * @return self
     */
    public function setKbdmap($kbdmap)
    {

        if (is_null($kbdmap)) {
            throw new \InvalidArgumentException('non-nullable kbdmap cannot be null');
        }

        $this->container['kbdmap'] = $kbdmap;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {

        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {

        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets crash_reporting
     *
     * @return bool|null
     */
    public function getCrashReporting()
    {
        return $this->container['crash_reporting'];
    }

    /**
     * Sets crash_reporting
     *
     * @param bool|null $crash_reporting crash_reporting
     *
     * @return self
     */
    public function setCrashReporting($crash_reporting)
    {

        if (is_null($crash_reporting)) {
            array_push($this->openAPINullablesSetToNull, 'crash_reporting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('crash_reporting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['crash_reporting'] = $crash_reporting;

        return $this;
    }

    /**
     * Gets usage_collection
     *
     * @return bool|null
     */
    public function getUsageCollection()
    {
        return $this->container['usage_collection'];
    }

    /**
     * Sets usage_collection
     *
     * @param bool|null $usage_collection usage_collection
     *
     * @return self
     */
    public function setUsageCollection($usage_collection)
    {

        if (is_null($usage_collection)) {
            array_push($this->openAPINullablesSetToNull, 'usage_collection');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('usage_collection', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['usage_collection'] = $usage_collection;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {

        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }

        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets sysloglevel
     *
     * @return string|null
     */
    public function getSysloglevel()
    {
        return $this->container['sysloglevel'];
    }

    /**
     * Sets sysloglevel
     *
     * @param string|null $sysloglevel sysloglevel
     *
     * @return self
     */
    public function setSysloglevel($sysloglevel)
    {
        $allowedValues = $this->getSysloglevelAllowableValues();
        if (!is_null($sysloglevel) && !in_array($sysloglevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sysloglevel', must be one of '%s'",
                    $sysloglevel,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($sysloglevel)) {
            throw new \InvalidArgumentException('non-nullable sysloglevel cannot be null');
        }

        $this->container['sysloglevel'] = $sysloglevel;

        return $this;
    }

    /**
     * Gets syslogserver
     *
     * @return string|null
     */
    public function getSyslogserver()
    {
        return $this->container['syslogserver'];
    }

    /**
     * Sets syslogserver
     *
     * @param string|null $syslogserver syslogserver
     *
     * @return self
     */
    public function setSyslogserver($syslogserver)
    {

        if (is_null($syslogserver)) {
            throw new \InvalidArgumentException('non-nullable syslogserver cannot be null');
        }

        $this->container['syslogserver'] = $syslogserver;

        return $this;
    }

    /**
     * Gets ui_certificate
     *
     * @return int|null
     */
    public function getUiCertificate()
    {
        return $this->container['ui_certificate'];
    }

    /**
     * Sets ui_certificate
     *
     * @param int|null $ui_certificate `ui_certificate` is used to enable HTTPS access to the system. If `ui_certificate` is not configured on boot, it is automatically created by the system.
     *
     * @return self
     */
    public function setUiCertificate($ui_certificate)
    {

        if (is_null($ui_certificate)) {
            array_push($this->openAPINullablesSetToNull, 'ui_certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ui_certificate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ui_certificate'] = $ui_certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


