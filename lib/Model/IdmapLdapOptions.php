<?php
/**
 * IdmapLdapOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * IdmapLdapOptions Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdmapLdapOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'idmap_ldap_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ldap_base_dn' => 'string',
        'ldap_user_dn' => 'string',
        'ldap_user_dn_password' => 'string',
        'ldap_url' => 'string',
        'readonly' => 'bool',
        'ssl' => 'string',
        'validate_certificates' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ldap_base_dn' => null,
        'ldap_user_dn' => null,
        'ldap_user_dn_password' => null,
        'ldap_url' => null,
        'readonly' => null,
        'ssl' => null,
        'validate_certificates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ldap_base_dn' => false,
		'ldap_user_dn' => false,
		'ldap_user_dn_password' => false,
		'ldap_url' => false,
		'readonly' => false,
		'ssl' => false,
		'validate_certificates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ldap_base_dn' => 'ldap_base_dn',
        'ldap_user_dn' => 'ldap_user_dn',
        'ldap_user_dn_password' => 'ldap_user_dn_password',
        'ldap_url' => 'ldap_url',
        'readonly' => 'readonly',
        'ssl' => 'ssl',
        'validate_certificates' => 'validate_certificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ldap_base_dn' => 'setLdapBaseDn',
        'ldap_user_dn' => 'setLdapUserDn',
        'ldap_user_dn_password' => 'setLdapUserDnPassword',
        'ldap_url' => 'setLdapUrl',
        'readonly' => 'setReadonly',
        'ssl' => 'setSsl',
        'validate_certificates' => 'setValidateCertificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ldap_base_dn' => 'getLdapBaseDn',
        'ldap_user_dn' => 'getLdapUserDn',
        'ldap_user_dn_password' => 'getLdapUserDnPassword',
        'ldap_url' => 'getLdapUrl',
        'readonly' => 'getReadonly',
        'ssl' => 'getSsl',
        'validate_certificates' => 'getValidateCertificates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SSL_OFF = 'OFF';
    public const SSL_ON = 'ON';
    public const SSL_START_TLS = 'START_TLS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_OFF,
            self::SSL_ON,
            self::SSL_START_TLS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ldap_base_dn', $data ?? [], null);
        $this->setIfExists('ldap_user_dn', $data ?? [], null);
        $this->setIfExists('ldap_user_dn_password', $data ?? [], null);
        $this->setIfExists('ldap_url', $data ?? [], null);
        $this->setIfExists('readonly', $data ?? [], false);
        $this->setIfExists('ssl', $data ?? [], 'ON');
        $this->setIfExists('validate_certificates', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl', must be one of '%s'",
                $this->container['ssl'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ldap_base_dn
     *
     * @return string|null
     */
    public function getLdapBaseDn()
    {
        return $this->container['ldap_base_dn'];
    }

    /**
     * Sets ldap_base_dn
     *
     * @param string|null $ldap_base_dn ldap_base_dn
     *
     * @return self
     */
    public function setLdapBaseDn($ldap_base_dn)
    {

        if (is_null($ldap_base_dn)) {
            throw new \InvalidArgumentException('non-nullable ldap_base_dn cannot be null');
        }

        $this->container['ldap_base_dn'] = $ldap_base_dn;

        return $this;
    }

    /**
     * Gets ldap_user_dn
     *
     * @return string|null
     */
    public function getLdapUserDn()
    {
        return $this->container['ldap_user_dn'];
    }

    /**
     * Sets ldap_user_dn
     *
     * @param string|null $ldap_user_dn ldap_user_dn
     *
     * @return self
     */
    public function setLdapUserDn($ldap_user_dn)
    {

        if (is_null($ldap_user_dn)) {
            throw new \InvalidArgumentException('non-nullable ldap_user_dn cannot be null');
        }

        $this->container['ldap_user_dn'] = $ldap_user_dn;

        return $this;
    }

    /**
     * Gets ldap_user_dn_password
     *
     * @return string|null
     */
    public function getLdapUserDnPassword()
    {
        return $this->container['ldap_user_dn_password'];
    }

    /**
     * Sets ldap_user_dn_password
     *
     * @param string|null $ldap_user_dn_password ldap_user_dn_password
     *
     * @return self
     */
    public function setLdapUserDnPassword($ldap_user_dn_password)
    {

        if (is_null($ldap_user_dn_password)) {
            throw new \InvalidArgumentException('non-nullable ldap_user_dn_password cannot be null');
        }

        $this->container['ldap_user_dn_password'] = $ldap_user_dn_password;

        return $this;
    }

    /**
     * Gets ldap_url
     *
     * @return string|null
     */
    public function getLdapUrl()
    {
        return $this->container['ldap_url'];
    }

    /**
     * Sets ldap_url
     *
     * @param string|null $ldap_url ldap_url
     *
     * @return self
     */
    public function setLdapUrl($ldap_url)
    {

        if (is_null($ldap_url)) {
            throw new \InvalidArgumentException('non-nullable ldap_url cannot be null');
        }

        $this->container['ldap_url'] = $ldap_url;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {

        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }

        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string|null $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl', must be one of '%s'",
                    $ssl,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }

        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets validate_certificates
     *
     * @return bool|null
     */
    public function getValidateCertificates()
    {
        return $this->container['validate_certificates'];
    }

    /**
     * Sets validate_certificates
     *
     * @param bool|null $validate_certificates validate_certificates
     *
     * @return self
     */
    public function setValidateCertificates($validate_certificates)
    {

        if (is_null($validate_certificates)) {
            throw new \InvalidArgumentException('non-nullable validate_certificates cannot be null');
        }

        $this->container['validate_certificates'] = $validate_certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


