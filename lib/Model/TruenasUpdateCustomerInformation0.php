<?php
/**
 * TruenasUpdateCustomerInformation0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * TruenasUpdateCustomerInformation0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TruenasUpdateCustomerInformation0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'truenas_update_customer_information_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company' => 'string',
        'administrative_user' => '\RMoore\Truenas\Model\AdministrativeUser',
        'technical_user' => '\RMoore\Truenas\Model\TechnicalUser',
        'reseller' => '\RMoore\Truenas\Model\Reseller',
        'physical_location' => '\RMoore\Truenas\Model\PhysicalLocation',
        'primary_use_case' => 'string',
        'other_primary_use_case' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company' => null,
        'administrative_user' => null,
        'technical_user' => null,
        'reseller' => null,
        'physical_location' => null,
        'primary_use_case' => null,
        'other_primary_use_case' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company' => false,
		'administrative_user' => false,
		'technical_user' => false,
		'reseller' => false,
		'physical_location' => false,
		'primary_use_case' => false,
		'other_primary_use_case' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company' => 'company',
        'administrative_user' => 'administrative_user',
        'technical_user' => 'technical_user',
        'reseller' => 'reseller',
        'physical_location' => 'physical_location',
        'primary_use_case' => 'primary_use_case',
        'other_primary_use_case' => 'other_primary_use_case'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company' => 'setCompany',
        'administrative_user' => 'setAdministrativeUser',
        'technical_user' => 'setTechnicalUser',
        'reseller' => 'setReseller',
        'physical_location' => 'setPhysicalLocation',
        'primary_use_case' => 'setPrimaryUseCase',
        'other_primary_use_case' => 'setOtherPrimaryUseCase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company' => 'getCompany',
        'administrative_user' => 'getAdministrativeUser',
        'technical_user' => 'getTechnicalUser',
        'reseller' => 'getReseller',
        'physical_location' => 'getPhysicalLocation',
        'primary_use_case' => 'getPrimaryUseCase',
        'other_primary_use_case' => 'getOtherPrimaryUseCase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('administrative_user', $data ?? [], null);
        $this->setIfExists('technical_user', $data ?? [], null);
        $this->setIfExists('reseller', $data ?? [], null);
        $this->setIfExists('physical_location', $data ?? [], null);
        $this->setIfExists('primary_use_case', $data ?? [], null);
        $this->setIfExists('other_primary_use_case', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {

        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets administrative_user
     *
     * @return \RMoore\Truenas\Model\AdministrativeUser|null
     */
    public function getAdministrativeUser()
    {
        return $this->container['administrative_user'];
    }

    /**
     * Sets administrative_user
     *
     * @param \RMoore\Truenas\Model\AdministrativeUser|null $administrative_user administrative_user
     *
     * @return self
     */
    public function setAdministrativeUser($administrative_user)
    {

        if (is_null($administrative_user)) {
            throw new \InvalidArgumentException('non-nullable administrative_user cannot be null');
        }

        $this->container['administrative_user'] = $administrative_user;

        return $this;
    }

    /**
     * Gets technical_user
     *
     * @return \RMoore\Truenas\Model\TechnicalUser|null
     */
    public function getTechnicalUser()
    {
        return $this->container['technical_user'];
    }

    /**
     * Sets technical_user
     *
     * @param \RMoore\Truenas\Model\TechnicalUser|null $technical_user technical_user
     *
     * @return self
     */
    public function setTechnicalUser($technical_user)
    {

        if (is_null($technical_user)) {
            throw new \InvalidArgumentException('non-nullable technical_user cannot be null');
        }

        $this->container['technical_user'] = $technical_user;

        return $this;
    }

    /**
     * Gets reseller
     *
     * @return \RMoore\Truenas\Model\Reseller|null
     */
    public function getReseller()
    {
        return $this->container['reseller'];
    }

    /**
     * Sets reseller
     *
     * @param \RMoore\Truenas\Model\Reseller|null $reseller reseller
     *
     * @return self
     */
    public function setReseller($reseller)
    {

        if (is_null($reseller)) {
            throw new \InvalidArgumentException('non-nullable reseller cannot be null');
        }

        $this->container['reseller'] = $reseller;

        return $this;
    }

    /**
     * Gets physical_location
     *
     * @return \RMoore\Truenas\Model\PhysicalLocation|null
     */
    public function getPhysicalLocation()
    {
        return $this->container['physical_location'];
    }

    /**
     * Sets physical_location
     *
     * @param \RMoore\Truenas\Model\PhysicalLocation|null $physical_location physical_location
     *
     * @return self
     */
    public function setPhysicalLocation($physical_location)
    {

        if (is_null($physical_location)) {
            throw new \InvalidArgumentException('non-nullable physical_location cannot be null');
        }

        $this->container['physical_location'] = $physical_location;

        return $this;
    }

    /**
     * Gets primary_use_case
     *
     * @return string|null
     */
    public function getPrimaryUseCase()
    {
        return $this->container['primary_use_case'];
    }

    /**
     * Sets primary_use_case
     *
     * @param string|null $primary_use_case primary_use_case
     *
     * @return self
     */
    public function setPrimaryUseCase($primary_use_case)
    {

        if (is_null($primary_use_case)) {
            throw new \InvalidArgumentException('non-nullable primary_use_case cannot be null');
        }

        $this->container['primary_use_case'] = $primary_use_case;

        return $this;
    }

    /**
     * Gets other_primary_use_case
     *
     * @return string|null
     */
    public function getOtherPrimaryUseCase()
    {
        return $this->container['other_primary_use_case'];
    }

    /**
     * Sets other_primary_use_case
     *
     * @param string|null $other_primary_use_case other_primary_use_case
     *
     * @return self
     */
    public function setOtherPrimaryUseCase($other_primary_use_case)
    {

        if (is_null($other_primary_use_case)) {
            throw new \InvalidArgumentException('non-nullable other_primary_use_case cannot be null');
        }

        $this->container['other_primary_use_case'] = $other_primary_use_case;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


