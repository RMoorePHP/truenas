<?php
/**
 * CoreDebug1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * CoreDebug1 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CoreDebug1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'core_debug_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'secret' => 'string',
        'bind_address' => 'string',
        'bind_port' => 'int',
        'host' => 'string',
        'wait_attach' => 'bool',
        'local_path' => 'string',
        'threaded' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'secret' => null,
        'bind_address' => null,
        'bind_port' => null,
        'host' => null,
        'wait_attach' => null,
        'local_path' => null,
        'threaded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'secret' => false,
		'bind_address' => false,
		'bind_port' => false,
		'host' => false,
		'wait_attach' => false,
		'local_path' => false,
		'threaded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'secret' => 'secret',
        'bind_address' => 'bind_address',
        'bind_port' => 'bind_port',
        'host' => 'host',
        'wait_attach' => 'wait_attach',
        'local_path' => 'local_path',
        'threaded' => 'threaded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'secret' => 'setSecret',
        'bind_address' => 'setBindAddress',
        'bind_port' => 'setBindPort',
        'host' => 'setHost',
        'wait_attach' => 'setWaitAttach',
        'local_path' => 'setLocalPath',
        'threaded' => 'setThreaded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'secret' => 'getSecret',
        'bind_address' => 'getBindAddress',
        'bind_port' => 'getBindPort',
        'host' => 'getHost',
        'wait_attach' => 'getWaitAttach',
        'local_path' => 'getLocalPath',
        'threaded' => 'getThreaded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('bind_address', $data ?? [], '0.0.0.0');
        $this->setIfExists('bind_port', $data ?? [], 3000);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('wait_attach', $data ?? [], false);
        $this->setIfExists('local_path', $data ?? [], null);
        $this->setIfExists('threaded', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret secret
     *
     * @return self
     */
    public function setSecret($secret)
    {

        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }

        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets bind_address
     *
     * @return string|null
     */
    public function getBindAddress()
    {
        return $this->container['bind_address'];
    }

    /**
     * Sets bind_address
     *
     * @param string|null $bind_address bind_address
     *
     * @return self
     */
    public function setBindAddress($bind_address)
    {

        if (is_null($bind_address)) {
            throw new \InvalidArgumentException('non-nullable bind_address cannot be null');
        }

        $this->container['bind_address'] = $bind_address;

        return $this;
    }

    /**
     * Gets bind_port
     *
     * @return int|null
     */
    public function getBindPort()
    {
        return $this->container['bind_port'];
    }

    /**
     * Sets bind_port
     *
     * @param int|null $bind_port bind_port
     *
     * @return self
     */
    public function setBindPort($bind_port)
    {

        if (is_null($bind_port)) {
            throw new \InvalidArgumentException('non-nullable bind_port cannot be null');
        }

        $this->container['bind_port'] = $bind_port;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {

        if (is_null($host)) {
            throw new \InvalidArgumentException('non-nullable host cannot be null');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets wait_attach
     *
     * @return bool|null
     */
    public function getWaitAttach()
    {
        return $this->container['wait_attach'];
    }

    /**
     * Sets wait_attach
     *
     * @param bool|null $wait_attach wait_attach
     *
     * @return self
     */
    public function setWaitAttach($wait_attach)
    {

        if (is_null($wait_attach)) {
            throw new \InvalidArgumentException('non-nullable wait_attach cannot be null');
        }

        $this->container['wait_attach'] = $wait_attach;

        return $this;
    }

    /**
     * Gets local_path
     *
     * @return string|null
     */
    public function getLocalPath()
    {
        return $this->container['local_path'];
    }

    /**
     * Sets local_path
     *
     * @param string|null $local_path local_path
     *
     * @return self
     */
    public function setLocalPath($local_path)
    {

        if (is_null($local_path)) {
            throw new \InvalidArgumentException('non-nullable local_path cannot be null');
        }

        $this->container['local_path'] = $local_path;

        return $this;
    }

    /**
     * Gets threaded
     *
     * @return bool|null
     */
    public function getThreaded()
    {
        return $this->container['threaded'];
    }

    /**
     * Sets threaded
     *
     * @param bool|null $threaded threaded
     *
     * @return self
     */
    public function setThreaded($threaded)
    {

        if (is_null($threaded)) {
            throw new \InvalidArgumentException('non-nullable threaded cannot be null');
        }

        $this->container['threaded'] = $threaded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


