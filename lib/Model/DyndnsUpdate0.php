<?php
/**
 * DyndnsUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * DyndnsUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DyndnsUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dyndns_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'provider' => 'string',
        'checkip_ssl' => 'bool',
        'checkip_server' => 'string',
        'checkip_path' => 'string',
        'ssl' => 'bool',
        'custom_ddns_server' => 'string',
        'custom_ddns_path' => 'string',
        'domain' => 'string[]',
        'username' => 'string',
        'password' => 'string',
        'period' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'provider' => null,
        'checkip_ssl' => null,
        'checkip_server' => null,
        'checkip_path' => null,
        'ssl' => null,
        'custom_ddns_server' => null,
        'custom_ddns_path' => null,
        'domain' => null,
        'username' => null,
        'password' => null,
        'period' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'provider' => false,
		'checkip_ssl' => false,
		'checkip_server' => false,
		'checkip_path' => false,
		'ssl' => false,
		'custom_ddns_server' => false,
		'custom_ddns_path' => false,
		'domain' => false,
		'username' => false,
		'password' => false,
		'period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provider' => 'provider',
        'checkip_ssl' => 'checkip_ssl',
        'checkip_server' => 'checkip_server',
        'checkip_path' => 'checkip_path',
        'ssl' => 'ssl',
        'custom_ddns_server' => 'custom_ddns_server',
        'custom_ddns_path' => 'custom_ddns_path',
        'domain' => 'domain',
        'username' => 'username',
        'password' => 'password',
        'period' => 'period'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provider' => 'setProvider',
        'checkip_ssl' => 'setCheckipSsl',
        'checkip_server' => 'setCheckipServer',
        'checkip_path' => 'setCheckipPath',
        'ssl' => 'setSsl',
        'custom_ddns_server' => 'setCustomDdnsServer',
        'custom_ddns_path' => 'setCustomDdnsPath',
        'domain' => 'setDomain',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'period' => 'setPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provider' => 'getProvider',
        'checkip_ssl' => 'getCheckipSsl',
        'checkip_server' => 'getCheckipServer',
        'checkip_path' => 'getCheckipPath',
        'ssl' => 'getSsl',
        'custom_ddns_server' => 'getCustomDdnsServer',
        'custom_ddns_path' => 'getCustomDdnsPath',
        'domain' => 'getDomain',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'period' => 'getPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('provider', $data ?? [], null);
        $this->setIfExists('checkip_ssl', $data ?? [], null);
        $this->setIfExists('checkip_server', $data ?? [], null);
        $this->setIfExists('checkip_path', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], null);
        $this->setIfExists('custom_ddns_server', $data ?? [], null);
        $this->setIfExists('custom_ddns_path', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provider
     *
     * @return string|null
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string|null $provider provider
     *
     * @return self
     */
    public function setProvider($provider)
    {

        if (is_null($provider)) {
            throw new \InvalidArgumentException('non-nullable provider cannot be null');
        }

        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets checkip_ssl
     *
     * @return bool|null
     */
    public function getCheckipSsl()
    {
        return $this->container['checkip_ssl'];
    }

    /**
     * Sets checkip_ssl
     *
     * @param bool|null $checkip_ssl checkip_ssl
     *
     * @return self
     */
    public function setCheckipSsl($checkip_ssl)
    {

        if (is_null($checkip_ssl)) {
            throw new \InvalidArgumentException('non-nullable checkip_ssl cannot be null');
        }

        $this->container['checkip_ssl'] = $checkip_ssl;

        return $this;
    }

    /**
     * Gets checkip_server
     *
     * @return string|null
     */
    public function getCheckipServer()
    {
        return $this->container['checkip_server'];
    }

    /**
     * Sets checkip_server
     *
     * @param string|null $checkip_server checkip_server
     *
     * @return self
     */
    public function setCheckipServer($checkip_server)
    {

        if (is_null($checkip_server)) {
            throw new \InvalidArgumentException('non-nullable checkip_server cannot be null');
        }

        $this->container['checkip_server'] = $checkip_server;

        return $this;
    }

    /**
     * Gets checkip_path
     *
     * @return string|null
     */
    public function getCheckipPath()
    {
        return $this->container['checkip_path'];
    }

    /**
     * Sets checkip_path
     *
     * @param string|null $checkip_path checkip_path
     *
     * @return self
     */
    public function setCheckipPath($checkip_path)
    {

        if (is_null($checkip_path)) {
            throw new \InvalidArgumentException('non-nullable checkip_path cannot be null');
        }

        $this->container['checkip_path'] = $checkip_path;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool|null $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {

        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }

        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets custom_ddns_server
     *
     * @return string|null
     */
    public function getCustomDdnsServer()
    {
        return $this->container['custom_ddns_server'];
    }

    /**
     * Sets custom_ddns_server
     *
     * @param string|null $custom_ddns_server custom_ddns_server
     *
     * @return self
     */
    public function setCustomDdnsServer($custom_ddns_server)
    {

        if (is_null($custom_ddns_server)) {
            throw new \InvalidArgumentException('non-nullable custom_ddns_server cannot be null');
        }

        $this->container['custom_ddns_server'] = $custom_ddns_server;

        return $this;
    }

    /**
     * Gets custom_ddns_path
     *
     * @return string|null
     */
    public function getCustomDdnsPath()
    {
        return $this->container['custom_ddns_path'];
    }

    /**
     * Sets custom_ddns_path
     *
     * @param string|null $custom_ddns_path custom_ddns_path
     *
     * @return self
     */
    public function setCustomDdnsPath($custom_ddns_path)
    {

        if (is_null($custom_ddns_path)) {
            throw new \InvalidArgumentException('non-nullable custom_ddns_path cannot be null');
        }

        $this->container['custom_ddns_path'] = $custom_ddns_path;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string[]|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string[]|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {

        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {

        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {

        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period `period` indicates how often the IP is checked in seconds.
     *
     * @return self
     */
    public function setPeriod($period)
    {

        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }

        $this->container['period'] = $period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


