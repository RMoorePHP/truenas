<?php
/**
 * OpenvpnClientUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * OpenvpnClientUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OpenvpnClientUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'openvpn_client_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nobind' => 'bool',
        'tls_crypt_auth_enabled' => 'bool',
        'client_certificate' => 'int',
        'root_ca' => 'int',
        'port' => 'int',
        'additional_parameters' => 'string',
        'authentication_algorithm' => 'string',
        'cipher' => 'string',
        'compression' => 'string',
        'device_type' => 'string',
        'protocol' => 'string',
        'remote' => 'string',
        'tls_crypt_auth' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nobind' => null,
        'tls_crypt_auth_enabled' => null,
        'client_certificate' => null,
        'root_ca' => null,
        'port' => null,
        'additional_parameters' => null,
        'authentication_algorithm' => null,
        'cipher' => null,
        'compression' => null,
        'device_type' => null,
        'protocol' => null,
        'remote' => null,
        'tls_crypt_auth' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'nobind' => false,
		'tls_crypt_auth_enabled' => false,
		'client_certificate' => true,
		'root_ca' => true,
		'port' => false,
		'additional_parameters' => false,
		'authentication_algorithm' => true,
		'cipher' => true,
		'compression' => true,
		'device_type' => false,
		'protocol' => false,
		'remote' => false,
		'tls_crypt_auth' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nobind' => 'nobind',
        'tls_crypt_auth_enabled' => 'tls_crypt_auth_enabled',
        'client_certificate' => 'client_certificate',
        'root_ca' => 'root_ca',
        'port' => 'port',
        'additional_parameters' => 'additional_parameters',
        'authentication_algorithm' => 'authentication_algorithm',
        'cipher' => 'cipher',
        'compression' => 'compression',
        'device_type' => 'device_type',
        'protocol' => 'protocol',
        'remote' => 'remote',
        'tls_crypt_auth' => 'tls_crypt_auth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nobind' => 'setNobind',
        'tls_crypt_auth_enabled' => 'setTlsCryptAuthEnabled',
        'client_certificate' => 'setClientCertificate',
        'root_ca' => 'setRootCa',
        'port' => 'setPort',
        'additional_parameters' => 'setAdditionalParameters',
        'authentication_algorithm' => 'setAuthenticationAlgorithm',
        'cipher' => 'setCipher',
        'compression' => 'setCompression',
        'device_type' => 'setDeviceType',
        'protocol' => 'setProtocol',
        'remote' => 'setRemote',
        'tls_crypt_auth' => 'setTlsCryptAuth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nobind' => 'getNobind',
        'tls_crypt_auth_enabled' => 'getTlsCryptAuthEnabled',
        'client_certificate' => 'getClientCertificate',
        'root_ca' => 'getRootCa',
        'port' => 'getPort',
        'additional_parameters' => 'getAdditionalParameters',
        'authentication_algorithm' => 'getAuthenticationAlgorithm',
        'cipher' => 'getCipher',
        'compression' => 'getCompression',
        'device_type' => 'getDeviceType',
        'protocol' => 'getProtocol',
        'remote' => 'getRemote',
        'tls_crypt_auth' => 'getTlsCryptAuth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COMPRESSION_LZO = 'LZO';
    public const COMPRESSION_LZ4 = 'LZ4';
    public const DEVICE_TYPE_TUN = 'TUN';
    public const DEVICE_TYPE_TAP = 'TAP';
    public const PROTOCOL_UDP = 'UDP';
    public const PROTOCOL_UDP4 = 'UDP4';
    public const PROTOCOL_UDP6 = 'UDP6';
    public const PROTOCOL_TCP = 'TCP';
    public const PROTOCOL_TCP4 = 'TCP4';
    public const PROTOCOL_TCP6 = 'TCP6';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompressionAllowableValues()
    {
        return [
            self::COMPRESSION_LZO,
            self::COMPRESSION_LZ4,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceTypeAllowableValues()
    {
        return [
            self::DEVICE_TYPE_TUN,
            self::DEVICE_TYPE_TAP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProtocolAllowableValues()
    {
        return [
            self::PROTOCOL_UDP,
            self::PROTOCOL_UDP4,
            self::PROTOCOL_UDP6,
            self::PROTOCOL_TCP,
            self::PROTOCOL_TCP4,
            self::PROTOCOL_TCP6,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('nobind', $data ?? [], null);
        $this->setIfExists('tls_crypt_auth_enabled', $data ?? [], null);
        $this->setIfExists('client_certificate', $data ?? [], null);
        $this->setIfExists('root_ca', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('additional_parameters', $data ?? [], null);
        $this->setIfExists('authentication_algorithm', $data ?? [], null);
        $this->setIfExists('cipher', $data ?? [], null);
        $this->setIfExists('compression', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('remote', $data ?? [], null);
        $this->setIfExists('tls_crypt_auth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCompressionAllowableValues();
        if (!is_null($this->container['compression']) && !in_array($this->container['compression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'compression', must be one of '%s'",
                $this->container['compression'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!is_null($this->container['device_type']) && !in_array($this->container['device_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_type', must be one of '%s'",
                $this->container['device_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($this->container['protocol']) && !in_array($this->container['protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'protocol', must be one of '%s'",
                $this->container['protocol'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nobind
     *
     * @return bool|null
     */
    public function getNobind()
    {
        return $this->container['nobind'];
    }

    /**
     * Sets nobind
     *
     * @param bool|null $nobind nobind
     *
     * @return self
     */
    public function setNobind($nobind)
    {

        if (is_null($nobind)) {
            throw new \InvalidArgumentException('non-nullable nobind cannot be null');
        }

        $this->container['nobind'] = $nobind;

        return $this;
    }

    /**
     * Gets tls_crypt_auth_enabled
     *
     * @return bool|null
     */
    public function getTlsCryptAuthEnabled()
    {
        return $this->container['tls_crypt_auth_enabled'];
    }

    /**
     * Sets tls_crypt_auth_enabled
     *
     * @param bool|null $tls_crypt_auth_enabled tls_crypt_auth_enabled
     *
     * @return self
     */
    public function setTlsCryptAuthEnabled($tls_crypt_auth_enabled)
    {

        if (is_null($tls_crypt_auth_enabled)) {
            throw new \InvalidArgumentException('non-nullable tls_crypt_auth_enabled cannot be null');
        }

        $this->container['tls_crypt_auth_enabled'] = $tls_crypt_auth_enabled;

        return $this;
    }

    /**
     * Gets client_certificate
     *
     * @return int|null
     */
    public function getClientCertificate()
    {
        return $this->container['client_certificate'];
    }

    /**
     * Sets client_certificate
     *
     * @param int|null $client_certificate client_certificate
     *
     * @return self
     */
    public function setClientCertificate($client_certificate)
    {

        if (is_null($client_certificate)) {
            array_push($this->openAPINullablesSetToNull, 'client_certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client_certificate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['client_certificate'] = $client_certificate;

        return $this;
    }

    /**
     * Gets root_ca
     *
     * @return int|null
     */
    public function getRootCa()
    {
        return $this->container['root_ca'];
    }

    /**
     * Sets root_ca
     *
     * @param int|null $root_ca root_ca
     *
     * @return self
     */
    public function setRootCa($root_ca)
    {

        if (is_null($root_ca)) {
            array_push($this->openAPINullablesSetToNull, 'root_ca');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('root_ca', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['root_ca'] = $root_ca;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {

        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets additional_parameters
     *
     * @return string|null
     */
    public function getAdditionalParameters()
    {
        return $this->container['additional_parameters'];
    }

    /**
     * Sets additional_parameters
     *
     * @param string|null $additional_parameters additional_parameters
     *
     * @return self
     */
    public function setAdditionalParameters($additional_parameters)
    {

        if (is_null($additional_parameters)) {
            throw new \InvalidArgumentException('non-nullable additional_parameters cannot be null');
        }

        $this->container['additional_parameters'] = $additional_parameters;

        return $this;
    }

    /**
     * Gets authentication_algorithm
     *
     * @return string|null
     */
    public function getAuthenticationAlgorithm()
    {
        return $this->container['authentication_algorithm'];
    }

    /**
     * Sets authentication_algorithm
     *
     * @param string|null $authentication_algorithm authentication_algorithm
     *
     * @return self
     */
    public function setAuthenticationAlgorithm($authentication_algorithm)
    {

        if (is_null($authentication_algorithm)) {
            array_push($this->openAPINullablesSetToNull, 'authentication_algorithm');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authentication_algorithm', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['authentication_algorithm'] = $authentication_algorithm;

        return $this;
    }

    /**
     * Gets cipher
     *
     * @return string|null
     */
    public function getCipher()
    {
        return $this->container['cipher'];
    }

    /**
     * Sets cipher
     *
     * @param string|null $cipher cipher
     *
     * @return self
     */
    public function setCipher($cipher)
    {

        if (is_null($cipher)) {
            array_push($this->openAPINullablesSetToNull, 'cipher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cipher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['cipher'] = $cipher;

        return $this;
    }

    /**
     * Gets compression
     *
     * @return string|null
     */
    public function getCompression()
    {
        return $this->container['compression'];
    }

    /**
     * Sets compression
     *
     * @param string|null $compression compression
     *
     * @return self
     */
    public function setCompression($compression)
    {
        $allowedValues = $this->getCompressionAllowableValues();
        if (!is_null($compression) && !in_array($compression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'compression', must be one of '%s'",
                    $compression,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($compression)) {
            array_push($this->openAPINullablesSetToNull, 'compression');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compression', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['compression'] = $compression;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type device_type
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!is_null($device_type) && !in_array($device_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_type', must be one of '%s'",
                    $device_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }

        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        $allowedValues = $this->getProtocolAllowableValues();
        if (!is_null($protocol) && !in_array($protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'protocol', must be one of '%s'",
                    $protocol,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }

        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets remote
     *
     * @return string|null
     */
    public function getRemote()
    {
        return $this->container['remote'];
    }

    /**
     * Sets remote
     *
     * @param string|null $remote `remote` can be a valid ip address / domain which openvpn will try to connect to.
     *
     * @return self
     */
    public function setRemote($remote)
    {

        if (is_null($remote)) {
            throw new \InvalidArgumentException('non-nullable remote cannot be null');
        }

        $this->container['remote'] = $remote;

        return $this;
    }

    /**
     * Gets tls_crypt_auth
     *
     * @return string|null
     */
    public function getTlsCryptAuth()
    {
        return $this->container['tls_crypt_auth'];
    }

    /**
     * Sets tls_crypt_auth
     *
     * @param string|null $tls_crypt_auth tls_crypt_auth
     *
     * @return self
     */
    public function setTlsCryptAuth($tls_crypt_auth)
    {

        if (is_null($tls_crypt_auth)) {
            array_push($this->openAPINullablesSetToNull, 'tls_crypt_auth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tls_crypt_auth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tls_crypt_auth'] = $tls_crypt_auth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


