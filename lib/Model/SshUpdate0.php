<?php
/**
 * SshUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * SshUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SshUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ssh_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bindiface' => 'string[]',
        'tcpport' => 'int',
        'rootlogin' => 'bool',
        'passwordauth' => 'bool',
        'kerberosauth' => 'bool',
        'tcpfwd' => 'bool',
        'compression' => 'bool',
        'sftp_log_level' => 'string',
        'sftp_log_facility' => 'string',
        'weak_ciphers' => 'string[]',
        'options' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bindiface' => null,
        'tcpport' => null,
        'rootlogin' => null,
        'passwordauth' => null,
        'kerberosauth' => null,
        'tcpfwd' => null,
        'compression' => null,
        'sftp_log_level' => null,
        'sftp_log_facility' => null,
        'weak_ciphers' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bindiface' => false,
		'tcpport' => false,
		'rootlogin' => false,
		'passwordauth' => false,
		'kerberosauth' => false,
		'tcpfwd' => false,
		'compression' => false,
		'sftp_log_level' => false,
		'sftp_log_facility' => false,
		'weak_ciphers' => false,
		'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bindiface' => 'bindiface',
        'tcpport' => 'tcpport',
        'rootlogin' => 'rootlogin',
        'passwordauth' => 'passwordauth',
        'kerberosauth' => 'kerberosauth',
        'tcpfwd' => 'tcpfwd',
        'compression' => 'compression',
        'sftp_log_level' => 'sftp_log_level',
        'sftp_log_facility' => 'sftp_log_facility',
        'weak_ciphers' => 'weak_ciphers',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bindiface' => 'setBindiface',
        'tcpport' => 'setTcpport',
        'rootlogin' => 'setRootlogin',
        'passwordauth' => 'setPasswordauth',
        'kerberosauth' => 'setKerberosauth',
        'tcpfwd' => 'setTcpfwd',
        'compression' => 'setCompression',
        'sftp_log_level' => 'setSftpLogLevel',
        'sftp_log_facility' => 'setSftpLogFacility',
        'weak_ciphers' => 'setWeakCiphers',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bindiface' => 'getBindiface',
        'tcpport' => 'getTcpport',
        'rootlogin' => 'getRootlogin',
        'passwordauth' => 'getPasswordauth',
        'kerberosauth' => 'getKerberosauth',
        'tcpfwd' => 'getTcpfwd',
        'compression' => 'getCompression',
        'sftp_log_level' => 'getSftpLogLevel',
        'sftp_log_facility' => 'getSftpLogFacility',
        'weak_ciphers' => 'getWeakCiphers',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SFTP_LOG_LEVEL_EMPTY = '';
    public const SFTP_LOG_LEVEL_QUIET = 'QUIET';
    public const SFTP_LOG_LEVEL_FATAL = 'FATAL';
    public const SFTP_LOG_LEVEL_ERROR = 'ERROR';
    public const SFTP_LOG_LEVEL_INFO = 'INFO';
    public const SFTP_LOG_LEVEL_VERBOSE = 'VERBOSE';
    public const SFTP_LOG_LEVEL_DEBUG = 'DEBUG';
    public const SFTP_LOG_LEVEL_DEBUG2 = 'DEBUG2';
    public const SFTP_LOG_LEVEL_DEBUG3 = 'DEBUG3';
    public const SFTP_LOG_FACILITY_EMPTY = '';
    public const SFTP_LOG_FACILITY_DAEMON = 'DAEMON';
    public const SFTP_LOG_FACILITY_USER = 'USER';
    public const SFTP_LOG_FACILITY_AUTH = 'AUTH';
    public const SFTP_LOG_FACILITY_LOCAL0 = 'LOCAL0';
    public const SFTP_LOG_FACILITY_LOCAL1 = 'LOCAL1';
    public const SFTP_LOG_FACILITY_LOCAL2 = 'LOCAL2';
    public const SFTP_LOG_FACILITY_LOCAL3 = 'LOCAL3';
    public const SFTP_LOG_FACILITY_LOCAL4 = 'LOCAL4';
    public const SFTP_LOG_FACILITY_LOCAL5 = 'LOCAL5';
    public const SFTP_LOG_FACILITY_LOCAL6 = 'LOCAL6';
    public const SFTP_LOG_FACILITY_LOCAL7 = 'LOCAL7';
    public const WEAK_CIPHERS_AES128_CBC = 'AES128-CBC';
    public const WEAK_CIPHERS_NONE = 'NONE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSftpLogLevelAllowableValues()
    {
        return [
            self::SFTP_LOG_LEVEL_EMPTY,
            self::SFTP_LOG_LEVEL_QUIET,
            self::SFTP_LOG_LEVEL_FATAL,
            self::SFTP_LOG_LEVEL_ERROR,
            self::SFTP_LOG_LEVEL_INFO,
            self::SFTP_LOG_LEVEL_VERBOSE,
            self::SFTP_LOG_LEVEL_DEBUG,
            self::SFTP_LOG_LEVEL_DEBUG2,
            self::SFTP_LOG_LEVEL_DEBUG3,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSftpLogFacilityAllowableValues()
    {
        return [
            self::SFTP_LOG_FACILITY_EMPTY,
            self::SFTP_LOG_FACILITY_DAEMON,
            self::SFTP_LOG_FACILITY_USER,
            self::SFTP_LOG_FACILITY_AUTH,
            self::SFTP_LOG_FACILITY_LOCAL0,
            self::SFTP_LOG_FACILITY_LOCAL1,
            self::SFTP_LOG_FACILITY_LOCAL2,
            self::SFTP_LOG_FACILITY_LOCAL3,
            self::SFTP_LOG_FACILITY_LOCAL4,
            self::SFTP_LOG_FACILITY_LOCAL5,
            self::SFTP_LOG_FACILITY_LOCAL6,
            self::SFTP_LOG_FACILITY_LOCAL7,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeakCiphersAllowableValues()
    {
        return [
            self::WEAK_CIPHERS_AES128_CBC,
            self::WEAK_CIPHERS_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bindiface', $data ?? [], null);
        $this->setIfExists('tcpport', $data ?? [], null);
        $this->setIfExists('rootlogin', $data ?? [], null);
        $this->setIfExists('passwordauth', $data ?? [], null);
        $this->setIfExists('kerberosauth', $data ?? [], null);
        $this->setIfExists('tcpfwd', $data ?? [], null);
        $this->setIfExists('compression', $data ?? [], null);
        $this->setIfExists('sftp_log_level', $data ?? [], null);
        $this->setIfExists('sftp_log_facility', $data ?? [], null);
        $this->setIfExists('weak_ciphers', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSftpLogLevelAllowableValues();
        if (!is_null($this->container['sftp_log_level']) && !in_array($this->container['sftp_log_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sftp_log_level', must be one of '%s'",
                $this->container['sftp_log_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSftpLogFacilityAllowableValues();
        if (!is_null($this->container['sftp_log_facility']) && !in_array($this->container['sftp_log_facility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sftp_log_facility', must be one of '%s'",
                $this->container['sftp_log_facility'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bindiface
     *
     * @return string[]|null
     */
    public function getBindiface()
    {
        return $this->container['bindiface'];
    }

    /**
     * Sets bindiface
     *
     * @param string[]|null $bindiface If `bindiface` is empty it will listen for all available addresses.
     *
     * @return self
     */
    public function setBindiface($bindiface)
    {

        if (is_null($bindiface)) {
            throw new \InvalidArgumentException('non-nullable bindiface cannot be null');
        }

        $this->container['bindiface'] = $bindiface;

        return $this;
    }

    /**
     * Gets tcpport
     *
     * @return int|null
     */
    public function getTcpport()
    {
        return $this->container['tcpport'];
    }

    /**
     * Sets tcpport
     *
     * @param int|null $tcpport tcpport
     *
     * @return self
     */
    public function setTcpport($tcpport)
    {

        if (is_null($tcpport)) {
            throw new \InvalidArgumentException('non-nullable tcpport cannot be null');
        }

        $this->container['tcpport'] = $tcpport;

        return $this;
    }

    /**
     * Gets rootlogin
     *
     * @return bool|null
     */
    public function getRootlogin()
    {
        return $this->container['rootlogin'];
    }

    /**
     * Sets rootlogin
     *
     * @param bool|null $rootlogin rootlogin
     *
     * @return self
     */
    public function setRootlogin($rootlogin)
    {

        if (is_null($rootlogin)) {
            throw new \InvalidArgumentException('non-nullable rootlogin cannot be null');
        }

        $this->container['rootlogin'] = $rootlogin;

        return $this;
    }

    /**
     * Gets passwordauth
     *
     * @return bool|null
     */
    public function getPasswordauth()
    {
        return $this->container['passwordauth'];
    }

    /**
     * Sets passwordauth
     *
     * @param bool|null $passwordauth passwordauth
     *
     * @return self
     */
    public function setPasswordauth($passwordauth)
    {

        if (is_null($passwordauth)) {
            throw new \InvalidArgumentException('non-nullable passwordauth cannot be null');
        }

        $this->container['passwordauth'] = $passwordauth;

        return $this;
    }

    /**
     * Gets kerberosauth
     *
     * @return bool|null
     */
    public function getKerberosauth()
    {
        return $this->container['kerberosauth'];
    }

    /**
     * Sets kerberosauth
     *
     * @param bool|null $kerberosauth kerberosauth
     *
     * @return self
     */
    public function setKerberosauth($kerberosauth)
    {

        if (is_null($kerberosauth)) {
            throw new \InvalidArgumentException('non-nullable kerberosauth cannot be null');
        }

        $this->container['kerberosauth'] = $kerberosauth;

        return $this;
    }

    /**
     * Gets tcpfwd
     *
     * @return bool|null
     */
    public function getTcpfwd()
    {
        return $this->container['tcpfwd'];
    }

    /**
     * Sets tcpfwd
     *
     * @param bool|null $tcpfwd tcpfwd
     *
     * @return self
     */
    public function setTcpfwd($tcpfwd)
    {

        if (is_null($tcpfwd)) {
            throw new \InvalidArgumentException('non-nullable tcpfwd cannot be null');
        }

        $this->container['tcpfwd'] = $tcpfwd;

        return $this;
    }

    /**
     * Gets compression
     *
     * @return bool|null
     */
    public function getCompression()
    {
        return $this->container['compression'];
    }

    /**
     * Sets compression
     *
     * @param bool|null $compression compression
     *
     * @return self
     */
    public function setCompression($compression)
    {

        if (is_null($compression)) {
            throw new \InvalidArgumentException('non-nullable compression cannot be null');
        }

        $this->container['compression'] = $compression;

        return $this;
    }

    /**
     * Gets sftp_log_level
     *
     * @return string|null
     */
    public function getSftpLogLevel()
    {
        return $this->container['sftp_log_level'];
    }

    /**
     * Sets sftp_log_level
     *
     * @param string|null $sftp_log_level sftp_log_level
     *
     * @return self
     */
    public function setSftpLogLevel($sftp_log_level)
    {
        $allowedValues = $this->getSftpLogLevelAllowableValues();
        if (!is_null($sftp_log_level) && !in_array($sftp_log_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sftp_log_level', must be one of '%s'",
                    $sftp_log_level,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($sftp_log_level)) {
            throw new \InvalidArgumentException('non-nullable sftp_log_level cannot be null');
        }

        $this->container['sftp_log_level'] = $sftp_log_level;

        return $this;
    }

    /**
     * Gets sftp_log_facility
     *
     * @return string|null
     */
    public function getSftpLogFacility()
    {
        return $this->container['sftp_log_facility'];
    }

    /**
     * Sets sftp_log_facility
     *
     * @param string|null $sftp_log_facility sftp_log_facility
     *
     * @return self
     */
    public function setSftpLogFacility($sftp_log_facility)
    {
        $allowedValues = $this->getSftpLogFacilityAllowableValues();
        if (!is_null($sftp_log_facility) && !in_array($sftp_log_facility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sftp_log_facility', must be one of '%s'",
                    $sftp_log_facility,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($sftp_log_facility)) {
            throw new \InvalidArgumentException('non-nullable sftp_log_facility cannot be null');
        }

        $this->container['sftp_log_facility'] = $sftp_log_facility;

        return $this;
    }

    /**
     * Gets weak_ciphers
     *
     * @return string[]|null
     */
    public function getWeakCiphers()
    {
        return $this->container['weak_ciphers'];
    }

    /**
     * Sets weak_ciphers
     *
     * @param string[]|null $weak_ciphers weak_ciphers
     *
     * @return self
     */
    public function setWeakCiphers($weak_ciphers)
    {
        $allowedValues = $this->getWeakCiphersAllowableValues();
        if (!is_null($weak_ciphers) && array_diff($weak_ciphers, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weak_ciphers', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($weak_ciphers)) {
            throw new \InvalidArgumentException('non-nullable weak_ciphers cannot be null');
        }

        $this->container['weak_ciphers'] = $weak_ciphers;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }

        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


