<?php
/**
 * VmCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * VmCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VmCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'vm_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu_mode' => 'string',
        'cpu_model' => 'string',
        'name' => 'string',
        'description' => 'string',
        'vcpus' => 'int',
        'cores' => 'int',
        'threads' => 'int',
        'memory' => 'int',
        'bootloader' => 'string',
        'devices' => '\RMoore\Truenas\Model\VmdeviceCreate[]',
        'autostart' => 'bool',
        'hide_from_msr' => 'bool',
        'ensure_display_device' => 'bool',
        'time' => 'string',
        'shutdown_timeout' => 'int',
        'arch_type' => 'string',
        'machine_type' => 'string',
        'uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu_mode' => null,
        'cpu_model' => null,
        'name' => null,
        'description' => null,
        'vcpus' => null,
        'cores' => null,
        'threads' => null,
        'memory' => null,
        'bootloader' => null,
        'devices' => null,
        'autostart' => null,
        'hide_from_msr' => null,
        'ensure_display_device' => null,
        'time' => null,
        'shutdown_timeout' => null,
        'arch_type' => null,
        'machine_type' => null,
        'uuid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpu_mode' => false,
		'cpu_model' => true,
		'name' => false,
		'description' => false,
		'vcpus' => false,
		'cores' => false,
		'threads' => false,
		'memory' => false,
		'bootloader' => false,
		'devices' => false,
		'autostart' => false,
		'hide_from_msr' => false,
		'ensure_display_device' => false,
		'time' => false,
		'shutdown_timeout' => false,
		'arch_type' => true,
		'machine_type' => true,
		'uuid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_mode' => 'cpu_mode',
        'cpu_model' => 'cpu_model',
        'name' => 'name',
        'description' => 'description',
        'vcpus' => 'vcpus',
        'cores' => 'cores',
        'threads' => 'threads',
        'memory' => 'memory',
        'bootloader' => 'bootloader',
        'devices' => 'devices',
        'autostart' => 'autostart',
        'hide_from_msr' => 'hide_from_msr',
        'ensure_display_device' => 'ensure_display_device',
        'time' => 'time',
        'shutdown_timeout' => 'shutdown_timeout',
        'arch_type' => 'arch_type',
        'machine_type' => 'machine_type',
        'uuid' => 'uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_mode' => 'setCpuMode',
        'cpu_model' => 'setCpuModel',
        'name' => 'setName',
        'description' => 'setDescription',
        'vcpus' => 'setVcpus',
        'cores' => 'setCores',
        'threads' => 'setThreads',
        'memory' => 'setMemory',
        'bootloader' => 'setBootloader',
        'devices' => 'setDevices',
        'autostart' => 'setAutostart',
        'hide_from_msr' => 'setHideFromMsr',
        'ensure_display_device' => 'setEnsureDisplayDevice',
        'time' => 'setTime',
        'shutdown_timeout' => 'setShutdownTimeout',
        'arch_type' => 'setArchType',
        'machine_type' => 'setMachineType',
        'uuid' => 'setUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_mode' => 'getCpuMode',
        'cpu_model' => 'getCpuModel',
        'name' => 'getName',
        'description' => 'getDescription',
        'vcpus' => 'getVcpus',
        'cores' => 'getCores',
        'threads' => 'getThreads',
        'memory' => 'getMemory',
        'bootloader' => 'getBootloader',
        'devices' => 'getDevices',
        'autostart' => 'getAutostart',
        'hide_from_msr' => 'getHideFromMsr',
        'ensure_display_device' => 'getEnsureDisplayDevice',
        'time' => 'getTime',
        'shutdown_timeout' => 'getShutdownTimeout',
        'arch_type' => 'getArchType',
        'machine_type' => 'getMachineType',
        'uuid' => 'getUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CPU_MODE_CUSTOM = 'CUSTOM';
    public const CPU_MODE_HOST_MODEL = 'HOST-MODEL';
    public const CPU_MODE_HOST_PASSTHROUGH = 'HOST-PASSTHROUGH';
    public const BOOTLOADER_UEFI = 'UEFI';
    public const BOOTLOADER_UEFI_CSM = 'UEFI_CSM';
    public const TIME_LOCAL = 'LOCAL';
    public const TIME_UTC = 'UTC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCpuModeAllowableValues()
    {
        return [
            self::CPU_MODE_CUSTOM,
            self::CPU_MODE_HOST_MODEL,
            self::CPU_MODE_HOST_PASSTHROUGH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBootloaderAllowableValues()
    {
        return [
            self::BOOTLOADER_UEFI,
            self::BOOTLOADER_UEFI_CSM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeAllowableValues()
    {
        return [
            self::TIME_LOCAL,
            self::TIME_UTC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cpu_mode', $data ?? [], 'CUSTOM');
        $this->setIfExists('cpu_model', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('vcpus', $data ?? [], 1);
        $this->setIfExists('cores', $data ?? [], 1);
        $this->setIfExists('threads', $data ?? [], 1);
        $this->setIfExists('memory', $data ?? [], null);
        $this->setIfExists('bootloader', $data ?? [], 'UEFI');
        $this->setIfExists('devices', $data ?? [], null);
        $this->setIfExists('autostart', $data ?? [], true);
        $this->setIfExists('hide_from_msr', $data ?? [], false);
        $this->setIfExists('ensure_display_device', $data ?? [], true);
        $this->setIfExists('time', $data ?? [], 'LOCAL');
        $this->setIfExists('shutdown_timeout', $data ?? [], 90);
        $this->setIfExists('arch_type', $data ?? [], null);
        $this->setIfExists('machine_type', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCpuModeAllowableValues();
        if (!is_null($this->container['cpu_mode']) && !in_array($this->container['cpu_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cpu_mode', must be one of '%s'",
                $this->container['cpu_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBootloaderAllowableValues();
        if (!is_null($this->container['bootloader']) && !in_array($this->container['bootloader'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bootloader', must be one of '%s'",
                $this->container['bootloader'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimeAllowableValues();
        if (!is_null($this->container['time']) && !in_array($this->container['time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'time', must be one of '%s'",
                $this->container['time'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_mode
     *
     * @return string|null
     */
    public function getCpuMode()
    {
        return $this->container['cpu_mode'];
    }

    /**
     * Sets cpu_mode
     *
     * @param string|null $cpu_mode cpu_mode
     *
     * @return self
     */
    public function setCpuMode($cpu_mode)
    {
        $allowedValues = $this->getCpuModeAllowableValues();
        if (!is_null($cpu_mode) && !in_array($cpu_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cpu_mode', must be one of '%s'",
                    $cpu_mode,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($cpu_mode)) {
            throw new \InvalidArgumentException('non-nullable cpu_mode cannot be null');
        }

        $this->container['cpu_mode'] = $cpu_mode;

        return $this;
    }

    /**
     * Gets cpu_model
     *
     * @return string|null
     */
    public function getCpuModel()
    {
        return $this->container['cpu_model'];
    }

    /**
     * Sets cpu_model
     *
     * @param string|null $cpu_model cpu_model
     *
     * @return self
     */
    public function setCpuModel($cpu_model)
    {

        if (is_null($cpu_model)) {
            array_push($this->openAPINullablesSetToNull, 'cpu_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cpu_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['cpu_model'] = $cpu_model;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets vcpus
     *
     * @return int|null
     */
    public function getVcpus()
    {
        return $this->container['vcpus'];
    }

    /**
     * Sets vcpus
     *
     * @param int|null $vcpus Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a separate package. Multiple cores can be configured per CPU by specifying `cores` attributes. `vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads` specifies number of threads per core.
     *
     * @return self
     */
    public function setVcpus($vcpus)
    {

        if (is_null($vcpus)) {
            throw new \InvalidArgumentException('non-nullable vcpus cannot be null');
        }

        $this->container['vcpus'] = $vcpus;

        return $this;
    }

    /**
     * Gets cores
     *
     * @return int|null
     */
    public function getCores()
    {
        return $this->container['cores'];
    }

    /**
     * Sets cores
     *
     * @param int|null $cores Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a separate package. Multiple cores can be configured per CPU by specifying `cores` attributes. `vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads` specifies number of threads per core.
     *
     * @return self
     */
    public function setCores($cores)
    {

        if (is_null($cores)) {
            throw new \InvalidArgumentException('non-nullable cores cannot be null');
        }

        $this->container['cores'] = $cores;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return int|null
     */
    public function getThreads()
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param int|null $threads Maximum of 16 guest virtual CPUs are allowed. By default, every virtual CPU is configured as a separate package. Multiple cores can be configured per CPU by specifying `cores` attributes. `vcpus` specifies total number of CPU sockets. `cores` specifies number of cores per socket. `threads` specifies number of threads per core.
     *
     * @return self
     */
    public function setThreads($threads)
    {

        if (is_null($threads)) {
            throw new \InvalidArgumentException('non-nullable threads cannot be null');
        }

        $this->container['threads'] = $threads;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int|null
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int|null $memory memory
     *
     * @return self
     */
    public function setMemory($memory)
    {

        if (is_null($memory)) {
            throw new \InvalidArgumentException('non-nullable memory cannot be null');
        }

        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets bootloader
     *
     * @return string|null
     */
    public function getBootloader()
    {
        return $this->container['bootloader'];
    }

    /**
     * Sets bootloader
     *
     * @param string|null $bootloader bootloader
     *
     * @return self
     */
    public function setBootloader($bootloader)
    {
        $allowedValues = $this->getBootloaderAllowableValues();
        if (!is_null($bootloader) && !in_array($bootloader, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bootloader', must be one of '%s'",
                    $bootloader,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($bootloader)) {
            throw new \InvalidArgumentException('non-nullable bootloader cannot be null');
        }

        $this->container['bootloader'] = $bootloader;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \RMoore\Truenas\Model\VmdeviceCreate[]|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \RMoore\Truenas\Model\VmdeviceCreate[]|null $devices `devices` is a list of virtualized hardware to add to the newly created Virtual Machine. Failure to attach a device destroys the VM and any resources allocated by the VM devices.
     *
     * @return self
     */
    public function setDevices($devices)
    {

        if (is_null($devices)) {
            throw new \InvalidArgumentException('non-nullable devices cannot be null');
        }

        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets autostart
     *
     * @return bool|null
     */
    public function getAutostart()
    {
        return $this->container['autostart'];
    }

    /**
     * Sets autostart
     *
     * @param bool|null $autostart autostart
     *
     * @return self
     */
    public function setAutostart($autostart)
    {

        if (is_null($autostart)) {
            throw new \InvalidArgumentException('non-nullable autostart cannot be null');
        }

        $this->container['autostart'] = $autostart;

        return $this;
    }

    /**
     * Gets hide_from_msr
     *
     * @return bool|null
     */
    public function getHideFromMsr()
    {
        return $this->container['hide_from_msr'];
    }

    /**
     * Sets hide_from_msr
     *
     * @param bool|null $hide_from_msr `hide_from_msr` is a boolean which when set will hide the KVM hypervisor from standard MSR based discovery and is useful to enable when doing GPU passthrough.
     *
     * @return self
     */
    public function setHideFromMsr($hide_from_msr)
    {

        if (is_null($hide_from_msr)) {
            throw new \InvalidArgumentException('non-nullable hide_from_msr cannot be null');
        }

        $this->container['hide_from_msr'] = $hide_from_msr;

        return $this;
    }

    /**
     * Gets ensure_display_device
     *
     * @return bool|null
     */
    public function getEnsureDisplayDevice()
    {
        return $this->container['ensure_display_device'];
    }

    /**
     * Sets ensure_display_device
     *
     * @param bool|null $ensure_display_device `ensure_display_device` when set ( the default ) will ensure that the guest always has access to a video device. For headless installations like ubuntu server this is required for the guest to operate properly. However for cases where consumer would like to use GPU passthrough and does not want a display device added should set this to `false`.
     *
     * @return self
     */
    public function setEnsureDisplayDevice($ensure_display_device)
    {

        if (is_null($ensure_display_device)) {
            throw new \InvalidArgumentException('non-nullable ensure_display_device cannot be null');
        }

        $this->container['ensure_display_device'] = $ensure_display_device;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string|null $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        $allowedValues = $this->getTimeAllowableValues();
        if (!is_null($time) && !in_array($time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'time', must be one of '%s'",
                    $time,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }

        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets shutdown_timeout
     *
     * @return int|null
     */
    public function getShutdownTimeout()
    {
        return $this->container['shutdown_timeout'];
    }

    /**
     * Sets shutdown_timeout
     *
     * @param int|null $shutdown_timeout `shutdown_timeout` indicates the time in seconds the system waits for the VM to cleanly shutdown. During system shutdown, if the VM hasn't exited after a hardware shutdown signal has been sent by the system within `shutdown_timeout` seconds, system initiates poweroff for the VM to stop it.
     *
     * @return self
     */
    public function setShutdownTimeout($shutdown_timeout)
    {

        if (is_null($shutdown_timeout)) {
            throw new \InvalidArgumentException('non-nullable shutdown_timeout cannot be null');
        }

        $this->container['shutdown_timeout'] = $shutdown_timeout;

        return $this;
    }

    /**
     * Gets arch_type
     *
     * @return string|null
     */
    public function getArchType()
    {
        return $this->container['arch_type'];
    }

    /**
     * Sets arch_type
     *
     * @param string|null $arch_type `arch_type` refers to architecture type and can be specified for the guest. By default the value is `null` and system in this case will choose a reasonable default based on host. `machine_type` refers to machine type of the guest based on the architecture type selected with `arch_type`. By default the value is `null` and system in this case will choose a reasonable default based on `arch_type` configuration.
     *
     * @return self
     */
    public function setArchType($arch_type)
    {

        if (is_null($arch_type)) {
            array_push($this->openAPINullablesSetToNull, 'arch_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('arch_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['arch_type'] = $arch_type;

        return $this;
    }

    /**
     * Gets machine_type
     *
     * @return string|null
     */
    public function getMachineType()
    {
        return $this->container['machine_type'];
    }

    /**
     * Sets machine_type
     *
     * @param string|null $machine_type `machine_type` refers to machine type of the guest based on the architecture type selected with `arch_type`. By default the value is `null` and system in this case will choose a reasonable default based on `arch_type` configuration.
     *
     * @return self
     */
    public function setMachineType($machine_type)
    {

        if (is_null($machine_type)) {
            array_push($this->openAPINullablesSetToNull, 'machine_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('machine_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['machine_type'] = $machine_type;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {

        if (is_null($uuid)) {
            array_push($this->openAPINullablesSetToNull, 'uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


