<?php
/**
 * S3Update0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * S3Update0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class S3Update0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 's3_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bindip' => 'string',
        'bindport' => 'int',
        'console_bindport' => 'int',
        'access_key' => 'string',
        'secret_key' => 'string',
        'browser' => 'bool',
        'tls_server_uri' => 'string',
        'storage_path' => 'string',
        'certificate' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bindip' => null,
        'bindport' => null,
        'console_bindport' => null,
        'access_key' => null,
        'secret_key' => null,
        'browser' => null,
        'tls_server_uri' => null,
        'storage_path' => null,
        'certificate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bindip' => false,
		'bindport' => false,
		'console_bindport' => false,
		'access_key' => false,
		'secret_key' => false,
		'browser' => false,
		'tls_server_uri' => true,
		'storage_path' => false,
		'certificate' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bindip' => 'bindip',
        'bindport' => 'bindport',
        'console_bindport' => 'console_bindport',
        'access_key' => 'access_key',
        'secret_key' => 'secret_key',
        'browser' => 'browser',
        'tls_server_uri' => 'tls_server_uri',
        'storage_path' => 'storage_path',
        'certificate' => 'certificate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bindip' => 'setBindip',
        'bindport' => 'setBindport',
        'console_bindport' => 'setConsoleBindport',
        'access_key' => 'setAccessKey',
        'secret_key' => 'setSecretKey',
        'browser' => 'setBrowser',
        'tls_server_uri' => 'setTlsServerUri',
        'storage_path' => 'setStoragePath',
        'certificate' => 'setCertificate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bindip' => 'getBindip',
        'bindport' => 'getBindport',
        'console_bindport' => 'getConsoleBindport',
        'access_key' => 'getAccessKey',
        'secret_key' => 'getSecretKey',
        'browser' => 'getBrowser',
        'tls_server_uri' => 'getTlsServerUri',
        'storage_path' => 'getStoragePath',
        'certificate' => 'getCertificate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bindip', $data ?? [], null);
        $this->setIfExists('bindport', $data ?? [], null);
        $this->setIfExists('console_bindport', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('browser', $data ?? [], null);
        $this->setIfExists('tls_server_uri', $data ?? [], null);
        $this->setIfExists('storage_path', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bindip
     *
     * @return string|null
     */
    public function getBindip()
    {
        return $this->container['bindip'];
    }

    /**
     * Sets bindip
     *
     * @param string|null $bindip bindip
     *
     * @return self
     */
    public function setBindip($bindip)
    {

        if (is_null($bindip)) {
            throw new \InvalidArgumentException('non-nullable bindip cannot be null');
        }

        $this->container['bindip'] = $bindip;

        return $this;
    }

    /**
     * Gets bindport
     *
     * @return int|null
     */
    public function getBindport()
    {
        return $this->container['bindport'];
    }

    /**
     * Sets bindport
     *
     * @param int|null $bindport bindport
     *
     * @return self
     */
    public function setBindport($bindport)
    {

        if (is_null($bindport)) {
            throw new \InvalidArgumentException('non-nullable bindport cannot be null');
        }

        $this->container['bindport'] = $bindport;

        return $this;
    }

    /**
     * Gets console_bindport
     *
     * @return int|null
     */
    public function getConsoleBindport()
    {
        return $this->container['console_bindport'];
    }

    /**
     * Sets console_bindport
     *
     * @param int|null $console_bindport console_bindport
     *
     * @return self
     */
    public function setConsoleBindport($console_bindport)
    {

        if (is_null($console_bindport)) {
            throw new \InvalidArgumentException('non-nullable console_bindport cannot be null');
        }

        $this->container['console_bindport'] = $console_bindport;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key `access_key` must only contain alphanumeric characters and should be between 5 and 20 characters.
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {

        if (is_null($access_key)) {
            throw new \InvalidArgumentException('non-nullable access_key cannot be null');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key `secret_key` must only contain alphanumeric characters and should be between 8 and 40 characters.
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {

        if (is_null($secret_key)) {
            throw new \InvalidArgumentException('non-nullable secret_key cannot be null');
        }

        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets browser
     *
     * @return bool|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser
     *
     * @param bool|null $browser `browser` when set, enables the web user interface for the S3 Service.
     *
     * @return self
     */
    public function setBrowser($browser)
    {

        if (is_null($browser)) {
            throw new \InvalidArgumentException('non-nullable browser cannot be null');
        }

        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets tls_server_uri
     *
     * @return string|null
     */
    public function getTlsServerUri()
    {
        return $this->container['tls_server_uri'];
    }

    /**
     * Sets tls_server_uri
     *
     * @param string|null $tls_server_uri tls_server_uri
     *
     * @return self
     */
    public function setTlsServerUri($tls_server_uri)
    {

        if (is_null($tls_server_uri)) {
            array_push($this->openAPINullablesSetToNull, 'tls_server_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tls_server_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tls_server_uri'] = $tls_server_uri;

        return $this;
    }

    /**
     * Gets storage_path
     *
     * @return string|null
     */
    public function getStoragePath()
    {
        return $this->container['storage_path'];
    }

    /**
     * Sets storage_path
     *
     * @param string|null $storage_path storage_path
     *
     * @return self
     */
    public function setStoragePath($storage_path)
    {

        if (is_null($storage_path)) {
            throw new \InvalidArgumentException('non-nullable storage_path cannot be null');
        }

        $this->container['storage_path'] = $storage_path;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return int|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param int|null $certificate certificate
     *
     * @return self
     */
    public function setCertificate($certificate)
    {

        if (is_null($certificate)) {
            array_push($this->openAPINullablesSetToNull, 'certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('certificate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


