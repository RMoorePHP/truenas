<?php
/**
 * ReplicationCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * ReplicationCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReplicationCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'replication_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'direction' => 'string',
        'transport' => 'string',
        'ssh_credentials' => 'int',
        'netcat_active_side' => 'string',
        'netcat_active_side_listen_address' => 'string',
        'netcat_active_side_port_min' => 'int',
        'netcat_active_side_port_max' => 'int',
        'netcat_passive_side_connect_address' => 'string',
        'source_datasets' => 'string[]',
        'target_dataset' => 'string',
        'recursive' => 'bool',
        'exclude' => 'string[]',
        'properties' => 'bool',
        'properties_exclude' => 'string[]',
        'properties_override' => 'array<string,mixed>',
        'replicate' => 'bool',
        'encryption' => 'bool',
        'encryption_key' => 'string',
        'encryption_key_format' => 'string',
        'encryption_key_location' => 'string',
        'periodic_snapshot_tasks' => 'int[]',
        'naming_schema' => 'string[]',
        'also_include_naming_schema' => 'string[]',
        'name_regex' => 'string',
        'auto' => 'bool',
        'schedule' => '\RMoore\Truenas\Model\Schedule4',
        'restrict_schedule' => '\RMoore\Truenas\Model\RestrictSchedule',
        'only_matching_schedule' => 'bool',
        'allow_from_scratch' => 'bool',
        'readonly' => 'string',
        'hold_pending_snapshots' => 'bool',
        'retention_policy' => 'string',
        'lifetime_value' => 'int',
        'lifetime_unit' => 'string',
        'lifetimes' => '\RMoore\Truenas\Model\Lifetime[]',
        'compression' => 'string',
        'speed_limit' => 'int',
        'large_block' => 'bool',
        'embed' => 'bool',
        'compressed' => 'bool',
        'retries' => 'int',
        'logging_level' => 'string',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'direction' => null,
        'transport' => null,
        'ssh_credentials' => null,
        'netcat_active_side' => null,
        'netcat_active_side_listen_address' => null,
        'netcat_active_side_port_min' => null,
        'netcat_active_side_port_max' => null,
        'netcat_passive_side_connect_address' => null,
        'source_datasets' => null,
        'target_dataset' => null,
        'recursive' => null,
        'exclude' => null,
        'properties' => null,
        'properties_exclude' => null,
        'properties_override' => null,
        'replicate' => null,
        'encryption' => null,
        'encryption_key' => null,
        'encryption_key_format' => null,
        'encryption_key_location' => null,
        'periodic_snapshot_tasks' => null,
        'naming_schema' => null,
        'also_include_naming_schema' => null,
        'name_regex' => null,
        'auto' => null,
        'schedule' => null,
        'restrict_schedule' => null,
        'only_matching_schedule' => null,
        'allow_from_scratch' => null,
        'readonly' => null,
        'hold_pending_snapshots' => null,
        'retention_policy' => null,
        'lifetime_value' => null,
        'lifetime_unit' => null,
        'lifetimes' => null,
        'compression' => null,
        'speed_limit' => null,
        'large_block' => null,
        'embed' => null,
        'compressed' => null,
        'retries' => null,
        'logging_level' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'direction' => false,
		'transport' => false,
		'ssh_credentials' => true,
		'netcat_active_side' => true,
		'netcat_active_side_listen_address' => true,
		'netcat_active_side_port_min' => true,
		'netcat_active_side_port_max' => true,
		'netcat_passive_side_connect_address' => true,
		'source_datasets' => false,
		'target_dataset' => false,
		'recursive' => false,
		'exclude' => false,
		'properties' => false,
		'properties_exclude' => false,
		'properties_override' => false,
		'replicate' => false,
		'encryption' => false,
		'encryption_key' => true,
		'encryption_key_format' => true,
		'encryption_key_location' => true,
		'periodic_snapshot_tasks' => false,
		'naming_schema' => false,
		'also_include_naming_schema' => false,
		'name_regex' => true,
		'auto' => false,
		'schedule' => false,
		'restrict_schedule' => false,
		'only_matching_schedule' => false,
		'allow_from_scratch' => false,
		'readonly' => false,
		'hold_pending_snapshots' => false,
		'retention_policy' => false,
		'lifetime_value' => true,
		'lifetime_unit' => true,
		'lifetimes' => false,
		'compression' => true,
		'speed_limit' => true,
		'large_block' => false,
		'embed' => false,
		'compressed' => false,
		'retries' => false,
		'logging_level' => true,
		'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'direction' => 'direction',
        'transport' => 'transport',
        'ssh_credentials' => 'ssh_credentials',
        'netcat_active_side' => 'netcat_active_side',
        'netcat_active_side_listen_address' => 'netcat_active_side_listen_address',
        'netcat_active_side_port_min' => 'netcat_active_side_port_min',
        'netcat_active_side_port_max' => 'netcat_active_side_port_max',
        'netcat_passive_side_connect_address' => 'netcat_passive_side_connect_address',
        'source_datasets' => 'source_datasets',
        'target_dataset' => 'target_dataset',
        'recursive' => 'recursive',
        'exclude' => 'exclude',
        'properties' => 'properties',
        'properties_exclude' => 'properties_exclude',
        'properties_override' => 'properties_override',
        'replicate' => 'replicate',
        'encryption' => 'encryption',
        'encryption_key' => 'encryption_key',
        'encryption_key_format' => 'encryption_key_format',
        'encryption_key_location' => 'encryption_key_location',
        'periodic_snapshot_tasks' => 'periodic_snapshot_tasks',
        'naming_schema' => 'naming_schema',
        'also_include_naming_schema' => 'also_include_naming_schema',
        'name_regex' => 'name_regex',
        'auto' => 'auto',
        'schedule' => 'schedule',
        'restrict_schedule' => 'restrict_schedule',
        'only_matching_schedule' => 'only_matching_schedule',
        'allow_from_scratch' => 'allow_from_scratch',
        'readonly' => 'readonly',
        'hold_pending_snapshots' => 'hold_pending_snapshots',
        'retention_policy' => 'retention_policy',
        'lifetime_value' => 'lifetime_value',
        'lifetime_unit' => 'lifetime_unit',
        'lifetimes' => 'lifetimes',
        'compression' => 'compression',
        'speed_limit' => 'speed_limit',
        'large_block' => 'large_block',
        'embed' => 'embed',
        'compressed' => 'compressed',
        'retries' => 'retries',
        'logging_level' => 'logging_level',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'direction' => 'setDirection',
        'transport' => 'setTransport',
        'ssh_credentials' => 'setSshCredentials',
        'netcat_active_side' => 'setNetcatActiveSide',
        'netcat_active_side_listen_address' => 'setNetcatActiveSideListenAddress',
        'netcat_active_side_port_min' => 'setNetcatActiveSidePortMin',
        'netcat_active_side_port_max' => 'setNetcatActiveSidePortMax',
        'netcat_passive_side_connect_address' => 'setNetcatPassiveSideConnectAddress',
        'source_datasets' => 'setSourceDatasets',
        'target_dataset' => 'setTargetDataset',
        'recursive' => 'setRecursive',
        'exclude' => 'setExclude',
        'properties' => 'setProperties',
        'properties_exclude' => 'setPropertiesExclude',
        'properties_override' => 'setPropertiesOverride',
        'replicate' => 'setReplicate',
        'encryption' => 'setEncryption',
        'encryption_key' => 'setEncryptionKey',
        'encryption_key_format' => 'setEncryptionKeyFormat',
        'encryption_key_location' => 'setEncryptionKeyLocation',
        'periodic_snapshot_tasks' => 'setPeriodicSnapshotTasks',
        'naming_schema' => 'setNamingSchema',
        'also_include_naming_schema' => 'setAlsoIncludeNamingSchema',
        'name_regex' => 'setNameRegex',
        'auto' => 'setAuto',
        'schedule' => 'setSchedule',
        'restrict_schedule' => 'setRestrictSchedule',
        'only_matching_schedule' => 'setOnlyMatchingSchedule',
        'allow_from_scratch' => 'setAllowFromScratch',
        'readonly' => 'setReadonly',
        'hold_pending_snapshots' => 'setHoldPendingSnapshots',
        'retention_policy' => 'setRetentionPolicy',
        'lifetime_value' => 'setLifetimeValue',
        'lifetime_unit' => 'setLifetimeUnit',
        'lifetimes' => 'setLifetimes',
        'compression' => 'setCompression',
        'speed_limit' => 'setSpeedLimit',
        'large_block' => 'setLargeBlock',
        'embed' => 'setEmbed',
        'compressed' => 'setCompressed',
        'retries' => 'setRetries',
        'logging_level' => 'setLoggingLevel',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'direction' => 'getDirection',
        'transport' => 'getTransport',
        'ssh_credentials' => 'getSshCredentials',
        'netcat_active_side' => 'getNetcatActiveSide',
        'netcat_active_side_listen_address' => 'getNetcatActiveSideListenAddress',
        'netcat_active_side_port_min' => 'getNetcatActiveSidePortMin',
        'netcat_active_side_port_max' => 'getNetcatActiveSidePortMax',
        'netcat_passive_side_connect_address' => 'getNetcatPassiveSideConnectAddress',
        'source_datasets' => 'getSourceDatasets',
        'target_dataset' => 'getTargetDataset',
        'recursive' => 'getRecursive',
        'exclude' => 'getExclude',
        'properties' => 'getProperties',
        'properties_exclude' => 'getPropertiesExclude',
        'properties_override' => 'getPropertiesOverride',
        'replicate' => 'getReplicate',
        'encryption' => 'getEncryption',
        'encryption_key' => 'getEncryptionKey',
        'encryption_key_format' => 'getEncryptionKeyFormat',
        'encryption_key_location' => 'getEncryptionKeyLocation',
        'periodic_snapshot_tasks' => 'getPeriodicSnapshotTasks',
        'naming_schema' => 'getNamingSchema',
        'also_include_naming_schema' => 'getAlsoIncludeNamingSchema',
        'name_regex' => 'getNameRegex',
        'auto' => 'getAuto',
        'schedule' => 'getSchedule',
        'restrict_schedule' => 'getRestrictSchedule',
        'only_matching_schedule' => 'getOnlyMatchingSchedule',
        'allow_from_scratch' => 'getAllowFromScratch',
        'readonly' => 'getReadonly',
        'hold_pending_snapshots' => 'getHoldPendingSnapshots',
        'retention_policy' => 'getRetentionPolicy',
        'lifetime_value' => 'getLifetimeValue',
        'lifetime_unit' => 'getLifetimeUnit',
        'lifetimes' => 'getLifetimes',
        'compression' => 'getCompression',
        'speed_limit' => 'getSpeedLimit',
        'large_block' => 'getLargeBlock',
        'embed' => 'getEmbed',
        'compressed' => 'getCompressed',
        'retries' => 'getRetries',
        'logging_level' => 'getLoggingLevel',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DIRECTION_PUSH = 'PUSH';
    public const DIRECTION_PULL = 'PULL';
    public const TRANSPORT_SSH = 'SSH';
    public const TRANSPORT_SSHNETCAT = 'SSH+NETCAT';
    public const TRANSPORT_LOCAL = 'LOCAL';
    public const NETCAT_ACTIVE_SIDE_LOCAL = 'LOCAL';
    public const NETCAT_ACTIVE_SIDE_REMOTE = 'REMOTE';
    public const ENCRYPTION_KEY_FORMAT_HEX = 'HEX';
    public const ENCRYPTION_KEY_FORMAT_PASSPHRASE = 'PASSPHRASE';
    public const READONLY_SET = 'SET';
    public const READONLY__REQUIRE = 'REQUIRE';
    public const READONLY_IGNORE = 'IGNORE';
    public const RETENTION_POLICY_SOURCE = 'SOURCE';
    public const RETENTION_POLICY_CUSTOM = 'CUSTOM';
    public const RETENTION_POLICY_NONE = 'NONE';
    public const LIFETIME_UNIT_HOUR = 'HOUR';
    public const LIFETIME_UNIT_DAY = 'DAY';
    public const LIFETIME_UNIT_WEEK = 'WEEK';
    public const LIFETIME_UNIT_MONTH = 'MONTH';
    public const LIFETIME_UNIT_YEAR = 'YEAR';
    public const COMPRESSION_LZ4 = 'LZ4';
    public const COMPRESSION_PIGZ = 'PIGZ';
    public const COMPRESSION_PLZIP = 'PLZIP';
    public const LOGGING_LEVEL_DEBUG = 'DEBUG';
    public const LOGGING_LEVEL_INFO = 'INFO';
    public const LOGGING_LEVEL_WARNING = 'WARNING';
    public const LOGGING_LEVEL_ERROR = 'ERROR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_PUSH,
            self::DIRECTION_PULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransportAllowableValues()
    {
        return [
            self::TRANSPORT_SSH,
            self::TRANSPORT_SSHNETCAT,
            self::TRANSPORT_LOCAL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetcatActiveSideAllowableValues()
    {
        return [
            self::NETCAT_ACTIVE_SIDE_LOCAL,
            self::NETCAT_ACTIVE_SIDE_REMOTE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncryptionKeyFormatAllowableValues()
    {
        return [
            self::ENCRYPTION_KEY_FORMAT_HEX,
            self::ENCRYPTION_KEY_FORMAT_PASSPHRASE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReadonlyAllowableValues()
    {
        return [
            self::READONLY_SET,
            self::READONLY__REQUIRE,
            self::READONLY_IGNORE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRetentionPolicyAllowableValues()
    {
        return [
            self::RETENTION_POLICY_SOURCE,
            self::RETENTION_POLICY_CUSTOM,
            self::RETENTION_POLICY_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLifetimeUnitAllowableValues()
    {
        return [
            self::LIFETIME_UNIT_HOUR,
            self::LIFETIME_UNIT_DAY,
            self::LIFETIME_UNIT_WEEK,
            self::LIFETIME_UNIT_MONTH,
            self::LIFETIME_UNIT_YEAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompressionAllowableValues()
    {
        return [
            self::COMPRESSION_LZ4,
            self::COMPRESSION_PIGZ,
            self::COMPRESSION_PLZIP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoggingLevelAllowableValues()
    {
        return [
            self::LOGGING_LEVEL_DEBUG,
            self::LOGGING_LEVEL_INFO,
            self::LOGGING_LEVEL_WARNING,
            self::LOGGING_LEVEL_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('transport', $data ?? [], null);
        $this->setIfExists('ssh_credentials', $data ?? [], null);
        $this->setIfExists('netcat_active_side', $data ?? [], null);
        $this->setIfExists('netcat_active_side_listen_address', $data ?? [], null);
        $this->setIfExists('netcat_active_side_port_min', $data ?? [], null);
        $this->setIfExists('netcat_active_side_port_max', $data ?? [], null);
        $this->setIfExists('netcat_passive_side_connect_address', $data ?? [], null);
        $this->setIfExists('source_datasets', $data ?? [], null);
        $this->setIfExists('target_dataset', $data ?? [], null);
        $this->setIfExists('recursive', $data ?? [], null);
        $this->setIfExists('exclude', $data ?? [], null);
        $this->setIfExists('properties', $data ?? [], true);
        $this->setIfExists('properties_exclude', $data ?? [], null);
        $this->setIfExists('properties_override', $data ?? [], null);
        $this->setIfExists('replicate', $data ?? [], false);
        $this->setIfExists('encryption', $data ?? [], false);
        $this->setIfExists('encryption_key', $data ?? [], null);
        $this->setIfExists('encryption_key_format', $data ?? [], null);
        $this->setIfExists('encryption_key_location', $data ?? [], null);
        $this->setIfExists('periodic_snapshot_tasks', $data ?? [], null);
        $this->setIfExists('naming_schema', $data ?? [], null);
        $this->setIfExists('also_include_naming_schema', $data ?? [], null);
        $this->setIfExists('name_regex', $data ?? [], null);
        $this->setIfExists('auto', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('restrict_schedule', $data ?? [], null);
        $this->setIfExists('only_matching_schedule', $data ?? [], false);
        $this->setIfExists('allow_from_scratch', $data ?? [], false);
        $this->setIfExists('readonly', $data ?? [], 'SET');
        $this->setIfExists('hold_pending_snapshots', $data ?? [], false);
        $this->setIfExists('retention_policy', $data ?? [], null);
        $this->setIfExists('lifetime_value', $data ?? [], null);
        $this->setIfExists('lifetime_unit', $data ?? [], null);
        $this->setIfExists('lifetimes', $data ?? [], null);
        $this->setIfExists('compression', $data ?? [], null);
        $this->setIfExists('speed_limit', $data ?? [], null);
        $this->setIfExists('large_block', $data ?? [], true);
        $this->setIfExists('embed', $data ?? [], false);
        $this->setIfExists('compressed', $data ?? [], true);
        $this->setIfExists('retries', $data ?? [], 5);
        $this->setIfExists('logging_level', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransportAllowableValues();
        if (!is_null($this->container['transport']) && !in_array($this->container['transport'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transport', must be one of '%s'",
                $this->container['transport'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNetcatActiveSideAllowableValues();
        if (!is_null($this->container['netcat_active_side']) && !in_array($this->container['netcat_active_side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'netcat_active_side', must be one of '%s'",
                $this->container['netcat_active_side'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEncryptionKeyFormatAllowableValues();
        if (!is_null($this->container['encryption_key_format']) && !in_array($this->container['encryption_key_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'encryption_key_format', must be one of '%s'",
                $this->container['encryption_key_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReadonlyAllowableValues();
        if (!is_null($this->container['readonly']) && !in_array($this->container['readonly'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'readonly', must be one of '%s'",
                $this->container['readonly'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRetentionPolicyAllowableValues();
        if (!is_null($this->container['retention_policy']) && !in_array($this->container['retention_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'retention_policy', must be one of '%s'",
                $this->container['retention_policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLifetimeUnitAllowableValues();
        if (!is_null($this->container['lifetime_unit']) && !in_array($this->container['lifetime_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lifetime_unit', must be one of '%s'",
                $this->container['lifetime_unit'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompressionAllowableValues();
        if (!is_null($this->container['compression']) && !in_array($this->container['compression'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'compression', must be one of '%s'",
                $this->container['compression'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLoggingLevelAllowableValues();
        if (!is_null($this->container['logging_level']) && !in_array($this->container['logging_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'logging_level', must be one of '%s'",
                $this->container['logging_level'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name * `name` specifies a name for replication task
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction * `direction` specifies whether task will `PUSH` or `PULL` snapshots
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }

        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets transport
     *
     * @return string|null
     */
    public function getTransport()
    {
        return $this->container['transport'];
    }

    /**
     * Sets transport
     *
     * @param string|null $transport * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost
     *
     * @return self
     */
    public function setTransport($transport)
    {
        $allowedValues = $this->getTransportAllowableValues();
        if (!is_null($transport) && !in_array($transport, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transport', must be one of '%s'",
                    $transport,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($transport)) {
            throw new \InvalidArgumentException('non-nullable transport cannot be null');
        }

        $this->container['transport'] = $transport;

        return $this;
    }

    /**
     * Gets ssh_credentials
     *
     * @return int|null
     */
    public function getSshCredentials()
    {
        return $this->container['ssh_credentials'];
    }

    /**
     * Sets ssh_credentials
     *
     * @param int|null $ssh_credentials * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost
     *
     * @return self
     */
    public function setSshCredentials($ssh_credentials)
    {

        if (is_null($ssh_credentials)) {
            array_push($this->openAPINullablesSetToNull, 'ssh_credentials');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ssh_credentials', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ssh_credentials'] = $ssh_credentials;

        return $this;
    }

    /**
     * Gets netcat_active_side
     *
     * @return string|null
     */
    public function getNetcatActiveSide()
    {
        return $this->container['netcat_active_side'];
    }

    /**
     * Sets netcat_active_side
     *
     * @param string|null $netcat_active_side * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost
     *
     * @return self
     */
    public function setNetcatActiveSide($netcat_active_side)
    {
        $allowedValues = $this->getNetcatActiveSideAllowableValues();
        if (!is_null($netcat_active_side) && !in_array($netcat_active_side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'netcat_active_side', must be one of '%s'",
                    $netcat_active_side,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($netcat_active_side)) {
            array_push($this->openAPINullablesSetToNull, 'netcat_active_side');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netcat_active_side', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['netcat_active_side'] = $netcat_active_side;

        return $this;
    }

    /**
     * Gets netcat_active_side_listen_address
     *
     * @return string|null
     */
    public function getNetcatActiveSideListenAddress()
    {
        return $this->container['netcat_active_side_listen_address'];
    }

    /**
     * Sets netcat_active_side_listen_address
     *
     * @param string|null $netcat_active_side_listen_address netcat_active_side_listen_address
     *
     * @return self
     */
    public function setNetcatActiveSideListenAddress($netcat_active_side_listen_address)
    {

        if (is_null($netcat_active_side_listen_address)) {
            array_push($this->openAPINullablesSetToNull, 'netcat_active_side_listen_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netcat_active_side_listen_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['netcat_active_side_listen_address'] = $netcat_active_side_listen_address;

        return $this;
    }

    /**
     * Gets netcat_active_side_port_min
     *
     * @return int|null
     */
    public function getNetcatActiveSidePortMin()
    {
        return $this->container['netcat_active_side_port_min'];
    }

    /**
     * Sets netcat_active_side_port_min
     *
     * @param int|null $netcat_active_side_port_min * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost
     *
     * @return self
     */
    public function setNetcatActiveSidePortMin($netcat_active_side_port_min)
    {

        if (is_null($netcat_active_side_port_min)) {
            array_push($this->openAPINullablesSetToNull, 'netcat_active_side_port_min');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netcat_active_side_port_min', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['netcat_active_side_port_min'] = $netcat_active_side_port_min;

        return $this;
    }

    /**
     * Gets netcat_active_side_port_max
     *
     * @return int|null
     */
    public function getNetcatActiveSidePortMax()
    {
        return $this->container['netcat_active_side_port_max'];
    }

    /**
     * Sets netcat_active_side_port_max
     *
     * @param int|null $netcat_active_side_port_max * `transport` is a method of snapshots transfer:   * `SSH` transfers snapshots via SSH connection. This method is supported everywhere but does not achieve     great performance     `ssh_credentials` is a required field for this transport (Keychain Credential ID of type `SSH_CREDENTIALS`)   * `SSH+NETCAT` uses unencrypted connection for data transfer. This can only be used in trusted networks     and requires a port (specified by range from `netcat_active_side_port_min` to `netcat_active_side_port_max`)     to be open on `netcat_active_side`     `ssh_credentials` is also required for control connection   * `LOCAL` replicates to or from localhost
     *
     * @return self
     */
    public function setNetcatActiveSidePortMax($netcat_active_side_port_max)
    {

        if (is_null($netcat_active_side_port_max)) {
            array_push($this->openAPINullablesSetToNull, 'netcat_active_side_port_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netcat_active_side_port_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['netcat_active_side_port_max'] = $netcat_active_side_port_max;

        return $this;
    }

    /**
     * Gets netcat_passive_side_connect_address
     *
     * @return string|null
     */
    public function getNetcatPassiveSideConnectAddress()
    {
        return $this->container['netcat_passive_side_connect_address'];
    }

    /**
     * Sets netcat_passive_side_connect_address
     *
     * @param string|null $netcat_passive_side_connect_address netcat_passive_side_connect_address
     *
     * @return self
     */
    public function setNetcatPassiveSideConnectAddress($netcat_passive_side_connect_address)
    {

        if (is_null($netcat_passive_side_connect_address)) {
            array_push($this->openAPINullablesSetToNull, 'netcat_passive_side_connect_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('netcat_passive_side_connect_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['netcat_passive_side_connect_address'] = $netcat_passive_side_connect_address;

        return $this;
    }

    /**
     * Gets source_datasets
     *
     * @return string[]|null
     */
    public function getSourceDatasets()
    {
        return $this->container['source_datasets'];
    }

    /**
     * Sets source_datasets
     *
     * @param string[]|null $source_datasets * `source_datasets` is a non-empty list of datasets to replicate snapshots from
     *
     * @return self
     */
    public function setSourceDatasets($source_datasets)
    {

        if (is_null($source_datasets)) {
            throw new \InvalidArgumentException('non-nullable source_datasets cannot be null');
        }

        $this->container['source_datasets'] = $source_datasets;

        return $this;
    }

    /**
     * Gets target_dataset
     *
     * @return string|null
     */
    public function getTargetDataset()
    {
        return $this->container['target_dataset'];
    }

    /**
     * Sets target_dataset
     *
     * @param string|null $target_dataset * `target_dataset` is a dataset to put snapshots into. It must exist on target side
     *
     * @return self
     */
    public function setTargetDataset($target_dataset)
    {

        if (is_null($target_dataset)) {
            throw new \InvalidArgumentException('non-nullable target_dataset cannot be null');
        }

        $this->container['target_dataset'] = $target_dataset;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool|null
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool|null $recursive * `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task
     *
     * @return self
     */
    public function setRecursive($recursive)
    {

        if (is_null($recursive)) {
            throw new \InvalidArgumentException('non-nullable recursive cannot be null');
        }

        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return string[]|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param string[]|null $exclude * `recursive` and `exclude` have the same meaning as for Periodic Snapshot Task
     *
     * @return self
     */
    public function setExclude($exclude)
    {

        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }

        $this->container['exclude'] = $exclude;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return bool|null
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param bool|null $properties * `properties` control whether we should send dataset properties along with snapshots
     *
     * @return self
     */
    public function setProperties($properties)
    {

        if (is_null($properties)) {
            throw new \InvalidArgumentException('non-nullable properties cannot be null');
        }

        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets properties_exclude
     *
     * @return string[]|null
     */
    public function getPropertiesExclude()
    {
        return $this->container['properties_exclude'];
    }

    /**
     * Sets properties_exclude
     *
     * @param string[]|null $properties_exclude properties_exclude
     *
     * @return self
     */
    public function setPropertiesExclude($properties_exclude)
    {

        if (is_null($properties_exclude)) {
            throw new \InvalidArgumentException('non-nullable properties_exclude cannot be null');
        }

        $this->container['properties_exclude'] = $properties_exclude;

        return $this;
    }

    /**
     * Gets properties_override
     *
     * @return array<string,mixed>|null
     */
    public function getPropertiesOverride()
    {
        return $this->container['properties_override'];
    }

    /**
     * Sets properties_override
     *
     * @param array<string,mixed>|null $properties_override properties_override
     *
     * @return self
     */
    public function setPropertiesOverride($properties_override)
    {

        if (is_null($properties_override)) {
            throw new \InvalidArgumentException('non-nullable properties_override cannot be null');
        }

        $this->container['properties_override'] = $properties_override;

        return $this;
    }

    /**
     * Gets replicate
     *
     * @return bool|null
     */
    public function getReplicate()
    {
        return $this->container['replicate'];
    }

    /**
     * Sets replicate
     *
     * @param bool|null $replicate replicate
     *
     * @return self
     */
    public function setReplicate($replicate)
    {

        if (is_null($replicate)) {
            throw new \InvalidArgumentException('non-nullable replicate cannot be null');
        }

        $this->container['replicate'] = $replicate;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return bool|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param bool|null $encryption encryption
     *
     * @return self
     */
    public function setEncryption($encryption)
    {

        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }

        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets encryption_key
     *
     * @return string|null
     */
    public function getEncryptionKey()
    {
        return $this->container['encryption_key'];
    }

    /**
     * Sets encryption_key
     *
     * @param string|null $encryption_key encryption_key
     *
     * @return self
     */
    public function setEncryptionKey($encryption_key)
    {

        if (is_null($encryption_key)) {
            array_push($this->openAPINullablesSetToNull, 'encryption_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encryption_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['encryption_key'] = $encryption_key;

        return $this;
    }

    /**
     * Gets encryption_key_format
     *
     * @return string|null
     */
    public function getEncryptionKeyFormat()
    {
        return $this->container['encryption_key_format'];
    }

    /**
     * Sets encryption_key_format
     *
     * @param string|null $encryption_key_format encryption_key_format
     *
     * @return self
     */
    public function setEncryptionKeyFormat($encryption_key_format)
    {
        $allowedValues = $this->getEncryptionKeyFormatAllowableValues();
        if (!is_null($encryption_key_format) && !in_array($encryption_key_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'encryption_key_format', must be one of '%s'",
                    $encryption_key_format,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($encryption_key_format)) {
            array_push($this->openAPINullablesSetToNull, 'encryption_key_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encryption_key_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['encryption_key_format'] = $encryption_key_format;

        return $this;
    }

    /**
     * Gets encryption_key_location
     *
     * @return string|null
     */
    public function getEncryptionKeyLocation()
    {
        return $this->container['encryption_key_location'];
    }

    /**
     * Sets encryption_key_location
     *
     * @param string|null $encryption_key_location encryption_key_location
     *
     * @return self
     */
    public function setEncryptionKeyLocation($encryption_key_location)
    {

        if (is_null($encryption_key_location)) {
            array_push($this->openAPINullablesSetToNull, 'encryption_key_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encryption_key_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['encryption_key_location'] = $encryption_key_location;

        return $this;
    }

    /**
     * Gets periodic_snapshot_tasks
     *
     * @return int[]|null
     */
    public function getPeriodicSnapshotTasks()
    {
        return $this->container['periodic_snapshot_tasks'];
    }

    /**
     * Sets periodic_snapshot_tasks
     *
     * @param int[]|null $periodic_snapshot_tasks * `periodic_snapshot_tasks` is a list of periodic snapshot task IDs that are sources of snapshots for this   replication task. Only push replication tasks can be bound to periodic snapshot tasks.
     *
     * @return self
     */
    public function setPeriodicSnapshotTasks($periodic_snapshot_tasks)
    {

        if (is_null($periodic_snapshot_tasks)) {
            throw new \InvalidArgumentException('non-nullable periodic_snapshot_tasks cannot be null');
        }

        $this->container['periodic_snapshot_tasks'] = $periodic_snapshot_tasks;

        return $this;
    }

    /**
     * Gets naming_schema
     *
     * @return string[]|null
     */
    public function getNamingSchema()
    {
        return $this->container['naming_schema'];
    }

    /**
     * Sets naming_schema
     *
     * @param string[]|null $naming_schema * `naming_schema` is a list of naming schemas for pull replication
     *
     * @return self
     */
    public function setNamingSchema($naming_schema)
    {

        if (is_null($naming_schema)) {
            throw new \InvalidArgumentException('non-nullable naming_schema cannot be null');
        }

        $this->container['naming_schema'] = $naming_schema;

        return $this;
    }

    /**
     * Gets also_include_naming_schema
     *
     * @return string[]|null
     */
    public function getAlsoIncludeNamingSchema()
    {
        return $this->container['also_include_naming_schema'];
    }

    /**
     * Sets also_include_naming_schema
     *
     * @param string[]|null $also_include_naming_schema * `also_include_naming_schema` is a list of naming schemas for push replication
     *
     * @return self
     */
    public function setAlsoIncludeNamingSchema($also_include_naming_schema)
    {

        if (is_null($also_include_naming_schema)) {
            throw new \InvalidArgumentException('non-nullable also_include_naming_schema cannot be null');
        }

        $this->container['also_include_naming_schema'] = $also_include_naming_schema;

        return $this;
    }

    /**
     * Gets name_regex
     *
     * @return string|null
     */
    public function getNameRegex()
    {
        return $this->container['name_regex'];
    }

    /**
     * Sets name_regex
     *
     * @param string|null $name_regex * `name_regex` will replicate all snapshots which names match specified regular expression
     *
     * @return self
     */
    public function setNameRegex($name_regex)
    {

        if (is_null($name_regex)) {
            array_push($this->openAPINullablesSetToNull, 'name_regex');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name_regex', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name_regex'] = $name_regex;

        return $this;
    }

    /**
     * Gets auto
     *
     * @return bool|null
     */
    public function getAuto()
    {
        return $this->container['auto'];
    }

    /**
     * Sets auto
     *
     * @param bool|null $auto * `auto` allows replication to run automatically on schedule or after bound periodic snapshot task * `schedule` is a schedule to run replication task. Only `auto` replication tasks without bound periodic   snapshot tasks can have a schedule
     *
     * @return self
     */
    public function setAuto($auto)
    {

        if (is_null($auto)) {
            throw new \InvalidArgumentException('non-nullable auto cannot be null');
        }

        $this->container['auto'] = $auto;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \RMoore\Truenas\Model\Schedule4|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \RMoore\Truenas\Model\Schedule4|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {

        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }

        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets restrict_schedule
     *
     * @return \RMoore\Truenas\Model\RestrictSchedule|null
     */
    public function getRestrictSchedule()
    {
        return $this->container['restrict_schedule'];
    }

    /**
     * Sets restrict_schedule
     *
     * @param \RMoore\Truenas\Model\RestrictSchedule|null $restrict_schedule restrict_schedule
     *
     * @return self
     */
    public function setRestrictSchedule($restrict_schedule)
    {

        if (is_null($restrict_schedule)) {
            throw new \InvalidArgumentException('non-nullable restrict_schedule cannot be null');
        }

        $this->container['restrict_schedule'] = $restrict_schedule;

        return $this;
    }

    /**
     * Gets only_matching_schedule
     *
     * @return bool|null
     */
    public function getOnlyMatchingSchedule()
    {
        return $this->container['only_matching_schedule'];
    }

    /**
     * Sets only_matching_schedule
     *
     * @param bool|null $only_matching_schedule * Enabling `only_matching_schedule` will only replicate snapshots that match `schedule` or   `restrict_schedule`
     *
     * @return self
     */
    public function setOnlyMatchingSchedule($only_matching_schedule)
    {

        if (is_null($only_matching_schedule)) {
            throw new \InvalidArgumentException('non-nullable only_matching_schedule cannot be null');
        }

        $this->container['only_matching_schedule'] = $only_matching_schedule;

        return $this;
    }

    /**
     * Gets allow_from_scratch
     *
     * @return bool|null
     */
    public function getAllowFromScratch()
    {
        return $this->container['allow_from_scratch'];
    }

    /**
     * Sets allow_from_scratch
     *
     * @param bool|null $allow_from_scratch * `allow_from_scratch` will destroy all snapshots on target side and replicate everything from scratch if none   of the snapshots on target side matches source snapshots
     *
     * @return self
     */
    public function setAllowFromScratch($allow_from_scratch)
    {

        if (is_null($allow_from_scratch)) {
            throw new \InvalidArgumentException('non-nullable allow_from_scratch cannot be null');
        }

        $this->container['allow_from_scratch'] = $allow_from_scratch;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return string|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param string|null $readonly * `readonly` controls destination datasets readonly property:   * `SET` will set all destination datasets to readonly=on after finishing the replication   * `REQUIRE` will require all existing destination datasets to have readonly=on property   * `IGNORE` will avoid this kind of behavior
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        $allowedValues = $this->getReadonlyAllowableValues();
        if (!is_null($readonly) && !in_array($readonly, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'readonly', must be one of '%s'",
                    $readonly,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }

        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets hold_pending_snapshots
     *
     * @return bool|null
     */
    public function getHoldPendingSnapshots()
    {
        return $this->container['hold_pending_snapshots'];
    }

    /**
     * Sets hold_pending_snapshots
     *
     * @param bool|null $hold_pending_snapshots * `hold_pending_snapshots` will prevent source snapshots from being deleted by retention of replication fails   for some reason
     *
     * @return self
     */
    public function setHoldPendingSnapshots($hold_pending_snapshots)
    {

        if (is_null($hold_pending_snapshots)) {
            throw new \InvalidArgumentException('non-nullable hold_pending_snapshots cannot be null');
        }

        $this->container['hold_pending_snapshots'] = $hold_pending_snapshots;

        return $this;
    }

    /**
     * Gets retention_policy
     *
     * @return string|null
     */
    public function getRetentionPolicy()
    {
        return $this->container['retention_policy'];
    }

    /**
     * Sets retention_policy
     *
     * @param string|null $retention_policy * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
     *
     * @return self
     */
    public function setRetentionPolicy($retention_policy)
    {
        $allowedValues = $this->getRetentionPolicyAllowableValues();
        if (!is_null($retention_policy) && !in_array($retention_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'retention_policy', must be one of '%s'",
                    $retention_policy,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($retention_policy)) {
            throw new \InvalidArgumentException('non-nullable retention_policy cannot be null');
        }

        $this->container['retention_policy'] = $retention_policy;

        return $this;
    }

    /**
     * Gets lifetime_value
     *
     * @return int|null
     */
    public function getLifetimeValue()
    {
        return $this->container['lifetime_value'];
    }

    /**
     * Sets lifetime_value
     *
     * @param int|null $lifetime_value * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
     *
     * @return self
     */
    public function setLifetimeValue($lifetime_value)
    {

        if (is_null($lifetime_value)) {
            array_push($this->openAPINullablesSetToNull, 'lifetime_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lifetime_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['lifetime_value'] = $lifetime_value;

        return $this;
    }

    /**
     * Gets lifetime_unit
     *
     * @return string|null
     */
    public function getLifetimeUnit()
    {
        return $this->container['lifetime_unit'];
    }

    /**
     * Sets lifetime_unit
     *
     * @param string|null $lifetime_unit * `retention_policy` specifies how to delete old snapshots on target side:   * `SOURCE` deletes snapshots that are absent on source side   * `CUSTOM` deletes snapshots that are older than `lifetime_value` and `lifetime_unit`   * `NONE` does not delete any snapshots
     *
     * @return self
     */
    public function setLifetimeUnit($lifetime_unit)
    {
        $allowedValues = $this->getLifetimeUnitAllowableValues();
        if (!is_null($lifetime_unit) && !in_array($lifetime_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lifetime_unit', must be one of '%s'",
                    $lifetime_unit,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($lifetime_unit)) {
            array_push($this->openAPINullablesSetToNull, 'lifetime_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lifetime_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['lifetime_unit'] = $lifetime_unit;

        return $this;
    }

    /**
     * Gets lifetimes
     *
     * @return \RMoore\Truenas\Model\Lifetime[]|null
     */
    public function getLifetimes()
    {
        return $this->container['lifetimes'];
    }

    /**
     * Sets lifetimes
     *
     * @param \RMoore\Truenas\Model\Lifetime[]|null $lifetimes lifetimes
     *
     * @return self
     */
    public function setLifetimes($lifetimes)
    {

        if (is_null($lifetimes)) {
            throw new \InvalidArgumentException('non-nullable lifetimes cannot be null');
        }

        $this->container['lifetimes'] = $lifetimes;

        return $this;
    }

    /**
     * Gets compression
     *
     * @return string|null
     */
    public function getCompression()
    {
        return $this->container['compression'];
    }

    /**
     * Sets compression
     *
     * @param string|null $compression * `compression` compresses SSH stream. Available only for SSH transport
     *
     * @return self
     */
    public function setCompression($compression)
    {
        $allowedValues = $this->getCompressionAllowableValues();
        if (!is_null($compression) && !in_array($compression, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'compression', must be one of '%s'",
                    $compression,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($compression)) {
            array_push($this->openAPINullablesSetToNull, 'compression');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compression', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['compression'] = $compression;

        return $this;
    }

    /**
     * Gets speed_limit
     *
     * @return int|null
     */
    public function getSpeedLimit()
    {
        return $this->container['speed_limit'];
    }

    /**
     * Sets speed_limit
     *
     * @param int|null $speed_limit * `speed_limit` limits speed of SSH stream. Available only for SSH transport
     *
     * @return self
     */
    public function setSpeedLimit($speed_limit)
    {

        if (is_null($speed_limit)) {
            array_push($this->openAPINullablesSetToNull, 'speed_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('speed_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['speed_limit'] = $speed_limit;

        return $this;
    }

    /**
     * Gets large_block
     *
     * @return bool|null
     */
    public function getLargeBlock()
    {
        return $this->container['large_block'];
    }

    /**
     * Sets large_block
     *
     * @param bool|null $large_block * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
     *
     * @return self
     */
    public function setLargeBlock($large_block)
    {

        if (is_null($large_block)) {
            throw new \InvalidArgumentException('non-nullable large_block cannot be null');
        }

        $this->container['large_block'] = $large_block;

        return $this;
    }

    /**
     * Gets embed
     *
     * @return bool|null
     */
    public function getEmbed()
    {
        return $this->container['embed'];
    }

    /**
     * Sets embed
     *
     * @param bool|null $embed * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
     *
     * @return self
     */
    public function setEmbed($embed)
    {

        if (is_null($embed)) {
            throw new \InvalidArgumentException('non-nullable embed cannot be null');
        }

        $this->container['embed'] = $embed;

        return $this;
    }

    /**
     * Gets compressed
     *
     * @return bool|null
     */
    public function getCompressed()
    {
        return $this->container['compressed'];
    }

    /**
     * Sets compressed
     *
     * @param bool|null $compressed * `large_block`, `embed` and `compressed` are various ZFS stream flag documented in `man zfs send`
     *
     * @return self
     */
    public function setCompressed($compressed)
    {

        if (is_null($compressed)) {
            throw new \InvalidArgumentException('non-nullable compressed cannot be null');
        }

        $this->container['compressed'] = $compressed;

        return $this;
    }

    /**
     * Gets retries
     *
     * @return int|null
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int|null $retries * `retries` specifies number of retries before considering replication failed
     *
     * @return self
     */
    public function setRetries($retries)
    {

        if (is_null($retries)) {
            throw new \InvalidArgumentException('non-nullable retries cannot be null');
        }

        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets logging_level
     *
     * @return string|null
     */
    public function getLoggingLevel()
    {
        return $this->container['logging_level'];
    }

    /**
     * Sets logging_level
     *
     * @param string|null $logging_level logging_level
     *
     * @return self
     */
    public function setLoggingLevel($logging_level)
    {
        $allowedValues = $this->getLoggingLevelAllowableValues();
        if (!is_null($logging_level) && !in_array($logging_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'logging_level', must be one of '%s'",
                    $logging_level,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($logging_level)) {
            array_push($this->openAPINullablesSetToNull, 'logging_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logging_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['logging_level'] = $logging_level;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


