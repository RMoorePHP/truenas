<?php
/**
 * SmbUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * SmbUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SmbUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'smb_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'netbiosname' => 'string',
        'netbiosname_b' => 'string',
        'netbiosalias' => 'string[]',
        'workgroup' => 'string',
        'description' => 'string',
        'enable_smb1' => 'bool',
        'unixcharset' => 'string',
        'loglevel' => 'string',
        'syslog' => 'bool',
        'aapl_extensions' => 'bool',
        'localmaster' => 'bool',
        'guest' => 'string',
        'admin_group' => 'string',
        'filemask' => 'string',
        'dirmask' => 'string',
        'ntlmv1_auth' => 'bool',
        'multichannel' => 'bool',
        'bindip' => 'string[]',
        'smb_options' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'netbiosname' => null,
        'netbiosname_b' => null,
        'netbiosalias' => null,
        'workgroup' => null,
        'description' => null,
        'enable_smb1' => null,
        'unixcharset' => null,
        'loglevel' => null,
        'syslog' => null,
        'aapl_extensions' => null,
        'localmaster' => null,
        'guest' => null,
        'admin_group' => null,
        'filemask' => null,
        'dirmask' => null,
        'ntlmv1_auth' => null,
        'multichannel' => null,
        'bindip' => null,
        'smb_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'netbiosname' => false,
		'netbiosname_b' => false,
		'netbiosalias' => false,
		'workgroup' => false,
		'description' => false,
		'enable_smb1' => false,
		'unixcharset' => false,
		'loglevel' => false,
		'syslog' => false,
		'aapl_extensions' => false,
		'localmaster' => false,
		'guest' => false,
		'admin_group' => true,
		'filemask' => false,
		'dirmask' => false,
		'ntlmv1_auth' => false,
		'multichannel' => false,
		'bindip' => false,
		'smb_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'netbiosname' => 'netbiosname',
        'netbiosname_b' => 'netbiosname_b',
        'netbiosalias' => 'netbiosalias',
        'workgroup' => 'workgroup',
        'description' => 'description',
        'enable_smb1' => 'enable_smb1',
        'unixcharset' => 'unixcharset',
        'loglevel' => 'loglevel',
        'syslog' => 'syslog',
        'aapl_extensions' => 'aapl_extensions',
        'localmaster' => 'localmaster',
        'guest' => 'guest',
        'admin_group' => 'admin_group',
        'filemask' => 'filemask',
        'dirmask' => 'dirmask',
        'ntlmv1_auth' => 'ntlmv1_auth',
        'multichannel' => 'multichannel',
        'bindip' => 'bindip',
        'smb_options' => 'smb_options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'netbiosname' => 'setNetbiosname',
        'netbiosname_b' => 'setNetbiosnameB',
        'netbiosalias' => 'setNetbiosalias',
        'workgroup' => 'setWorkgroup',
        'description' => 'setDescription',
        'enable_smb1' => 'setEnableSmb1',
        'unixcharset' => 'setUnixcharset',
        'loglevel' => 'setLoglevel',
        'syslog' => 'setSyslog',
        'aapl_extensions' => 'setAaplExtensions',
        'localmaster' => 'setLocalmaster',
        'guest' => 'setGuest',
        'admin_group' => 'setAdminGroup',
        'filemask' => 'setFilemask',
        'dirmask' => 'setDirmask',
        'ntlmv1_auth' => 'setNtlmv1Auth',
        'multichannel' => 'setMultichannel',
        'bindip' => 'setBindip',
        'smb_options' => 'setSmbOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'netbiosname' => 'getNetbiosname',
        'netbiosname_b' => 'getNetbiosnameB',
        'netbiosalias' => 'getNetbiosalias',
        'workgroup' => 'getWorkgroup',
        'description' => 'getDescription',
        'enable_smb1' => 'getEnableSmb1',
        'unixcharset' => 'getUnixcharset',
        'loglevel' => 'getLoglevel',
        'syslog' => 'getSyslog',
        'aapl_extensions' => 'getAaplExtensions',
        'localmaster' => 'getLocalmaster',
        'guest' => 'getGuest',
        'admin_group' => 'getAdminGroup',
        'filemask' => 'getFilemask',
        'dirmask' => 'getDirmask',
        'ntlmv1_auth' => 'getNtlmv1Auth',
        'multichannel' => 'getMultichannel',
        'bindip' => 'getBindip',
        'smb_options' => 'getSmbOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LOGLEVEL_NONE = 'NONE';
    public const LOGLEVEL_MINIMUM = 'MINIMUM';
    public const LOGLEVEL_NORMAL = 'NORMAL';
    public const LOGLEVEL_FULL = 'FULL';
    public const LOGLEVEL_DEBUG = 'DEBUG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoglevelAllowableValues()
    {
        return [
            self::LOGLEVEL_NONE,
            self::LOGLEVEL_MINIMUM,
            self::LOGLEVEL_NORMAL,
            self::LOGLEVEL_FULL,
            self::LOGLEVEL_DEBUG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('netbiosname', $data ?? [], null);
        $this->setIfExists('netbiosname_b', $data ?? [], null);
        $this->setIfExists('netbiosalias', $data ?? [], null);
        $this->setIfExists('workgroup', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('enable_smb1', $data ?? [], null);
        $this->setIfExists('unixcharset', $data ?? [], null);
        $this->setIfExists('loglevel', $data ?? [], null);
        $this->setIfExists('syslog', $data ?? [], null);
        $this->setIfExists('aapl_extensions', $data ?? [], null);
        $this->setIfExists('localmaster', $data ?? [], null);
        $this->setIfExists('guest', $data ?? [], null);
        $this->setIfExists('admin_group', $data ?? [], null);
        $this->setIfExists('filemask', $data ?? [], null);
        $this->setIfExists('dirmask', $data ?? [], null);
        $this->setIfExists('ntlmv1_auth', $data ?? [], null);
        $this->setIfExists('multichannel', $data ?? [], false);
        $this->setIfExists('bindip', $data ?? [], null);
        $this->setIfExists('smb_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLoglevelAllowableValues();
        if (!is_null($this->container['loglevel']) && !in_array($this->container['loglevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'loglevel', must be one of '%s'",
                $this->container['loglevel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets netbiosname
     *
     * @return string|null
     */
    public function getNetbiosname()
    {
        return $this->container['netbiosname'];
    }

    /**
     * Sets netbiosname
     *
     * @param string|null $netbiosname `netbiosname` defaults to the original hostname of the system. `workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be automatically set to the correct value during the process of joining an AD domain. `workgroup` and `netbiosname` should have different values.
     *
     * @return self
     */
    public function setNetbiosname($netbiosname)
    {

        if (is_null($netbiosname)) {
            throw new \InvalidArgumentException('non-nullable netbiosname cannot be null');
        }

        $this->container['netbiosname'] = $netbiosname;

        return $this;
    }

    /**
     * Gets netbiosname_b
     *
     * @return string|null
     */
    public function getNetbiosnameB()
    {
        return $this->container['netbiosname_b'];
    }

    /**
     * Sets netbiosname_b
     *
     * @param string|null $netbiosname_b netbiosname_b
     *
     * @return self
     */
    public function setNetbiosnameB($netbiosname_b)
    {

        if (is_null($netbiosname_b)) {
            throw new \InvalidArgumentException('non-nullable netbiosname_b cannot be null');
        }

        $this->container['netbiosname_b'] = $netbiosname_b;

        return $this;
    }

    /**
     * Gets netbiosalias
     *
     * @return string[]|null
     */
    public function getNetbiosalias()
    {
        return $this->container['netbiosalias'];
    }

    /**
     * Sets netbiosalias
     *
     * @param string[]|null $netbiosalias `netbiosalias` a list of netbios aliases. If Server is joined to an AD domain, additional Kerberos Service Principal Names will be generated for these aliases.
     *
     * @return self
     */
    public function setNetbiosalias($netbiosalias)
    {

        if (is_null($netbiosalias)) {
            throw new \InvalidArgumentException('non-nullable netbiosalias cannot be null');
        }

        $this->container['netbiosalias'] = $netbiosalias;

        return $this;
    }

    /**
     * Gets workgroup
     *
     * @return string|null
     */
    public function getWorkgroup()
    {
        return $this->container['workgroup'];
    }

    /**
     * Sets workgroup
     *
     * @param string|null $workgroup `workgroup` specifies the NetBIOS workgroup to which the TrueNAS server belongs. This will be automatically set to the correct value during the process of joining an AD domain. `workgroup` and `netbiosname` should have different values.
     *
     * @return self
     */
    public function setWorkgroup($workgroup)
    {

        if (is_null($workgroup)) {
            throw new \InvalidArgumentException('non-nullable workgroup cannot be null');
        }

        $this->container['workgroup'] = $workgroup;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enable_smb1
     *
     * @return bool|null
     */
    public function getEnableSmb1()
    {
        return $this->container['enable_smb1'];
    }

    /**
     * Sets enable_smb1
     *
     * @param bool|null $enable_smb1 `enable_smb1` allows legacy SMB clients to connect to the server when enabled.
     *
     * @return self
     */
    public function setEnableSmb1($enable_smb1)
    {

        if (is_null($enable_smb1)) {
            throw new \InvalidArgumentException('non-nullable enable_smb1 cannot be null');
        }

        $this->container['enable_smb1'] = $enable_smb1;

        return $this;
    }

    /**
     * Gets unixcharset
     *
     * @return string|null
     */
    public function getUnixcharset()
    {
        return $this->container['unixcharset'];
    }

    /**
     * Sets unixcharset
     *
     * @param string|null $unixcharset unixcharset
     *
     * @return self
     */
    public function setUnixcharset($unixcharset)
    {

        if (is_null($unixcharset)) {
            throw new \InvalidArgumentException('non-nullable unixcharset cannot be null');
        }

        $this->container['unixcharset'] = $unixcharset;

        return $this;
    }

    /**
     * Gets loglevel
     *
     * @return string|null
     */
    public function getLoglevel()
    {
        return $this->container['loglevel'];
    }

    /**
     * Sets loglevel
     *
     * @param string|null $loglevel loglevel
     *
     * @return self
     */
    public function setLoglevel($loglevel)
    {
        $allowedValues = $this->getLoglevelAllowableValues();
        if (!is_null($loglevel) && !in_array($loglevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'loglevel', must be one of '%s'",
                    $loglevel,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($loglevel)) {
            throw new \InvalidArgumentException('non-nullable loglevel cannot be null');
        }

        $this->container['loglevel'] = $loglevel;

        return $this;
    }

    /**
     * Gets syslog
     *
     * @return bool|null
     */
    public function getSyslog()
    {
        return $this->container['syslog'];
    }

    /**
     * Sets syslog
     *
     * @param bool|null $syslog syslog
     *
     * @return self
     */
    public function setSyslog($syslog)
    {

        if (is_null($syslog)) {
            throw new \InvalidArgumentException('non-nullable syslog cannot be null');
        }

        $this->container['syslog'] = $syslog;

        return $this;
    }

    /**
     * Gets aapl_extensions
     *
     * @return bool|null
     */
    public function getAaplExtensions()
    {
        return $this->container['aapl_extensions'];
    }

    /**
     * Sets aapl_extensions
     *
     * @param bool|null $aapl_extensions `aapl_extensions` enables support for SMB2 protocol extensions for MacOS clients. This is not a requirement for MacOS support, but is currently a requirement for time machine support.
     *
     * @return self
     */
    public function setAaplExtensions($aapl_extensions)
    {

        if (is_null($aapl_extensions)) {
            throw new \InvalidArgumentException('non-nullable aapl_extensions cannot be null');
        }

        $this->container['aapl_extensions'] = $aapl_extensions;

        return $this;
    }

    /**
     * Gets localmaster
     *
     * @return bool|null
     */
    public function getLocalmaster()
    {
        return $this->container['localmaster'];
    }

    /**
     * Sets localmaster
     *
     * @param bool|null $localmaster `localmaster` when set, determines if the system participates in a browser election.
     *
     * @return self
     */
    public function setLocalmaster($localmaster)
    {

        if (is_null($localmaster)) {
            throw new \InvalidArgumentException('non-nullable localmaster cannot be null');
        }

        $this->container['localmaster'] = $localmaster;

        return $this;
    }

    /**
     * Gets guest
     *
     * @return string|null
     */
    public function getGuest()
    {
        return $this->container['guest'];
    }

    /**
     * Sets guest
     *
     * @param string|null $guest `guest` attribute is specified to select the account to be used for guest access. It defaults to \"nobody\".
     *
     * @return self
     */
    public function setGuest($guest)
    {

        if (is_null($guest)) {
            throw new \InvalidArgumentException('non-nullable guest cannot be null');
        }

        $this->container['guest'] = $guest;

        return $this;
    }

    /**
     * Gets admin_group
     *
     * @return string|null
     */
    public function getAdminGroup()
    {
        return $this->container['admin_group'];
    }

    /**
     * Sets admin_group
     *
     * @param string|null $admin_group The group specified as the SMB `admin_group` will be automatically added as a foreign group member of S-1-5-32-544 (builtindmins). This will afford the group all privileges granted to a local admin. Any SMB group may be selected (including AD groups).
     *
     * @return self
     */
    public function setAdminGroup($admin_group)
    {

        if (is_null($admin_group)) {
            array_push($this->openAPINullablesSetToNull, 'admin_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['admin_group'] = $admin_group;

        return $this;
    }

    /**
     * Gets filemask
     *
     * @return string|null
     */
    public function getFilemask()
    {
        return $this->container['filemask'];
    }

    /**
     * Sets filemask
     *
     * @param string|null $filemask filemask
     *
     * @return self
     */
    public function setFilemask($filemask)
    {

        if (is_null($filemask)) {
            throw new \InvalidArgumentException('non-nullable filemask cannot be null');
        }

        $this->container['filemask'] = $filemask;

        return $this;
    }

    /**
     * Gets dirmask
     *
     * @return string|null
     */
    public function getDirmask()
    {
        return $this->container['dirmask'];
    }

    /**
     * Sets dirmask
     *
     * @param string|null $dirmask dirmask
     *
     * @return self
     */
    public function setDirmask($dirmask)
    {

        if (is_null($dirmask)) {
            throw new \InvalidArgumentException('non-nullable dirmask cannot be null');
        }

        $this->container['dirmask'] = $dirmask;

        return $this;
    }

    /**
     * Gets ntlmv1_auth
     *
     * @return bool|null
     */
    public function getNtlmv1Auth()
    {
        return $this->container['ntlmv1_auth'];
    }

    /**
     * Sets ntlmv1_auth
     *
     * @param bool|null $ntlmv1_auth `ntlmv1_auth` enables a legacy and insecure authentication method, which may be required for legacy or poorly-implemented SMB clients.
     *
     * @return self
     */
    public function setNtlmv1Auth($ntlmv1_auth)
    {

        if (is_null($ntlmv1_auth)) {
            throw new \InvalidArgumentException('non-nullable ntlmv1_auth cannot be null');
        }

        $this->container['ntlmv1_auth'] = $ntlmv1_auth;

        return $this;
    }

    /**
     * Gets multichannel
     *
     * @return bool|null
     */
    public function getMultichannel()
    {
        return $this->container['multichannel'];
    }

    /**
     * Sets multichannel
     *
     * @param bool|null $multichannel multichannel
     *
     * @return self
     */
    public function setMultichannel($multichannel)
    {

        if (is_null($multichannel)) {
            throw new \InvalidArgumentException('non-nullable multichannel cannot be null');
        }

        $this->container['multichannel'] = $multichannel;

        return $this;
    }

    /**
     * Gets bindip
     *
     * @return string[]|null
     */
    public function getBindip()
    {
        return $this->container['bindip'];
    }

    /**
     * Sets bindip
     *
     * @param string[]|null $bindip bindip
     *
     * @return self
     */
    public function setBindip($bindip)
    {

        if (is_null($bindip)) {
            throw new \InvalidArgumentException('non-nullable bindip cannot be null');
        }

        $this->container['bindip'] = $bindip;

        return $this;
    }

    /**
     * Gets smb_options
     *
     * @return string|null
     */
    public function getSmbOptions()
    {
        return $this->container['smb_options'];
    }

    /**
     * Sets smb_options
     *
     * @param string|null $smb_options smb_options
     *
     * @return self
     */
    public function setSmbOptions($smb_options)
    {

        if (is_null($smb_options)) {
            throw new \InvalidArgumentException('non-nullable smb_options cannot be null');
        }

        $this->container['smb_options'] = $smb_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


