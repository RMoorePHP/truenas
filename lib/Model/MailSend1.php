<?php
/**
 * MailSend1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * MailSend1 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MailSend1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'mail_send_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fromemail' => 'string',
        'fromname' => 'string',
        'outgoingserver' => 'string',
        'port' => 'int',
        'security' => 'string',
        'smtp' => 'bool',
        'user' => 'string',
        'pass' => 'string',
        'oauth' => '\RMoore\Truenas\Model\Oauth'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fromemail' => null,
        'fromname' => null,
        'outgoingserver' => null,
        'port' => null,
        'security' => null,
        'smtp' => null,
        'user' => null,
        'pass' => null,
        'oauth' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fromemail' => false,
		'fromname' => false,
		'outgoingserver' => false,
		'port' => false,
		'security' => false,
		'smtp' => false,
		'user' => true,
		'pass' => true,
		'oauth' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fromemail' => 'fromemail',
        'fromname' => 'fromname',
        'outgoingserver' => 'outgoingserver',
        'port' => 'port',
        'security' => 'security',
        'smtp' => 'smtp',
        'user' => 'user',
        'pass' => 'pass',
        'oauth' => 'oauth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fromemail' => 'setFromemail',
        'fromname' => 'setFromname',
        'outgoingserver' => 'setOutgoingserver',
        'port' => 'setPort',
        'security' => 'setSecurity',
        'smtp' => 'setSmtp',
        'user' => 'setUser',
        'pass' => 'setPass',
        'oauth' => 'setOauth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fromemail' => 'getFromemail',
        'fromname' => 'getFromname',
        'outgoingserver' => 'getOutgoingserver',
        'port' => 'getPort',
        'security' => 'getSecurity',
        'smtp' => 'getSmtp',
        'user' => 'getUser',
        'pass' => 'getPass',
        'oauth' => 'getOauth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SECURITY_PLAIN = 'PLAIN';
    public const SECURITY_SSL = 'SSL';
    public const SECURITY_TLS = 'TLS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecurityAllowableValues()
    {
        return [
            self::SECURITY_PLAIN,
            self::SECURITY_SSL,
            self::SECURITY_TLS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fromemail', $data ?? [], null);
        $this->setIfExists('fromname', $data ?? [], null);
        $this->setIfExists('outgoingserver', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('security', $data ?? [], null);
        $this->setIfExists('smtp', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('pass', $data ?? [], null);
        $this->setIfExists('oauth', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($this->container['security']) && !in_array($this->container['security'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'security', must be one of '%s'",
                $this->container['security'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fromemail
     *
     * @return string|null
     */
    public function getFromemail()
    {
        return $this->container['fromemail'];
    }

    /**
     * Sets fromemail
     *
     * @param string|null $fromemail fromemail
     *
     * @return self
     */
    public function setFromemail($fromemail)
    {

        if (is_null($fromemail)) {
            throw new \InvalidArgumentException('non-nullable fromemail cannot be null');
        }

        $this->container['fromemail'] = $fromemail;

        return $this;
    }

    /**
     * Gets fromname
     *
     * @return string|null
     */
    public function getFromname()
    {
        return $this->container['fromname'];
    }

    /**
     * Sets fromname
     *
     * @param string|null $fromname fromname
     *
     * @return self
     */
    public function setFromname($fromname)
    {

        if (is_null($fromname)) {
            throw new \InvalidArgumentException('non-nullable fromname cannot be null');
        }

        $this->container['fromname'] = $fromname;

        return $this;
    }

    /**
     * Gets outgoingserver
     *
     * @return string|null
     */
    public function getOutgoingserver()
    {
        return $this->container['outgoingserver'];
    }

    /**
     * Sets outgoingserver
     *
     * @param string|null $outgoingserver outgoingserver
     *
     * @return self
     */
    public function setOutgoingserver($outgoingserver)
    {

        if (is_null($outgoingserver)) {
            throw new \InvalidArgumentException('non-nullable outgoingserver cannot be null');
        }

        $this->container['outgoingserver'] = $outgoingserver;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {

        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets security
     *
     * @return string|null
     */
    public function getSecurity()
    {
        return $this->container['security'];
    }

    /**
     * Sets security
     *
     * @param string|null $security security
     *
     * @return self
     */
    public function setSecurity($security)
    {
        $allowedValues = $this->getSecurityAllowableValues();
        if (!is_null($security) && !in_array($security, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'security', must be one of '%s'",
                    $security,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($security)) {
            throw new \InvalidArgumentException('non-nullable security cannot be null');
        }

        $this->container['security'] = $security;

        return $this;
    }

    /**
     * Gets smtp
     *
     * @return bool|null
     */
    public function getSmtp()
    {
        return $this->container['smtp'];
    }

    /**
     * Sets smtp
     *
     * @param bool|null $smtp smtp
     *
     * @return self
     */
    public function setSmtp($smtp)
    {

        if (is_null($smtp)) {
            throw new \InvalidArgumentException('non-nullable smtp cannot be null');
        }

        $this->container['smtp'] = $smtp;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets pass
     *
     * @return string|null
     */
    public function getPass()
    {
        return $this->container['pass'];
    }

    /**
     * Sets pass
     *
     * @param string|null $pass pass
     *
     * @return self
     */
    public function setPass($pass)
    {

        if (is_null($pass)) {
            array_push($this->openAPINullablesSetToNull, 'pass');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pass', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['pass'] = $pass;

        return $this;
    }

    /**
     * Gets oauth
     *
     * @return \RMoore\Truenas\Model\Oauth|null
     */
    public function getOauth()
    {
        return $this->container['oauth'];
    }

    /**
     * Sets oauth
     *
     * @param \RMoore\Truenas\Model\Oauth|null $oauth oauth
     *
     * @return self
     */
    public function setOauth($oauth)
    {

        if (is_null($oauth)) {
            throw new \InvalidArgumentException('non-nullable oauth cannot be null');
        }

        $this->container['oauth'] = $oauth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


