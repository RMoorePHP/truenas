<?php
/**
 * GroupCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * GroupCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GroupCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'group_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gid' => 'int',
        'name' => 'string',
        'smb' => 'bool',
        'sudo' => 'bool',
        'sudo_nopasswd' => 'bool',
        'sudo_commands' => 'string[]',
        'allow_duplicate_gid' => 'bool',
        'users' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gid' => null,
        'name' => null,
        'smb' => null,
        'sudo' => null,
        'sudo_nopasswd' => null,
        'sudo_commands' => null,
        'allow_duplicate_gid' => null,
        'users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gid' => false,
		'name' => false,
		'smb' => false,
		'sudo' => false,
		'sudo_nopasswd' => false,
		'sudo_commands' => false,
		'allow_duplicate_gid' => false,
		'users' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gid' => 'gid',
        'name' => 'name',
        'smb' => 'smb',
        'sudo' => 'sudo',
        'sudo_nopasswd' => 'sudo_nopasswd',
        'sudo_commands' => 'sudo_commands',
        'allow_duplicate_gid' => 'allow_duplicate_gid',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gid' => 'setGid',
        'name' => 'setName',
        'smb' => 'setSmb',
        'sudo' => 'setSudo',
        'sudo_nopasswd' => 'setSudoNopasswd',
        'sudo_commands' => 'setSudoCommands',
        'allow_duplicate_gid' => 'setAllowDuplicateGid',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gid' => 'getGid',
        'name' => 'getName',
        'smb' => 'getSmb',
        'sudo' => 'getSudo',
        'sudo_nopasswd' => 'getSudoNopasswd',
        'sudo_commands' => 'getSudoCommands',
        'allow_duplicate_gid' => 'getAllowDuplicateGid',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gid', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('smb', $data ?? [], true);
        $this->setIfExists('sudo', $data ?? [], false);
        $this->setIfExists('sudo_nopasswd', $data ?? [], false);
        $this->setIfExists('sudo_commands', $data ?? [], null);
        $this->setIfExists('allow_duplicate_gid', $data ?? [], false);
        $this->setIfExists('users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gid
     *
     * @return int|null
     */
    public function getGid()
    {
        return $this->container['gid'];
    }

    /**
     * Sets gid
     *
     * @param int|null $gid If `gid` is not provided it is automatically filled with the next one available.
     *
     * @return self
     */
    public function setGid($gid)
    {

        if (is_null($gid)) {
            throw new \InvalidArgumentException('non-nullable gid cannot be null');
        }

        $this->container['gid'] = $gid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets smb
     *
     * @return bool|null
     */
    public function getSmb()
    {
        return $this->container['smb'];
    }

    /**
     * Sets smb
     *
     * @param bool|null $smb smb
     *
     * @return self
     */
    public function setSmb($smb)
    {

        if (is_null($smb)) {
            throw new \InvalidArgumentException('non-nullable smb cannot be null');
        }

        $this->container['smb'] = $smb;

        return $this;
    }

    /**
     * Gets sudo
     *
     * @return bool|null
     */
    public function getSudo()
    {
        return $this->container['sudo'];
    }

    /**
     * Sets sudo
     *
     * @param bool|null $sudo sudo
     *
     * @return self
     */
    public function setSudo($sudo)
    {

        if (is_null($sudo)) {
            throw new \InvalidArgumentException('non-nullable sudo cannot be null');
        }

        $this->container['sudo'] = $sudo;

        return $this;
    }

    /**
     * Gets sudo_nopasswd
     *
     * @return bool|null
     */
    public function getSudoNopasswd()
    {
        return $this->container['sudo_nopasswd'];
    }

    /**
     * Sets sudo_nopasswd
     *
     * @param bool|null $sudo_nopasswd sudo_nopasswd
     *
     * @return self
     */
    public function setSudoNopasswd($sudo_nopasswd)
    {

        if (is_null($sudo_nopasswd)) {
            throw new \InvalidArgumentException('non-nullable sudo_nopasswd cannot be null');
        }

        $this->container['sudo_nopasswd'] = $sudo_nopasswd;

        return $this;
    }

    /**
     * Gets sudo_commands
     *
     * @return string[]|null
     */
    public function getSudoCommands()
    {
        return $this->container['sudo_commands'];
    }

    /**
     * Sets sudo_commands
     *
     * @param string[]|null $sudo_commands sudo_commands
     *
     * @return self
     */
    public function setSudoCommands($sudo_commands)
    {

        if (is_null($sudo_commands)) {
            throw new \InvalidArgumentException('non-nullable sudo_commands cannot be null');
        }

        $this->container['sudo_commands'] = $sudo_commands;

        return $this;
    }

    /**
     * Gets allow_duplicate_gid
     *
     * @return bool|null
     */
    public function getAllowDuplicateGid()
    {
        return $this->container['allow_duplicate_gid'];
    }

    /**
     * Sets allow_duplicate_gid
     *
     * @param bool|null $allow_duplicate_gid `allow_duplicate_gid` allows distinct group names to share the same gid.
     *
     * @return self
     */
    public function setAllowDuplicateGid($allow_duplicate_gid)
    {

        if (is_null($allow_duplicate_gid)) {
            throw new \InvalidArgumentException('non-nullable allow_duplicate_gid cannot be null');
        }

        $this->container['allow_duplicate_gid'] = $allow_duplicate_gid;

        return $this;
    }

    /**
     * Gets users
     *
     * @return int[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int[]|null $users `users` is a list of user ids (`id` attribute from `user.query`).
     *
     * @return self
     */
    public function setUsers($users)
    {

        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }

        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


