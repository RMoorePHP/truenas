<?php
/**
 * FilesystemSetacl0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * FilesystemSetacl0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FilesystemSetacl0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'filesystem_setacl_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => 'string',
        'uid' => 'int',
        'gid' => 'int',
        'dacl' => '\RMoore\Truenas\Model\FilesystemSetacl0Dacl',
        'nfs41_flags' => '\RMoore\Truenas\Model\Nfs41Flags',
        'acltype' => 'string',
        'options' => '\RMoore\Truenas\Model\Options1'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path' => null,
        'uid' => null,
        'gid' => null,
        'dacl' => null,
        'nfs41_flags' => null,
        'acltype' => null,
        'options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'path' => false,
		'uid' => true,
		'gid' => true,
		'dacl' => false,
		'nfs41_flags' => false,
		'acltype' => true,
		'options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'uid' => 'uid',
        'gid' => 'gid',
        'dacl' => 'dacl',
        'nfs41_flags' => 'nfs41_flags',
        'acltype' => 'acltype',
        'options' => 'options'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'uid' => 'setUid',
        'gid' => 'setGid',
        'dacl' => 'setDacl',
        'nfs41_flags' => 'setNfs41Flags',
        'acltype' => 'setAcltype',
        'options' => 'setOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'uid' => 'getUid',
        'gid' => 'getGid',
        'dacl' => 'getDacl',
        'nfs41_flags' => 'getNfs41Flags',
        'acltype' => 'getAcltype',
        'options' => 'getOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACLTYPE_NFS4 = 'NFS4';
    public const ACLTYPE_POSIX1_E = 'POSIX1E';
    public const ACLTYPE_DISABLED = 'DISABLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcltypeAllowableValues()
    {
        return [
            self::ACLTYPE_NFS4,
            self::ACLTYPE_POSIX1_E,
            self::ACLTYPE_DISABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('uid', $data ?? [], null);
        $this->setIfExists('gid', $data ?? [], null);
        $this->setIfExists('dacl', $data ?? [], null);
        $this->setIfExists('nfs41_flags', $data ?? [], null);
        $this->setIfExists('acltype', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAcltypeAllowableValues();
        if (!is_null($this->container['acltype']) && !in_array($this->container['acltype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'acltype', must be one of '%s'",
                $this->container['acltype'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path `path` full path to directory or file.
     *
     * @return self
     */
    public function setPath($path)
    {

        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }

        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int|null
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int|null $uid `uid` the desired UID of the file user. If set to None (the default), then user is not changed.
     *
     * @return self
     */
    public function setUid($uid)
    {

        if (is_null($uid)) {
            array_push($this->openAPINullablesSetToNull, 'uid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets gid
     *
     * @return int|null
     */
    public function getGid()
    {
        return $this->container['gid'];
    }

    /**
     * Sets gid
     *
     * @param int|null $gid `gid` the desired GID of the file group. If set to None (the default), then group is not changed.
     *
     * @return self
     */
    public function setGid($gid)
    {

        if (is_null($gid)) {
            array_push($this->openAPINullablesSetToNull, 'gid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['gid'] = $gid;

        return $this;
    }

    /**
     * Gets dacl
     *
     * @return \RMoore\Truenas\Model\FilesystemSetacl0Dacl|null
     */
    public function getDacl()
    {
        return $this->container['dacl'];
    }

    /**
     * Sets dacl
     *
     * @param \RMoore\Truenas\Model\FilesystemSetacl0Dacl|null $dacl dacl
     *
     * @return self
     */
    public function setDacl($dacl)
    {

        if (is_null($dacl)) {
            throw new \InvalidArgumentException('non-nullable dacl cannot be null');
        }

        $this->container['dacl'] = $dacl;

        return $this;
    }

    /**
     * Gets nfs41_flags
     *
     * @return \RMoore\Truenas\Model\Nfs41Flags|null
     */
    public function getNfs41Flags()
    {
        return $this->container['nfs41_flags'];
    }

    /**
     * Sets nfs41_flags
     *
     * @param \RMoore\Truenas\Model\Nfs41Flags|null $nfs41_flags nfs41_flags
     *
     * @return self
     */
    public function setNfs41Flags($nfs41_flags)
    {

        if (is_null($nfs41_flags)) {
            throw new \InvalidArgumentException('non-nullable nfs41_flags cannot be null');
        }

        $this->container['nfs41_flags'] = $nfs41_flags;

        return $this;
    }

    /**
     * Gets acltype
     *
     * @return string|null
     */
    public function getAcltype()
    {
        return $this->container['acltype'];
    }

    /**
     * Sets acltype
     *
     * @param string|null $acltype `dacl` ACL entries. Formatting depends on the underlying `acltype`. NFS4ACL requires NFSv4 entries. POSIX1e requires POSIX1e entries.
     *
     * @return self
     */
    public function setAcltype($acltype)
    {
        $allowedValues = $this->getAcltypeAllowableValues();
        if (!is_null($acltype) && !in_array($acltype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'acltype', must be one of '%s'",
                    $acltype,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($acltype)) {
            array_push($this->openAPINullablesSetToNull, 'acltype');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acltype', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['acltype'] = $acltype;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \RMoore\Truenas\Model\Options1|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \RMoore\Truenas\Model\Options1|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {

        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }

        $this->container['options'] = $options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


