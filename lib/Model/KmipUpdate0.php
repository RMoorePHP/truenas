<?php
/**
 * KmipUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * KmipUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class KmipUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'kmip_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'manage_sed_disks' => 'bool',
        'manage_zfs_keys' => 'bool',
        'certificate' => 'int',
        'certificate_authority' => 'int',
        'port' => 'int',
        'server' => 'string',
        'ssl_version' => 'string',
        'force_clear' => 'bool',
        'change_server' => 'bool',
        'validate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'manage_sed_disks' => null,
        'manage_zfs_keys' => null,
        'certificate' => null,
        'certificate_authority' => null,
        'port' => null,
        'server' => null,
        'ssl_version' => null,
        'force_clear' => null,
        'change_server' => null,
        'validate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
		'manage_sed_disks' => false,
		'manage_zfs_keys' => false,
		'certificate' => true,
		'certificate_authority' => true,
		'port' => false,
		'server' => true,
		'ssl_version' => false,
		'force_clear' => false,
		'change_server' => false,
		'validate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'manage_sed_disks' => 'manage_sed_disks',
        'manage_zfs_keys' => 'manage_zfs_keys',
        'certificate' => 'certificate',
        'certificate_authority' => 'certificate_authority',
        'port' => 'port',
        'server' => 'server',
        'ssl_version' => 'ssl_version',
        'force_clear' => 'force_clear',
        'change_server' => 'change_server',
        'validate' => 'validate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'manage_sed_disks' => 'setManageSedDisks',
        'manage_zfs_keys' => 'setManageZfsKeys',
        'certificate' => 'setCertificate',
        'certificate_authority' => 'setCertificateAuthority',
        'port' => 'setPort',
        'server' => 'setServer',
        'ssl_version' => 'setSslVersion',
        'force_clear' => 'setForceClear',
        'change_server' => 'setChangeServer',
        'validate' => 'setValidate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'manage_sed_disks' => 'getManageSedDisks',
        'manage_zfs_keys' => 'getManageZfsKeys',
        'certificate' => 'getCertificate',
        'certificate_authority' => 'getCertificateAuthority',
        'port' => 'getPort',
        'server' => 'getServer',
        'ssl_version' => 'getSslVersion',
        'force_clear' => 'getForceClear',
        'change_server' => 'getChangeServer',
        'validate' => 'getValidate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SSL_VERSION_TLSV1 = 'PROTOCOL_TLSv1';
    public const SSL_VERSION_TLSV1_1 = 'PROTOCOL_TLSv1_1';
    public const SSL_VERSION_TLSV1_2 = 'PROTOCOL_TLSv1_2';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslVersionAllowableValues()
    {
        return [
            self::SSL_VERSION_TLSV1,
            self::SSL_VERSION_TLSV1_1,
            self::SSL_VERSION_TLSV1_2,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('manage_sed_disks', $data ?? [], null);
        $this->setIfExists('manage_zfs_keys', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('certificate_authority', $data ?? [], null);
        $this->setIfExists('port', $data ?? [], null);
        $this->setIfExists('server', $data ?? [], null);
        $this->setIfExists('ssl_version', $data ?? [], null);
        $this->setIfExists('force_clear', $data ?? [], null);
        $this->setIfExists('change_server', $data ?? [], null);
        $this->setIfExists('validate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSslVersionAllowableValues();
        if (!is_null($this->container['ssl_version']) && !in_array($this->container['ssl_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl_version', must be one of '%s'",
                $this->container['ssl_version'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled `enabled` if true, cannot be set to disabled if there are existing keys pending to be synced. However users can still perform this action by enabling `force_clear`.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets manage_sed_disks
     *
     * @return bool|null
     */
    public function getManageSedDisks()
    {
        return $this->container['manage_sed_disks'];
    }

    /**
     * Sets manage_sed_disks
     *
     * @param bool|null $manage_sed_disks `manage_zfs_keys`/`manage_sed_disks` when enabled will sync keys from local database to remote KMIP server. When disabled, if there are any keys left to be retrieved from the KMIP server, it will sync them back to local database.
     *
     * @return self
     */
    public function setManageSedDisks($manage_sed_disks)
    {

        if (is_null($manage_sed_disks)) {
            throw new \InvalidArgumentException('non-nullable manage_sed_disks cannot be null');
        }

        $this->container['manage_sed_disks'] = $manage_sed_disks;

        return $this;
    }

    /**
     * Gets manage_zfs_keys
     *
     * @return bool|null
     */
    public function getManageZfsKeys()
    {
        return $this->container['manage_zfs_keys'];
    }

    /**
     * Sets manage_zfs_keys
     *
     * @param bool|null $manage_zfs_keys `manage_zfs_keys`/`manage_sed_disks` when enabled will sync keys from local database to remote KMIP server. When disabled, if there are any keys left to be retrieved from the KMIP server, it will sync them back to local database.
     *
     * @return self
     */
    public function setManageZfsKeys($manage_zfs_keys)
    {

        if (is_null($manage_zfs_keys)) {
            throw new \InvalidArgumentException('non-nullable manage_zfs_keys cannot be null');
        }

        $this->container['manage_zfs_keys'] = $manage_zfs_keys;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return int|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param int|null $certificate System currently authenticates connection with remote KMIP Server with a TLS handshake. `certificate` and
     *
     * @return self
     */
    public function setCertificate($certificate)
    {

        if (is_null($certificate)) {
            array_push($this->openAPINullablesSetToNull, 'certificate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('certificate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets certificate_authority
     *
     * @return int|null
     */
    public function getCertificateAuthority()
    {
        return $this->container['certificate_authority'];
    }

    /**
     * Sets certificate_authority
     *
     * @param int|null $certificate_authority `certificate_authority` determine the certs which will be used to initiate the TLS handshake with `server`.
     *
     * @return self
     */
    public function setCertificateAuthority($certificate_authority)
    {

        if (is_null($certificate_authority)) {
            array_push($this->openAPINullablesSetToNull, 'certificate_authority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('certificate_authority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['certificate_authority'] = $certificate_authority;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {

        if (is_null($port)) {
            throw new \InvalidArgumentException('non-nullable port cannot be null');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server `certificate_authority` determine the certs which will be used to initiate the TLS handshake with `server`. `validate` is enabled by default. When enabled, system will test connection to `server` making sure it's reachable.
     *
     * @return self
     */
    public function setServer($server)
    {

        if (is_null($server)) {
            array_push($this->openAPINullablesSetToNull, 'server');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets ssl_version
     *
     * @return string|null
     */
    public function getSslVersion()
    {
        return $this->container['ssl_version'];
    }

    /**
     * Sets ssl_version
     *
     * @param string|null $ssl_version `ssl_version` can be specified to match the ssl configuration being used by KMIP server.
     *
     * @return self
     */
    public function setSslVersion($ssl_version)
    {
        $allowedValues = $this->getSslVersionAllowableValues();
        if (!is_null($ssl_version) && !in_array($ssl_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl_version', must be one of '%s'",
                    $ssl_version,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ssl_version)) {
            throw new \InvalidArgumentException('non-nullable ssl_version cannot be null');
        }

        $this->container['ssl_version'] = $ssl_version;

        return $this;
    }

    /**
     * Gets force_clear
     *
     * @return bool|null
     */
    public function getForceClear()
    {
        return $this->container['force_clear'];
    }

    /**
     * Sets force_clear
     *
     * @param bool|null $force_clear `enabled` if true, cannot be set to disabled if there are existing keys pending to be synced. However users can still perform this action by enabling `force_clear`. `change_server` is a boolean field which allows users to migrate data between two KMIP servers. System will first migrate keys from old KMIP server to local database and then migrate the keys from local database to new KMIP server. If it is unable to retrieve all the keys from old server, this will fail. Users can bypass this by enabling `force_clear`.
     *
     * @return self
     */
    public function setForceClear($force_clear)
    {

        if (is_null($force_clear)) {
            throw new \InvalidArgumentException('non-nullable force_clear cannot be null');
        }

        $this->container['force_clear'] = $force_clear;

        return $this;
    }

    /**
     * Gets change_server
     *
     * @return bool|null
     */
    public function getChangeServer()
    {
        return $this->container['change_server'];
    }

    /**
     * Sets change_server
     *
     * @param bool|null $change_server `change_server` is a boolean field which allows users to migrate data between two KMIP servers. System will first migrate keys from old KMIP server to local database and then migrate the keys from local database to new KMIP server. If it is unable to retrieve all the keys from old server, this will fail. Users can bypass this by enabling `force_clear`.
     *
     * @return self
     */
    public function setChangeServer($change_server)
    {

        if (is_null($change_server)) {
            throw new \InvalidArgumentException('non-nullable change_server cannot be null');
        }

        $this->container['change_server'] = $change_server;

        return $this;
    }

    /**
     * Gets validate
     *
     * @return bool|null
     */
    public function getValidate()
    {
        return $this->container['validate'];
    }

    /**
     * Sets validate
     *
     * @param bool|null $validate `validate` is enabled by default. When enabled, system will test connection to `server` making sure it's reachable.
     *
     * @return self
     */
    public function setValidate($validate)
    {

        if (is_null($validate)) {
            throw new \InvalidArgumentException('non-nullable validate cannot be null');
        }

        $this->container['validate'] = $validate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


