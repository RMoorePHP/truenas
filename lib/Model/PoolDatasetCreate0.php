<?php
/**
 * PoolDatasetCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * PoolDatasetCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PoolDatasetCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pool_dataset_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'volsize' => 'int',
        'volblocksize' => 'string',
        'sparse' => 'bool',
        'force_size' => 'bool',
        'comments' => '\RMoore\Truenas\Model\Comments',
        'sync' => '\RMoore\Truenas\Model\Sync',
        'compression' => '\RMoore\Truenas\Model\Compression',
        'atime' => '\RMoore\Truenas\Model\Atime',
        'exec' => '\RMoore\Truenas\Model\Exec',
        'managedby' => '\RMoore\Truenas\Model\Managedby',
        'quota' => 'int',
        'quota_warning' => '\RMoore\Truenas\Model\QuotaWarning',
        'quota_critical' => '\RMoore\Truenas\Model\QuotaCritical',
        'refquota' => 'int',
        'refquota_warning' => '\RMoore\Truenas\Model\RefquotaWarning',
        'refquota_critical' => '\RMoore\Truenas\Model\RefquotaCritical',
        'reservation' => 'int',
        'refreservation' => 'int',
        'special_small_block_size' => '\RMoore\Truenas\Model\SpecialSmallBlockSize',
        'copies' => '\RMoore\Truenas\Model\Copies',
        'snapdir' => '\RMoore\Truenas\Model\Snapdir',
        'deduplication' => '\RMoore\Truenas\Model\Deduplication',
        'checksum' => '\RMoore\Truenas\Model\Checksum',
        'readonly' => '\RMoore\Truenas\Model\Readonly',
        'recordsize' => '\RMoore\Truenas\Model\Recordsize',
        'casesensitivity' => '\RMoore\Truenas\Model\Casesensitivity',
        'aclmode' => '\RMoore\Truenas\Model\Aclmode',
        'acltype' => '\RMoore\Truenas\Model\Acltype',
        'share_type' => 'string',
        'xattr' => '\RMoore\Truenas\Model\Xattr',
        'encryption_options' => '\RMoore\Truenas\Model\EncryptionOptions1',
        'encryption' => 'bool',
        'inherit_encryption' => 'bool',
        'user_properties' => '\RMoore\Truenas\Model\UserProperty[]',
        'create_ancestors' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'volsize' => null,
        'volblocksize' => null,
        'sparse' => null,
        'force_size' => null,
        'comments' => null,
        'sync' => null,
        'compression' => null,
        'atime' => null,
        'exec' => null,
        'managedby' => null,
        'quota' => null,
        'quota_warning' => null,
        'quota_critical' => null,
        'refquota' => null,
        'refquota_warning' => null,
        'refquota_critical' => null,
        'reservation' => null,
        'refreservation' => null,
        'special_small_block_size' => null,
        'copies' => null,
        'snapdir' => null,
        'deduplication' => null,
        'checksum' => null,
        'readonly' => null,
        'recordsize' => null,
        'casesensitivity' => null,
        'aclmode' => null,
        'acltype' => null,
        'share_type' => null,
        'xattr' => null,
        'encryption_options' => null,
        'encryption' => null,
        'inherit_encryption' => null,
        'user_properties' => null,
        'create_ancestors' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'type' => false,
		'volsize' => false,
		'volblocksize' => false,
		'sparse' => false,
		'force_size' => false,
		'comments' => false,
		'sync' => false,
		'compression' => false,
		'atime' => false,
		'exec' => false,
		'managedby' => false,
		'quota' => true,
		'quota_warning' => false,
		'quota_critical' => false,
		'refquota' => true,
		'refquota_warning' => false,
		'refquota_critical' => false,
		'reservation' => false,
		'refreservation' => false,
		'special_small_block_size' => false,
		'copies' => false,
		'snapdir' => false,
		'deduplication' => false,
		'checksum' => false,
		'readonly' => false,
		'recordsize' => false,
		'casesensitivity' => false,
		'aclmode' => false,
		'acltype' => false,
		'share_type' => false,
		'xattr' => false,
		'encryption_options' => false,
		'encryption' => false,
		'inherit_encryption' => false,
		'user_properties' => false,
		'create_ancestors' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'volsize' => 'volsize',
        'volblocksize' => 'volblocksize',
        'sparse' => 'sparse',
        'force_size' => 'force_size',
        'comments' => 'comments',
        'sync' => 'sync',
        'compression' => 'compression',
        'atime' => 'atime',
        'exec' => 'exec',
        'managedby' => 'managedby',
        'quota' => 'quota',
        'quota_warning' => 'quota_warning',
        'quota_critical' => 'quota_critical',
        'refquota' => 'refquota',
        'refquota_warning' => 'refquota_warning',
        'refquota_critical' => 'refquota_critical',
        'reservation' => 'reservation',
        'refreservation' => 'refreservation',
        'special_small_block_size' => 'special_small_block_size',
        'copies' => 'copies',
        'snapdir' => 'snapdir',
        'deduplication' => 'deduplication',
        'checksum' => 'checksum',
        'readonly' => 'readonly',
        'recordsize' => 'recordsize',
        'casesensitivity' => 'casesensitivity',
        'aclmode' => 'aclmode',
        'acltype' => 'acltype',
        'share_type' => 'share_type',
        'xattr' => 'xattr',
        'encryption_options' => 'encryption_options',
        'encryption' => 'encryption',
        'inherit_encryption' => 'inherit_encryption',
        'user_properties' => 'user_properties',
        'create_ancestors' => 'create_ancestors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'volsize' => 'setVolsize',
        'volblocksize' => 'setVolblocksize',
        'sparse' => 'setSparse',
        'force_size' => 'setForceSize',
        'comments' => 'setComments',
        'sync' => 'setSync',
        'compression' => 'setCompression',
        'atime' => 'setAtime',
        'exec' => 'setExec',
        'managedby' => 'setManagedby',
        'quota' => 'setQuota',
        'quota_warning' => 'setQuotaWarning',
        'quota_critical' => 'setQuotaCritical',
        'refquota' => 'setRefquota',
        'refquota_warning' => 'setRefquotaWarning',
        'refquota_critical' => 'setRefquotaCritical',
        'reservation' => 'setReservation',
        'refreservation' => 'setRefreservation',
        'special_small_block_size' => 'setSpecialSmallBlockSize',
        'copies' => 'setCopies',
        'snapdir' => 'setSnapdir',
        'deduplication' => 'setDeduplication',
        'checksum' => 'setChecksum',
        'readonly' => 'setReadonly',
        'recordsize' => 'setRecordsize',
        'casesensitivity' => 'setCasesensitivity',
        'aclmode' => 'setAclmode',
        'acltype' => 'setAcltype',
        'share_type' => 'setShareType',
        'xattr' => 'setXattr',
        'encryption_options' => 'setEncryptionOptions',
        'encryption' => 'setEncryption',
        'inherit_encryption' => 'setInheritEncryption',
        'user_properties' => 'setUserProperties',
        'create_ancestors' => 'setCreateAncestors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'volsize' => 'getVolsize',
        'volblocksize' => 'getVolblocksize',
        'sparse' => 'getSparse',
        'force_size' => 'getForceSize',
        'comments' => 'getComments',
        'sync' => 'getSync',
        'compression' => 'getCompression',
        'atime' => 'getAtime',
        'exec' => 'getExec',
        'managedby' => 'getManagedby',
        'quota' => 'getQuota',
        'quota_warning' => 'getQuotaWarning',
        'quota_critical' => 'getQuotaCritical',
        'refquota' => 'getRefquota',
        'refquota_warning' => 'getRefquotaWarning',
        'refquota_critical' => 'getRefquotaCritical',
        'reservation' => 'getReservation',
        'refreservation' => 'getRefreservation',
        'special_small_block_size' => 'getSpecialSmallBlockSize',
        'copies' => 'getCopies',
        'snapdir' => 'getSnapdir',
        'deduplication' => 'getDeduplication',
        'checksum' => 'getChecksum',
        'readonly' => 'getReadonly',
        'recordsize' => 'getRecordsize',
        'casesensitivity' => 'getCasesensitivity',
        'aclmode' => 'getAclmode',
        'acltype' => 'getAcltype',
        'share_type' => 'getShareType',
        'xattr' => 'getXattr',
        'encryption_options' => 'getEncryptionOptions',
        'encryption' => 'getEncryption',
        'inherit_encryption' => 'getInheritEncryption',
        'user_properties' => 'getUserProperties',
        'create_ancestors' => 'getCreateAncestors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_FILESYSTEM = 'FILESYSTEM';
    public const TYPE_VOLUME = 'VOLUME';
    public const VOLBLOCKSIZE__512 = '512';
    public const VOLBLOCKSIZE__1_K = '1K';
    public const VOLBLOCKSIZE__2_K = '2K';
    public const VOLBLOCKSIZE__4_K = '4K';
    public const VOLBLOCKSIZE__8_K = '8K';
    public const VOLBLOCKSIZE__16_K = '16K';
    public const VOLBLOCKSIZE__32_K = '32K';
    public const VOLBLOCKSIZE__64_K = '64K';
    public const VOLBLOCKSIZE__128_K = '128K';
    public const SHARE_TYPE_GENERIC = 'GENERIC';
    public const SHARE_TYPE_SMB = 'SMB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILESYSTEM,
            self::TYPE_VOLUME,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVolblocksizeAllowableValues()
    {
        return [
            self::VOLBLOCKSIZE__512,
            self::VOLBLOCKSIZE__1_K,
            self::VOLBLOCKSIZE__2_K,
            self::VOLBLOCKSIZE__4_K,
            self::VOLBLOCKSIZE__8_K,
            self::VOLBLOCKSIZE__16_K,
            self::VOLBLOCKSIZE__32_K,
            self::VOLBLOCKSIZE__64_K,
            self::VOLBLOCKSIZE__128_K,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShareTypeAllowableValues()
    {
        return [
            self::SHARE_TYPE_GENERIC,
            self::SHARE_TYPE_SMB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'FILESYSTEM');
        $this->setIfExists('volsize', $data ?? [], null);
        $this->setIfExists('volblocksize', $data ?? [], null);
        $this->setIfExists('sparse', $data ?? [], null);
        $this->setIfExists('force_size', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('sync', $data ?? [], null);
        $this->setIfExists('compression', $data ?? [], null);
        $this->setIfExists('atime', $data ?? [], null);
        $this->setIfExists('exec', $data ?? [], null);
        $this->setIfExists('managedby', $data ?? [], null);
        $this->setIfExists('quota', $data ?? [], null);
        $this->setIfExists('quota_warning', $data ?? [], null);
        $this->setIfExists('quota_critical', $data ?? [], null);
        $this->setIfExists('refquota', $data ?? [], null);
        $this->setIfExists('refquota_warning', $data ?? [], null);
        $this->setIfExists('refquota_critical', $data ?? [], null);
        $this->setIfExists('reservation', $data ?? [], null);
        $this->setIfExists('refreservation', $data ?? [], null);
        $this->setIfExists('special_small_block_size', $data ?? [], null);
        $this->setIfExists('copies', $data ?? [], null);
        $this->setIfExists('snapdir', $data ?? [], null);
        $this->setIfExists('deduplication', $data ?? [], null);
        $this->setIfExists('checksum', $data ?? [], null);
        $this->setIfExists('readonly', $data ?? [], null);
        $this->setIfExists('recordsize', $data ?? [], null);
        $this->setIfExists('casesensitivity', $data ?? [], null);
        $this->setIfExists('aclmode', $data ?? [], null);
        $this->setIfExists('acltype', $data ?? [], null);
        $this->setIfExists('share_type', $data ?? [], 'GENERIC');
        $this->setIfExists('xattr', $data ?? [], null);
        $this->setIfExists('encryption_options', $data ?? [], null);
        $this->setIfExists('encryption', $data ?? [], false);
        $this->setIfExists('inherit_encryption', $data ?? [], true);
        $this->setIfExists('user_properties', $data ?? [], null);
        $this->setIfExists('create_ancestors', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVolblocksizeAllowableValues();
        if (!is_null($this->container['volblocksize']) && !in_array($this->container['volblocksize'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'volblocksize', must be one of '%s'",
                $this->container['volblocksize'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShareTypeAllowableValues();
        if (!is_null($this->container['share_type']) && !in_array($this->container['share_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'share_type', must be one of '%s'",
                $this->container['share_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool. There are 2 cases where ZFS encryption is not allowed for a dataset: 1) Pool in question is GELI encrypted. 2) If the parent dataset is encrypted with a passphrase and `name` is being created    with a key for encrypting the dataset. `encryption_options` specifies configuration for encryption of dataset for `name` pool. `encryption_options.passphrase` must be specified if encryption for dataset is desired with a passphrase as a key. Otherwise a hex encoded key can be specified by providing `encryption_options.key`. `encryption_options.generate_key` when enabled automatically generates the key to be used for dataset encryption.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets volsize
     *
     * @return int|null
     */
    public function getVolsize()
    {
        return $this->container['volsize'];
    }

    /**
     * Sets volsize
     *
     * @param int|null $volsize `volsize` is required for type=VOLUME and is supposed to be a multiple of the block size.
     *
     * @return self
     */
    public function setVolsize($volsize)
    {

        if (is_null($volsize)) {
            throw new \InvalidArgumentException('non-nullable volsize cannot be null');
        }

        $this->container['volsize'] = $volsize;

        return $this;
    }

    /**
     * Gets volblocksize
     *
     * @return string|null
     */
    public function getVolblocksize()
    {
        return $this->container['volblocksize'];
    }

    /**
     * Sets volblocksize
     *
     * @param string|null $volblocksize `sparse` and `volblocksize` are only used for type=VOLUME.
     *
     * @return self
     */
    public function setVolblocksize($volblocksize)
    {
        $allowedValues = $this->getVolblocksizeAllowableValues();
        if (!is_null($volblocksize) && !in_array($volblocksize, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'volblocksize', must be one of '%s'",
                    $volblocksize,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($volblocksize)) {
            throw new \InvalidArgumentException('non-nullable volblocksize cannot be null');
        }

        $this->container['volblocksize'] = $volblocksize;

        return $this;
    }

    /**
     * Gets sparse
     *
     * @return bool|null
     */
    public function getSparse()
    {
        return $this->container['sparse'];
    }

    /**
     * Sets sparse
     *
     * @param bool|null $sparse `sparse` and `volblocksize` are only used for type=VOLUME.
     *
     * @return self
     */
    public function setSparse($sparse)
    {

        if (is_null($sparse)) {
            throw new \InvalidArgumentException('non-nullable sparse cannot be null');
        }

        $this->container['sparse'] = $sparse;

        return $this;
    }

    /**
     * Gets force_size
     *
     * @return bool|null
     */
    public function getForceSize()
    {
        return $this->container['force_size'];
    }

    /**
     * Sets force_size
     *
     * @param bool|null $force_size force_size
     *
     * @return self
     */
    public function setForceSize($force_size)
    {

        if (is_null($force_size)) {
            throw new \InvalidArgumentException('non-nullable force_size cannot be null');
        }

        $this->container['force_size'] = $force_size;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \RMoore\Truenas\Model\Comments|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \RMoore\Truenas\Model\Comments|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {

        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets sync
     *
     * @return \RMoore\Truenas\Model\Sync|null
     */
    public function getSync()
    {
        return $this->container['sync'];
    }

    /**
     * Sets sync
     *
     * @param \RMoore\Truenas\Model\Sync|null $sync sync
     *
     * @return self
     */
    public function setSync($sync)
    {

        if (is_null($sync)) {
            throw new \InvalidArgumentException('non-nullable sync cannot be null');
        }

        $this->container['sync'] = $sync;

        return $this;
    }

    /**
     * Gets compression
     *
     * @return \RMoore\Truenas\Model\Compression|null
     */
    public function getCompression()
    {
        return $this->container['compression'];
    }

    /**
     * Sets compression
     *
     * @param \RMoore\Truenas\Model\Compression|null $compression compression
     *
     * @return self
     */
    public function setCompression($compression)
    {

        if (is_null($compression)) {
            throw new \InvalidArgumentException('non-nullable compression cannot be null');
        }

        $this->container['compression'] = $compression;

        return $this;
    }

    /**
     * Gets atime
     *
     * @return \RMoore\Truenas\Model\Atime|null
     */
    public function getAtime()
    {
        return $this->container['atime'];
    }

    /**
     * Sets atime
     *
     * @param \RMoore\Truenas\Model\Atime|null $atime atime
     *
     * @return self
     */
    public function setAtime($atime)
    {

        if (is_null($atime)) {
            throw new \InvalidArgumentException('non-nullable atime cannot be null');
        }

        $this->container['atime'] = $atime;

        return $this;
    }

    /**
     * Gets exec
     *
     * @return \RMoore\Truenas\Model\Exec|null
     */
    public function getExec()
    {
        return $this->container['exec'];
    }

    /**
     * Sets exec
     *
     * @param \RMoore\Truenas\Model\Exec|null $exec exec
     *
     * @return self
     */
    public function setExec($exec)
    {

        if (is_null($exec)) {
            throw new \InvalidArgumentException('non-nullable exec cannot be null');
        }

        $this->container['exec'] = $exec;

        return $this;
    }

    /**
     * Gets managedby
     *
     * @return \RMoore\Truenas\Model\Managedby|null
     */
    public function getManagedby()
    {
        return $this->container['managedby'];
    }

    /**
     * Sets managedby
     *
     * @param \RMoore\Truenas\Model\Managedby|null $managedby managedby
     *
     * @return self
     */
    public function setManagedby($managedby)
    {

        if (is_null($managedby)) {
            throw new \InvalidArgumentException('non-nullable managedby cannot be null');
        }

        $this->container['managedby'] = $managedby;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return int|null
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param int|null $quota quota
     *
     * @return self
     */
    public function setQuota($quota)
    {

        if (is_null($quota)) {
            array_push($this->openAPINullablesSetToNull, 'quota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets quota_warning
     *
     * @return \RMoore\Truenas\Model\QuotaWarning|null
     */
    public function getQuotaWarning()
    {
        return $this->container['quota_warning'];
    }

    /**
     * Sets quota_warning
     *
     * @param \RMoore\Truenas\Model\QuotaWarning|null $quota_warning quota_warning
     *
     * @return self
     */
    public function setQuotaWarning($quota_warning)
    {

        if (is_null($quota_warning)) {
            throw new \InvalidArgumentException('non-nullable quota_warning cannot be null');
        }

        $this->container['quota_warning'] = $quota_warning;

        return $this;
    }

    /**
     * Gets quota_critical
     *
     * @return \RMoore\Truenas\Model\QuotaCritical|null
     */
    public function getQuotaCritical()
    {
        return $this->container['quota_critical'];
    }

    /**
     * Sets quota_critical
     *
     * @param \RMoore\Truenas\Model\QuotaCritical|null $quota_critical quota_critical
     *
     * @return self
     */
    public function setQuotaCritical($quota_critical)
    {

        if (is_null($quota_critical)) {
            throw new \InvalidArgumentException('non-nullable quota_critical cannot be null');
        }

        $this->container['quota_critical'] = $quota_critical;

        return $this;
    }

    /**
     * Gets refquota
     *
     * @return int|null
     */
    public function getRefquota()
    {
        return $this->container['refquota'];
    }

    /**
     * Sets refquota
     *
     * @param int|null $refquota refquota
     *
     * @return self
     */
    public function setRefquota($refquota)
    {

        if (is_null($refquota)) {
            array_push($this->openAPINullablesSetToNull, 'refquota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refquota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['refquota'] = $refquota;

        return $this;
    }

    /**
     * Gets refquota_warning
     *
     * @return \RMoore\Truenas\Model\RefquotaWarning|null
     */
    public function getRefquotaWarning()
    {
        return $this->container['refquota_warning'];
    }

    /**
     * Sets refquota_warning
     *
     * @param \RMoore\Truenas\Model\RefquotaWarning|null $refquota_warning refquota_warning
     *
     * @return self
     */
    public function setRefquotaWarning($refquota_warning)
    {

        if (is_null($refquota_warning)) {
            throw new \InvalidArgumentException('non-nullable refquota_warning cannot be null');
        }

        $this->container['refquota_warning'] = $refquota_warning;

        return $this;
    }

    /**
     * Gets refquota_critical
     *
     * @return \RMoore\Truenas\Model\RefquotaCritical|null
     */
    public function getRefquotaCritical()
    {
        return $this->container['refquota_critical'];
    }

    /**
     * Sets refquota_critical
     *
     * @param \RMoore\Truenas\Model\RefquotaCritical|null $refquota_critical refquota_critical
     *
     * @return self
     */
    public function setRefquotaCritical($refquota_critical)
    {

        if (is_null($refquota_critical)) {
            throw new \InvalidArgumentException('non-nullable refquota_critical cannot be null');
        }

        $this->container['refquota_critical'] = $refquota_critical;

        return $this;
    }

    /**
     * Gets reservation
     *
     * @return int|null
     */
    public function getReservation()
    {
        return $this->container['reservation'];
    }

    /**
     * Sets reservation
     *
     * @param int|null $reservation reservation
     *
     * @return self
     */
    public function setReservation($reservation)
    {

        if (is_null($reservation)) {
            throw new \InvalidArgumentException('non-nullable reservation cannot be null');
        }

        $this->container['reservation'] = $reservation;

        return $this;
    }

    /**
     * Gets refreservation
     *
     * @return int|null
     */
    public function getRefreservation()
    {
        return $this->container['refreservation'];
    }

    /**
     * Sets refreservation
     *
     * @param int|null $refreservation refreservation
     *
     * @return self
     */
    public function setRefreservation($refreservation)
    {

        if (is_null($refreservation)) {
            throw new \InvalidArgumentException('non-nullable refreservation cannot be null');
        }

        $this->container['refreservation'] = $refreservation;

        return $this;
    }

    /**
     * Gets special_small_block_size
     *
     * @return \RMoore\Truenas\Model\SpecialSmallBlockSize|null
     */
    public function getSpecialSmallBlockSize()
    {
        return $this->container['special_small_block_size'];
    }

    /**
     * Sets special_small_block_size
     *
     * @param \RMoore\Truenas\Model\SpecialSmallBlockSize|null $special_small_block_size special_small_block_size
     *
     * @return self
     */
    public function setSpecialSmallBlockSize($special_small_block_size)
    {

        if (is_null($special_small_block_size)) {
            throw new \InvalidArgumentException('non-nullable special_small_block_size cannot be null');
        }

        $this->container['special_small_block_size'] = $special_small_block_size;

        return $this;
    }

    /**
     * Gets copies
     *
     * @return \RMoore\Truenas\Model\Copies|null
     */
    public function getCopies()
    {
        return $this->container['copies'];
    }

    /**
     * Sets copies
     *
     * @param \RMoore\Truenas\Model\Copies|null $copies copies
     *
     * @return self
     */
    public function setCopies($copies)
    {

        if (is_null($copies)) {
            throw new \InvalidArgumentException('non-nullable copies cannot be null');
        }

        $this->container['copies'] = $copies;

        return $this;
    }

    /**
     * Gets snapdir
     *
     * @return \RMoore\Truenas\Model\Snapdir|null
     */
    public function getSnapdir()
    {
        return $this->container['snapdir'];
    }

    /**
     * Sets snapdir
     *
     * @param \RMoore\Truenas\Model\Snapdir|null $snapdir snapdir
     *
     * @return self
     */
    public function setSnapdir($snapdir)
    {

        if (is_null($snapdir)) {
            throw new \InvalidArgumentException('non-nullable snapdir cannot be null');
        }

        $this->container['snapdir'] = $snapdir;

        return $this;
    }

    /**
     * Gets deduplication
     *
     * @return \RMoore\Truenas\Model\Deduplication|null
     */
    public function getDeduplication()
    {
        return $this->container['deduplication'];
    }

    /**
     * Sets deduplication
     *
     * @param \RMoore\Truenas\Model\Deduplication|null $deduplication deduplication
     *
     * @return self
     */
    public function setDeduplication($deduplication)
    {

        if (is_null($deduplication)) {
            throw new \InvalidArgumentException('non-nullable deduplication cannot be null');
        }

        $this->container['deduplication'] = $deduplication;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return \RMoore\Truenas\Model\Checksum|null
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param \RMoore\Truenas\Model\Checksum|null $checksum checksum
     *
     * @return self
     */
    public function setChecksum($checksum)
    {

        if (is_null($checksum)) {
            throw new \InvalidArgumentException('non-nullable checksum cannot be null');
        }

        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return \RMoore\Truenas\Model\Readonly|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param \RMoore\Truenas\Model\Readonly|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {

        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }

        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets recordsize
     *
     * @return \RMoore\Truenas\Model\Recordsize|null
     */
    public function getRecordsize()
    {
        return $this->container['recordsize'];
    }

    /**
     * Sets recordsize
     *
     * @param \RMoore\Truenas\Model\Recordsize|null $recordsize recordsize
     *
     * @return self
     */
    public function setRecordsize($recordsize)
    {

        if (is_null($recordsize)) {
            throw new \InvalidArgumentException('non-nullable recordsize cannot be null');
        }

        $this->container['recordsize'] = $recordsize;

        return $this;
    }

    /**
     * Gets casesensitivity
     *
     * @return \RMoore\Truenas\Model\Casesensitivity|null
     */
    public function getCasesensitivity()
    {
        return $this->container['casesensitivity'];
    }

    /**
     * Sets casesensitivity
     *
     * @param \RMoore\Truenas\Model\Casesensitivity|null $casesensitivity casesensitivity
     *
     * @return self
     */
    public function setCasesensitivity($casesensitivity)
    {

        if (is_null($casesensitivity)) {
            throw new \InvalidArgumentException('non-nullable casesensitivity cannot be null');
        }

        $this->container['casesensitivity'] = $casesensitivity;

        return $this;
    }

    /**
     * Gets aclmode
     *
     * @return \RMoore\Truenas\Model\Aclmode|null
     */
    public function getAclmode()
    {
        return $this->container['aclmode'];
    }

    /**
     * Sets aclmode
     *
     * @param \RMoore\Truenas\Model\Aclmode|null $aclmode aclmode
     *
     * @return self
     */
    public function setAclmode($aclmode)
    {

        if (is_null($aclmode)) {
            throw new \InvalidArgumentException('non-nullable aclmode cannot be null');
        }

        $this->container['aclmode'] = $aclmode;

        return $this;
    }

    /**
     * Gets acltype
     *
     * @return \RMoore\Truenas\Model\Acltype|null
     */
    public function getAcltype()
    {
        return $this->container['acltype'];
    }

    /**
     * Sets acltype
     *
     * @param \RMoore\Truenas\Model\Acltype|null $acltype acltype
     *
     * @return self
     */
    public function setAcltype($acltype)
    {

        if (is_null($acltype)) {
            throw new \InvalidArgumentException('non-nullable acltype cannot be null');
        }

        $this->container['acltype'] = $acltype;

        return $this;
    }

    /**
     * Gets share_type
     *
     * @return string|null
     */
    public function getShareType()
    {
        return $this->container['share_type'];
    }

    /**
     * Sets share_type
     *
     * @param string|null $share_type share_type
     *
     * @return self
     */
    public function setShareType($share_type)
    {
        $allowedValues = $this->getShareTypeAllowableValues();
        if (!is_null($share_type) && !in_array($share_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'share_type', must be one of '%s'",
                    $share_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($share_type)) {
            throw new \InvalidArgumentException('non-nullable share_type cannot be null');
        }

        $this->container['share_type'] = $share_type;

        return $this;
    }

    /**
     * Gets xattr
     *
     * @return \RMoore\Truenas\Model\Xattr|null
     */
    public function getXattr()
    {
        return $this->container['xattr'];
    }

    /**
     * Sets xattr
     *
     * @param \RMoore\Truenas\Model\Xattr|null $xattr xattr
     *
     * @return self
     */
    public function setXattr($xattr)
    {

        if (is_null($xattr)) {
            throw new \InvalidArgumentException('non-nullable xattr cannot be null');
        }

        $this->container['xattr'] = $xattr;

        return $this;
    }

    /**
     * Gets encryption_options
     *
     * @return \RMoore\Truenas\Model\EncryptionOptions1|null
     */
    public function getEncryptionOptions()
    {
        return $this->container['encryption_options'];
    }

    /**
     * Sets encryption_options
     *
     * @param \RMoore\Truenas\Model\EncryptionOptions1|null $encryption_options encryption_options
     *
     * @return self
     */
    public function setEncryptionOptions($encryption_options)
    {

        if (is_null($encryption_options)) {
            throw new \InvalidArgumentException('non-nullable encryption_options cannot be null');
        }

        $this->container['encryption_options'] = $encryption_options;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return bool|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param bool|null $encryption `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool. There are 2 cases where ZFS encryption is not allowed for a dataset: 1) Pool in question is GELI encrypted. 2) If the parent dataset is encrypted with a passphrase and `name` is being created    with a key for encrypting the dataset.
     *
     * @return self
     */
    public function setEncryption($encryption)
    {

        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }

        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets inherit_encryption
     *
     * @return bool|null
     */
    public function getInheritEncryption()
    {
        return $this->container['inherit_encryption'];
    }

    /**
     * Sets inherit_encryption
     *
     * @param bool|null $inherit_encryption inherit_encryption
     *
     * @return self
     */
    public function setInheritEncryption($inherit_encryption)
    {

        if (is_null($inherit_encryption)) {
            throw new \InvalidArgumentException('non-nullable inherit_encryption cannot be null');
        }

        $this->container['inherit_encryption'] = $inherit_encryption;

        return $this;
    }

    /**
     * Gets user_properties
     *
     * @return \RMoore\Truenas\Model\UserProperty[]|null
     */
    public function getUserProperties()
    {
        return $this->container['user_properties'];
    }

    /**
     * Sets user_properties
     *
     * @param \RMoore\Truenas\Model\UserProperty[]|null $user_properties user_properties
     *
     * @return self
     */
    public function setUserProperties($user_properties)
    {

        if (is_null($user_properties)) {
            throw new \InvalidArgumentException('non-nullable user_properties cannot be null');
        }

        $this->container['user_properties'] = $user_properties;

        return $this;
    }

    /**
     * Gets create_ancestors
     *
     * @return bool|null
     */
    public function getCreateAncestors()
    {
        return $this->container['create_ancestors'];
    }

    /**
     * Sets create_ancestors
     *
     * @param bool|null $create_ancestors create_ancestors
     *
     * @return self
     */
    public function setCreateAncestors($create_ancestors)
    {

        if (is_null($create_ancestors)) {
            throw new \InvalidArgumentException('non-nullable create_ancestors cannot be null');
        }

        $this->container['create_ancestors'] = $create_ancestors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


