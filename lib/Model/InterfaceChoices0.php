<?php
/**
 * InterfaceChoices0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * InterfaceChoices0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InterfaceChoices0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'interface_choices_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bridge_members' => 'bool',
        'lag_ports' => 'bool',
        'vlan_parent' => 'bool',
        'exclude' => 'mixed[]',
        'exclude_types' => 'string[]',
        'include' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bridge_members' => null,
        'lag_ports' => null,
        'vlan_parent' => null,
        'exclude' => null,
        'exclude_types' => null,
        'include' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bridge_members' => false,
		'lag_ports' => false,
		'vlan_parent' => false,
		'exclude' => false,
		'exclude_types' => false,
		'include' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bridge_members' => 'bridge_members',
        'lag_ports' => 'lag_ports',
        'vlan_parent' => 'vlan_parent',
        'exclude' => 'exclude',
        'exclude_types' => 'exclude_types',
        'include' => 'include'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bridge_members' => 'setBridgeMembers',
        'lag_ports' => 'setLagPorts',
        'vlan_parent' => 'setVlanParent',
        'exclude' => 'setExclude',
        'exclude_types' => 'setExcludeTypes',
        'include' => 'setInclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bridge_members' => 'getBridgeMembers',
        'lag_ports' => 'getLagPorts',
        'vlan_parent' => 'getVlanParent',
        'exclude' => 'getExclude',
        'exclude_types' => 'getExcludeTypes',
        'include' => 'getInclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXCLUDE_TYPES_BRIDGE = 'BRIDGE';
    public const EXCLUDE_TYPES_LINK_AGGREGATION = 'LINK_AGGREGATION';
    public const EXCLUDE_TYPES_PHYSICAL = 'PHYSICAL';
    public const EXCLUDE_TYPES_UNKNOWN = 'UNKNOWN';
    public const EXCLUDE_TYPES_VLAN = 'VLAN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExcludeTypesAllowableValues()
    {
        return [
            self::EXCLUDE_TYPES_BRIDGE,
            self::EXCLUDE_TYPES_LINK_AGGREGATION,
            self::EXCLUDE_TYPES_PHYSICAL,
            self::EXCLUDE_TYPES_UNKNOWN,
            self::EXCLUDE_TYPES_VLAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bridge_members', $data ?? [], false);
        $this->setIfExists('lag_ports', $data ?? [], false);
        $this->setIfExists('vlan_parent', $data ?? [], true);
        $this->setIfExists('exclude', $data ?? [], null);
        $this->setIfExists('exclude_types', $data ?? [], null);
        $this->setIfExists('include', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bridge_members
     *
     * @return bool|null
     */
    public function getBridgeMembers()
    {
        return $this->container['bridge_members'];
    }

    /**
     * Sets bridge_members
     *
     * @param bool|null $bridge_members `bridge_members` will include BRIDGE members.
     *
     * @return self
     */
    public function setBridgeMembers($bridge_members)
    {

        if (is_null($bridge_members)) {
            throw new \InvalidArgumentException('non-nullable bridge_members cannot be null');
        }

        $this->container['bridge_members'] = $bridge_members;

        return $this;
    }

    /**
     * Gets lag_ports
     *
     * @return bool|null
     */
    public function getLagPorts()
    {
        return $this->container['lag_ports'];
    }

    /**
     * Sets lag_ports
     *
     * @param bool|null $lag_ports `lag_ports` will include LINK_AGGREGATION ports.
     *
     * @return self
     */
    public function setLagPorts($lag_ports)
    {

        if (is_null($lag_ports)) {
            throw new \InvalidArgumentException('non-nullable lag_ports cannot be null');
        }

        $this->container['lag_ports'] = $lag_ports;

        return $this;
    }

    /**
     * Gets vlan_parent
     *
     * @return bool|null
     */
    public function getVlanParent()
    {
        return $this->container['vlan_parent'];
    }

    /**
     * Sets vlan_parent
     *
     * @param bool|null $vlan_parent `vlan_parent` will include VLAN parent interface.
     *
     * @return self
     */
    public function setVlanParent($vlan_parent)
    {

        if (is_null($vlan_parent)) {
            throw new \InvalidArgumentException('non-nullable vlan_parent cannot be null');
        }

        $this->container['vlan_parent'] = $vlan_parent;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return mixed[]|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param mixed[]|null $exclude `exclude` is a list of interfaces prefix to remove.
     *
     * @return self
     */
    public function setExclude($exclude)
    {

        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }

        $this->container['exclude'] = $exclude;

        return $this;
    }

    /**
     * Gets exclude_types
     *
     * @return string[]|null
     */
    public function getExcludeTypes()
    {
        return $this->container['exclude_types'];
    }

    /**
     * Sets exclude_types
     *
     * @param string[]|null $exclude_types exclude_types
     *
     * @return self
     */
    public function setExcludeTypes($exclude_types)
    {
        $allowedValues = $this->getExcludeTypesAllowableValues();
        if (!is_null($exclude_types) && array_diff($exclude_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exclude_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($exclude_types)) {
            throw new \InvalidArgumentException('non-nullable exclude_types cannot be null');
        }

        $this->container['exclude_types'] = $exclude_types;

        return $this;
    }

    /**
     * Gets include
     *
     * @return mixed[]|null
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param mixed[]|null $include include
     *
     * @return self
     */
    public function setInclude($include)
    {

        if (is_null($include)) {
            throw new \InvalidArgumentException('non-nullable include cannot be null');
        }

        $this->container['include'] = $include;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


