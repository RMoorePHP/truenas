<?php
/**
 * IscsiExtentCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * IscsiExtentCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IscsiExtentCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'iscsi_extent_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'disk' => 'string',
        'serial' => 'string',
        'path' => 'string',
        'filesize' => 'int',
        'blocksize' => 'int',
        'pblocksize' => 'bool',
        'avail_threshold' => 'int',
        'comment' => 'string',
        'insecure_tpc' => 'bool',
        'xen' => 'bool',
        'rpm' => 'string',
        'ro' => 'bool',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'disk' => null,
        'serial' => null,
        'path' => null,
        'filesize' => null,
        'blocksize' => null,
        'pblocksize' => null,
        'avail_threshold' => null,
        'comment' => null,
        'insecure_tpc' => null,
        'xen' => null,
        'rpm' => null,
        'ro' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'type' => false,
		'disk' => true,
		'serial' => true,
		'path' => true,
		'filesize' => false,
		'blocksize' => false,
		'pblocksize' => false,
		'avail_threshold' => true,
		'comment' => false,
		'insecure_tpc' => false,
		'xen' => false,
		'rpm' => false,
		'ro' => false,
		'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'disk' => 'disk',
        'serial' => 'serial',
        'path' => 'path',
        'filesize' => 'filesize',
        'blocksize' => 'blocksize',
        'pblocksize' => 'pblocksize',
        'avail_threshold' => 'avail_threshold',
        'comment' => 'comment',
        'insecure_tpc' => 'insecure_tpc',
        'xen' => 'xen',
        'rpm' => 'rpm',
        'ro' => 'ro',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'disk' => 'setDisk',
        'serial' => 'setSerial',
        'path' => 'setPath',
        'filesize' => 'setFilesize',
        'blocksize' => 'setBlocksize',
        'pblocksize' => 'setPblocksize',
        'avail_threshold' => 'setAvailThreshold',
        'comment' => 'setComment',
        'insecure_tpc' => 'setInsecureTpc',
        'xen' => 'setXen',
        'rpm' => 'setRpm',
        'ro' => 'setRo',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'disk' => 'getDisk',
        'serial' => 'getSerial',
        'path' => 'getPath',
        'filesize' => 'getFilesize',
        'blocksize' => 'getBlocksize',
        'pblocksize' => 'getPblocksize',
        'avail_threshold' => 'getAvailThreshold',
        'comment' => 'getComment',
        'insecure_tpc' => 'getInsecureTpc',
        'xen' => 'getXen',
        'rpm' => 'getRpm',
        'ro' => 'getRo',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_DISK = 'DISK';
    public const TYPE_FILE = 'FILE';
    public const RPM_UNKNOWN = 'UNKNOWN';
    public const RPM_SSD = 'SSD';
    public const RPM__5400 = '5400';
    public const RPM__7200 = '7200';
    public const RPM__10000 = '10000';
    public const RPM__15000 = '15000';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DISK,
            self::TYPE_FILE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRpmAllowableValues()
    {
        return [
            self::RPM_UNKNOWN,
            self::RPM_SSD,
            self::RPM__5400,
            self::RPM__7200,
            self::RPM__10000,
            self::RPM__15000,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'DISK');
        $this->setIfExists('disk', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('filesize', $data ?? [], 0);
        $this->setIfExists('blocksize', $data ?? [], 512);
        $this->setIfExists('pblocksize', $data ?? [], null);
        $this->setIfExists('avail_threshold', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('insecure_tpc', $data ?? [], true);
        $this->setIfExists('xen', $data ?? [], null);
        $this->setIfExists('rpm', $data ?? [], 'SSD');
        $this->setIfExists('ro', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRpmAllowableValues();
        if (!is_null($this->container['rpm']) && !in_array($this->container['rpm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rpm', must be one of '%s'",
                $this->container['rpm'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if not zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE. With `type` being set to DISK, a valid ZFS volume is required.
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets disk
     *
     * @return string|null
     */
    public function getDisk()
    {
        return $this->container['disk'];
    }

    /**
     * Sets disk
     *
     * @param string|null $disk disk
     *
     * @return self
     */
    public function setDisk($disk)
    {

        if (is_null($disk)) {
            array_push($this->openAPINullablesSetToNull, 'disk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['disk'] = $disk;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string|null $serial serial
     *
     * @return self
     */
    public function setSerial($serial)
    {

        if (is_null($serial)) {
            array_push($this->openAPINullablesSetToNull, 'serial');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('serial', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if not zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.
     *
     * @return self
     */
    public function setPath($path)
    {

        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets filesize
     *
     * @return int|null
     */
    public function getFilesize()
    {
        return $this->container['filesize'];
    }

    /**
     * Sets filesize
     *
     * @param int|null $filesize When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if not zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.
     *
     * @return self
     */
    public function setFilesize($filesize)
    {

        if (is_null($filesize)) {
            throw new \InvalidArgumentException('non-nullable filesize cannot be null');
        }

        $this->container['filesize'] = $filesize;

        return $this;
    }

    /**
     * Gets blocksize
     *
     * @return int|null
     */
    public function getBlocksize()
    {
        return $this->container['blocksize'];
    }

    /**
     * Sets blocksize
     *
     * @param int|null $blocksize When `type` is set to FILE, attribute `filesize` is used and it represents number of bytes. `filesize` if not zero should be a multiple of `blocksize`. `path` is a required attribute with `type` set as FILE.
     *
     * @return self
     */
    public function setBlocksize($blocksize)
    {

        if (is_null($blocksize)) {
            throw new \InvalidArgumentException('non-nullable blocksize cannot be null');
        }

        $this->container['blocksize'] = $blocksize;

        return $this;
    }

    /**
     * Gets pblocksize
     *
     * @return bool|null
     */
    public function getPblocksize()
    {
        return $this->container['pblocksize'];
    }

    /**
     * Sets pblocksize
     *
     * @param bool|null $pblocksize pblocksize
     *
     * @return self
     */
    public function setPblocksize($pblocksize)
    {

        if (is_null($pblocksize)) {
            throw new \InvalidArgumentException('non-nullable pblocksize cannot be null');
        }

        $this->container['pblocksize'] = $pblocksize;

        return $this;
    }

    /**
     * Gets avail_threshold
     *
     * @return int|null
     */
    public function getAvailThreshold()
    {
        return $this->container['avail_threshold'];
    }

    /**
     * Sets avail_threshold
     *
     * @param int|null $avail_threshold avail_threshold
     *
     * @return self
     */
    public function setAvailThreshold($avail_threshold)
    {

        if (is_null($avail_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'avail_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avail_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['avail_threshold'] = $avail_threshold;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {

        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets insecure_tpc
     *
     * @return bool|null
     */
    public function getInsecureTpc()
    {
        return $this->container['insecure_tpc'];
    }

    /**
     * Sets insecure_tpc
     *
     * @param bool|null $insecure_tpc `insecure_tpc` when enabled allows an initiator to bypass normal access control and access any scannable target. This allows xcopy operations otherwise blocked by access control.
     *
     * @return self
     */
    public function setInsecureTpc($insecure_tpc)
    {

        if (is_null($insecure_tpc)) {
            throw new \InvalidArgumentException('non-nullable insecure_tpc cannot be null');
        }

        $this->container['insecure_tpc'] = $insecure_tpc;

        return $this;
    }

    /**
     * Gets xen
     *
     * @return bool|null
     */
    public function getXen()
    {
        return $this->container['xen'];
    }

    /**
     * Sets xen
     *
     * @param bool|null $xen `xen` is a boolean value which is set to true if Xen is being used as the iSCSI initiator.
     *
     * @return self
     */
    public function setXen($xen)
    {

        if (is_null($xen)) {
            throw new \InvalidArgumentException('non-nullable xen cannot be null');
        }

        $this->container['xen'] = $xen;

        return $this;
    }

    /**
     * Gets rpm
     *
     * @return string|null
     */
    public function getRpm()
    {
        return $this->container['rpm'];
    }

    /**
     * Sets rpm
     *
     * @param string|null $rpm rpm
     *
     * @return self
     */
    public function setRpm($rpm)
    {
        $allowedValues = $this->getRpmAllowableValues();
        if (!is_null($rpm) && !in_array($rpm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rpm', must be one of '%s'",
                    $rpm,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($rpm)) {
            throw new \InvalidArgumentException('non-nullable rpm cannot be null');
        }

        $this->container['rpm'] = $rpm;

        return $this;
    }

    /**
     * Gets ro
     *
     * @return bool|null
     */
    public function getRo()
    {
        return $this->container['ro'];
    }

    /**
     * Sets ro
     *
     * @param bool|null $ro ro
     *
     * @return self
     */
    public function setRo($ro)
    {

        if (is_null($ro)) {
            throw new \InvalidArgumentException('non-nullable ro cannot be null');
        }

        $this->container['ro'] = $ro;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


