<?php
/**
 * SystemNtpserverCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * SystemNtpserverCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SystemNtpserverCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'system_ntpserver_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'burst' => 'bool',
        'iburst' => 'bool',
        'prefer' => 'bool',
        'minpoll' => 'int',
        'maxpoll' => 'int',
        'force' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'burst' => null,
        'iburst' => null,
        'prefer' => null,
        'minpoll' => null,
        'maxpoll' => null,
        'force' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
		'burst' => false,
		'iburst' => false,
		'prefer' => false,
		'minpoll' => false,
		'maxpoll' => false,
		'force' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'burst' => 'burst',
        'iburst' => 'iburst',
        'prefer' => 'prefer',
        'minpoll' => 'minpoll',
        'maxpoll' => 'maxpoll',
        'force' => 'force'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'burst' => 'setBurst',
        'iburst' => 'setIburst',
        'prefer' => 'setPrefer',
        'minpoll' => 'setMinpoll',
        'maxpoll' => 'setMaxpoll',
        'force' => 'setForce'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'burst' => 'getBurst',
        'iburst' => 'getIburst',
        'prefer' => 'getPrefer',
        'minpoll' => 'getMinpoll',
        'maxpoll' => 'getMaxpoll',
        'force' => 'getForce'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('burst', $data ?? [], false);
        $this->setIfExists('iburst', $data ?? [], true);
        $this->setIfExists('prefer', $data ?? [], false);
        $this->setIfExists('minpoll', $data ?? [], 6);
        $this->setIfExists('maxpoll', $data ?? [], 10);
        $this->setIfExists('force', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address `address` specifies the hostname/IP address of the NTP server.
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets burst
     *
     * @return bool|null
     */
    public function getBurst()
    {
        return $this->container['burst'];
    }

    /**
     * Sets burst
     *
     * @param bool|null $burst `burst` when enabled makes sure that if server is reachable, sends a burst of eight packets instead of one. This is designed to improve timekeeping quality with the server command.
     *
     * @return self
     */
    public function setBurst($burst)
    {

        if (is_null($burst)) {
            throw new \InvalidArgumentException('non-nullable burst cannot be null');
        }

        $this->container['burst'] = $burst;

        return $this;
    }

    /**
     * Gets iburst
     *
     * @return bool|null
     */
    public function getIburst()
    {
        return $this->container['iburst'];
    }

    /**
     * Sets iburst
     *
     * @param bool|null $iburst `iburst` when enabled speeds up the initial synchronization, taking seconds rather than minutes.
     *
     * @return self
     */
    public function setIburst($iburst)
    {

        if (is_null($iburst)) {
            throw new \InvalidArgumentException('non-nullable iburst cannot be null');
        }

        $this->container['iburst'] = $iburst;

        return $this;
    }

    /**
     * Gets prefer
     *
     * @return bool|null
     */
    public function getPrefer()
    {
        return $this->container['prefer'];
    }

    /**
     * Sets prefer
     *
     * @param bool|null $prefer `prefer` marks the specified server as preferred. When all other things are equal, this host is chosen for synchronization acquisition with the server command. It is recommended that they be used for servers with time monitoring hardware.
     *
     * @return self
     */
    public function setPrefer($prefer)
    {

        if (is_null($prefer)) {
            throw new \InvalidArgumentException('non-nullable prefer cannot be null');
        }

        $this->container['prefer'] = $prefer;

        return $this;
    }

    /**
     * Gets minpoll
     *
     * @return int|null
     */
    public function getMinpoll()
    {
        return $this->container['minpoll'];
    }

    /**
     * Sets minpoll
     *
     * @param int|null $minpoll `minpoll` is minimum polling time in seconds. It must be a power of 2 and less than `maxpoll`. `maxpoll` is maximum polling time in seconds. It must be a power of 2 and greater than `minpoll`.
     *
     * @return self
     */
    public function setMinpoll($minpoll)
    {

        if (is_null($minpoll)) {
            throw new \InvalidArgumentException('non-nullable minpoll cannot be null');
        }

        $this->container['minpoll'] = $minpoll;

        return $this;
    }

    /**
     * Gets maxpoll
     *
     * @return int|null
     */
    public function getMaxpoll()
    {
        return $this->container['maxpoll'];
    }

    /**
     * Sets maxpoll
     *
     * @param int|null $maxpoll `minpoll` is minimum polling time in seconds. It must be a power of 2 and less than `maxpoll`. `maxpoll` is maximum polling time in seconds. It must be a power of 2 and greater than `minpoll`.
     *
     * @return self
     */
    public function setMaxpoll($maxpoll)
    {

        if (is_null($maxpoll)) {
            throw new \InvalidArgumentException('non-nullable maxpoll cannot be null');
        }

        $this->container['maxpoll'] = $maxpoll;

        return $this;
    }

    /**
     * Gets force
     *
     * @return bool|null
     */
    public function getForce()
    {
        return $this->container['force'];
    }

    /**
     * Sets force
     *
     * @param bool|null $force force
     *
     * @return self
     */
    public function setForce($force)
    {

        if (is_null($force)) {
            throw new \InvalidArgumentException('non-nullable force cannot be null');
        }

        $this->container['force'] = $force;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


