<?php
/**
 * NfsUpdate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * NfsUpdate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NfsUpdate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'nfs_update_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'servers' => 'int',
        'udp' => 'bool',
        'allow_nonroot' => 'bool',
        'v4' => 'bool',
        'v4_v3owner' => 'bool',
        'v4_krb' => 'bool',
        'v4_domain' => 'string',
        'bindip' => 'string[]',
        'mountd_port' => 'int',
        'rpcstatd_port' => 'int',
        'rpclockd_port' => 'int',
        'mountd_log' => 'bool',
        'statd_lockd_log' => 'bool',
        'userd_manage_gids' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'servers' => null,
        'udp' => null,
        'allow_nonroot' => null,
        'v4' => null,
        'v4_v3owner' => null,
        'v4_krb' => null,
        'v4_domain' => null,
        'bindip' => null,
        'mountd_port' => null,
        'rpcstatd_port' => null,
        'rpclockd_port' => null,
        'mountd_log' => null,
        'statd_lockd_log' => null,
        'userd_manage_gids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'servers' => false,
		'udp' => false,
		'allow_nonroot' => false,
		'v4' => false,
		'v4_v3owner' => false,
		'v4_krb' => false,
		'v4_domain' => false,
		'bindip' => false,
		'mountd_port' => true,
		'rpcstatd_port' => true,
		'rpclockd_port' => true,
		'mountd_log' => false,
		'statd_lockd_log' => false,
		'userd_manage_gids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'servers' => 'servers',
        'udp' => 'udp',
        'allow_nonroot' => 'allow_nonroot',
        'v4' => 'v4',
        'v4_v3owner' => 'v4_v3owner',
        'v4_krb' => 'v4_krb',
        'v4_domain' => 'v4_domain',
        'bindip' => 'bindip',
        'mountd_port' => 'mountd_port',
        'rpcstatd_port' => 'rpcstatd_port',
        'rpclockd_port' => 'rpclockd_port',
        'mountd_log' => 'mountd_log',
        'statd_lockd_log' => 'statd_lockd_log',
        'userd_manage_gids' => 'userd_manage_gids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'servers' => 'setServers',
        'udp' => 'setUdp',
        'allow_nonroot' => 'setAllowNonroot',
        'v4' => 'setV4',
        'v4_v3owner' => 'setV4V3owner',
        'v4_krb' => 'setV4Krb',
        'v4_domain' => 'setV4Domain',
        'bindip' => 'setBindip',
        'mountd_port' => 'setMountdPort',
        'rpcstatd_port' => 'setRpcstatdPort',
        'rpclockd_port' => 'setRpclockdPort',
        'mountd_log' => 'setMountdLog',
        'statd_lockd_log' => 'setStatdLockdLog',
        'userd_manage_gids' => 'setUserdManageGids'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'servers' => 'getServers',
        'udp' => 'getUdp',
        'allow_nonroot' => 'getAllowNonroot',
        'v4' => 'getV4',
        'v4_v3owner' => 'getV4V3owner',
        'v4_krb' => 'getV4Krb',
        'v4_domain' => 'getV4Domain',
        'bindip' => 'getBindip',
        'mountd_port' => 'getMountdPort',
        'rpcstatd_port' => 'getRpcstatdPort',
        'rpclockd_port' => 'getRpclockdPort',
        'mountd_log' => 'getMountdLog',
        'statd_lockd_log' => 'getStatdLockdLog',
        'userd_manage_gids' => 'getUserdManageGids'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('servers', $data ?? [], null);
        $this->setIfExists('udp', $data ?? [], null);
        $this->setIfExists('allow_nonroot', $data ?? [], null);
        $this->setIfExists('v4', $data ?? [], null);
        $this->setIfExists('v4_v3owner', $data ?? [], null);
        $this->setIfExists('v4_krb', $data ?? [], null);
        $this->setIfExists('v4_domain', $data ?? [], null);
        $this->setIfExists('bindip', $data ?? [], null);
        $this->setIfExists('mountd_port', $data ?? [], null);
        $this->setIfExists('rpcstatd_port', $data ?? [], null);
        $this->setIfExists('rpclockd_port', $data ?? [], null);
        $this->setIfExists('mountd_log', $data ?? [], null);
        $this->setIfExists('statd_lockd_log', $data ?? [], null);
        $this->setIfExists('userd_manage_gids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets servers
     *
     * @return int|null
     */
    public function getServers()
    {
        return $this->container['servers'];
    }

    /**
     * Sets servers
     *
     * @param int|null $servers `servers` represents number of servers to create.
     *
     * @return self
     */
    public function setServers($servers)
    {

        if (is_null($servers)) {
            throw new \InvalidArgumentException('non-nullable servers cannot be null');
        }

        $this->container['servers'] = $servers;

        return $this;
    }

    /**
     * Gets udp
     *
     * @return bool|null
     */
    public function getUdp()
    {
        return $this->container['udp'];
    }

    /**
     * Sets udp
     *
     * @param bool|null $udp udp
     *
     * @return self
     */
    public function setUdp($udp)
    {

        if (is_null($udp)) {
            throw new \InvalidArgumentException('non-nullable udp cannot be null');
        }

        $this->container['udp'] = $udp;

        return $this;
    }

    /**
     * Gets allow_nonroot
     *
     * @return bool|null
     */
    public function getAllowNonroot()
    {
        return $this->container['allow_nonroot'];
    }

    /**
     * Sets allow_nonroot
     *
     * @param bool|null $allow_nonroot When `allow_nonroot` is set, it allows non-root mount requests to be served.
     *
     * @return self
     */
    public function setAllowNonroot($allow_nonroot)
    {

        if (is_null($allow_nonroot)) {
            throw new \InvalidArgumentException('non-nullable allow_nonroot cannot be null');
        }

        $this->container['allow_nonroot'] = $allow_nonroot;

        return $this;
    }

    /**
     * Gets v4
     *
     * @return bool|null
     */
    public function getV4()
    {
        return $this->container['v4'];
    }

    /**
     * Sets v4
     *
     * @param bool|null $v4 `v4` when set means that we switch from NFSv3 to NFSv4.
     *
     * @return self
     */
    public function setV4($v4)
    {

        if (is_null($v4)) {
            throw new \InvalidArgumentException('non-nullable v4 cannot be null');
        }

        $this->container['v4'] = $v4;

        return $this;
    }

    /**
     * Gets v4_v3owner
     *
     * @return bool|null
     */
    public function getV4V3owner()
    {
        return $this->container['v4_v3owner'];
    }

    /**
     * Sets v4_v3owner
     *
     * @param bool|null $v4_v3owner `v4_v3owner` when set means that system will use NFSv3 ownership model for NFSv4.
     *
     * @return self
     */
    public function setV4V3owner($v4_v3owner)
    {

        if (is_null($v4_v3owner)) {
            throw new \InvalidArgumentException('non-nullable v4_v3owner cannot be null');
        }

        $this->container['v4_v3owner'] = $v4_v3owner;

        return $this;
    }

    /**
     * Gets v4_krb
     *
     * @return bool|null
     */
    public function getV4Krb()
    {
        return $this->container['v4_krb'];
    }

    /**
     * Sets v4_krb
     *
     * @param bool|null $v4_krb `v4_krb` will force NFS shares to fail if the Kerberos ticket is unavailable.
     *
     * @return self
     */
    public function setV4Krb($v4_krb)
    {

        if (is_null($v4_krb)) {
            throw new \InvalidArgumentException('non-nullable v4_krb cannot be null');
        }

        $this->container['v4_krb'] = $v4_krb;

        return $this;
    }

    /**
     * Gets v4_domain
     *
     * @return string|null
     */
    public function getV4Domain()
    {
        return $this->container['v4_domain'];
    }

    /**
     * Sets v4_domain
     *
     * @param string|null $v4_domain `v4_domain` overrides the default DNS domain name for NFSv4.
     *
     * @return self
     */
    public function setV4Domain($v4_domain)
    {

        if (is_null($v4_domain)) {
            throw new \InvalidArgumentException('non-nullable v4_domain cannot be null');
        }

        $this->container['v4_domain'] = $v4_domain;

        return $this;
    }

    /**
     * Gets bindip
     *
     * @return string[]|null
     */
    public function getBindip()
    {
        return $this->container['bindip'];
    }

    /**
     * Sets bindip
     *
     * @param string[]|null $bindip `bindip` is a list of IP's on which NFS will listen for requests. When it is unset/empty, NFS listens on all available addresses.
     *
     * @return self
     */
    public function setBindip($bindip)
    {

        if (is_null($bindip)) {
            throw new \InvalidArgumentException('non-nullable bindip cannot be null');
        }

        $this->container['bindip'] = $bindip;

        return $this;
    }

    /**
     * Gets mountd_port
     *
     * @return int|null
     */
    public function getMountdPort()
    {
        return $this->container['mountd_port'];
    }

    /**
     * Sets mountd_port
     *
     * @param int|null $mountd_port `mountd_port` specifies the port mountd(8) binds to.
     *
     * @return self
     */
    public function setMountdPort($mountd_port)
    {

        if (is_null($mountd_port)) {
            array_push($this->openAPINullablesSetToNull, 'mountd_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mountd_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['mountd_port'] = $mountd_port;

        return $this;
    }

    /**
     * Gets rpcstatd_port
     *
     * @return int|null
     */
    public function getRpcstatdPort()
    {
        return $this->container['rpcstatd_port'];
    }

    /**
     * Sets rpcstatd_port
     *
     * @param int|null $rpcstatd_port `rpcstatd_port` specifies the port rpc.statd(8) binds to.
     *
     * @return self
     */
    public function setRpcstatdPort($rpcstatd_port)
    {

        if (is_null($rpcstatd_port)) {
            array_push($this->openAPINullablesSetToNull, 'rpcstatd_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rpcstatd_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['rpcstatd_port'] = $rpcstatd_port;

        return $this;
    }

    /**
     * Gets rpclockd_port
     *
     * @return int|null
     */
    public function getRpclockdPort()
    {
        return $this->container['rpclockd_port'];
    }

    /**
     * Sets rpclockd_port
     *
     * @param int|null $rpclockd_port `rpclockd_port` specifies the port rpclockd_port(8) binds to.
     *
     * @return self
     */
    public function setRpclockdPort($rpclockd_port)
    {

        if (is_null($rpclockd_port)) {
            array_push($this->openAPINullablesSetToNull, 'rpclockd_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rpclockd_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['rpclockd_port'] = $rpclockd_port;

        return $this;
    }

    /**
     * Gets mountd_log
     *
     * @return bool|null
     */
    public function getMountdLog()
    {
        return $this->container['mountd_log'];
    }

    /**
     * Sets mountd_log
     *
     * @param bool|null $mountd_log mountd_log
     *
     * @return self
     */
    public function setMountdLog($mountd_log)
    {

        if (is_null($mountd_log)) {
            throw new \InvalidArgumentException('non-nullable mountd_log cannot be null');
        }

        $this->container['mountd_log'] = $mountd_log;

        return $this;
    }

    /**
     * Gets statd_lockd_log
     *
     * @return bool|null
     */
    public function getStatdLockdLog()
    {
        return $this->container['statd_lockd_log'];
    }

    /**
     * Sets statd_lockd_log
     *
     * @param bool|null $statd_lockd_log statd_lockd_log
     *
     * @return self
     */
    public function setStatdLockdLog($statd_lockd_log)
    {

        if (is_null($statd_lockd_log)) {
            throw new \InvalidArgumentException('non-nullable statd_lockd_log cannot be null');
        }

        $this->container['statd_lockd_log'] = $statd_lockd_log;

        return $this;
    }

    /**
     * Gets userd_manage_gids
     *
     * @return bool|null
     */
    public function getUserdManageGids()
    {
        return $this->container['userd_manage_gids'];
    }

    /**
     * Sets userd_manage_gids
     *
     * @param bool|null $userd_manage_gids userd_manage_gids
     *
     * @return self
     */
    public function setUserdManageGids($userd_manage_gids)
    {

        if (is_null($userd_manage_gids)) {
            throw new \InvalidArgumentException('non-nullable userd_manage_gids cannot be null');
        }

        $this->container['userd_manage_gids'] = $userd_manage_gids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


