<?php
/**
 * IdmapCreate0Options
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * IdmapCreate0Options Class Doc Comment
 *
 * @category Class
 * @description &#x60;options&#x60; are additional parameters that are backend-dependent:
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdmapCreate0Options implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'idmap_create_0_options';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'schema_mode' => 'string',
        'unix_primary_group' => 'bool',
        'unix_nss_info' => 'bool',
        'rangesize' => 'int',
        'readonly' => 'bool',
        'ignore_builtin' => 'bool',
        'ldap_base_dn' => 'string',
        'ldap_user_dn' => 'string',
        'ldap_user_dn_password' => 'string',
        'ldap_url' => 'string',
        'ssl' => 'string',
        'validate_certificates' => 'bool',
        'linked_service' => 'string',
        'ldap_server' => 'string',
        'ldap_realm' => 'bool',
        'bind_path_user' => 'string',
        'bind_path_group' => 'string',
        'user_cn' => 'bool',
        'cn_realm' => 'string',
        'ldap_domain' => 'string',
        'sssd_compat' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'schema_mode' => null,
        'unix_primary_group' => null,
        'unix_nss_info' => null,
        'rangesize' => null,
        'readonly' => null,
        'ignore_builtin' => null,
        'ldap_base_dn' => null,
        'ldap_user_dn' => null,
        'ldap_user_dn_password' => null,
        'ldap_url' => null,
        'ssl' => null,
        'validate_certificates' => null,
        'linked_service' => null,
        'ldap_server' => null,
        'ldap_realm' => null,
        'bind_path_user' => null,
        'bind_path_group' => null,
        'user_cn' => null,
        'cn_realm' => null,
        'ldap_domain' => null,
        'sssd_compat' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'schema_mode' => false,
		'unix_primary_group' => false,
		'unix_nss_info' => false,
		'rangesize' => false,
		'readonly' => false,
		'ignore_builtin' => false,
		'ldap_base_dn' => false,
		'ldap_user_dn' => false,
		'ldap_user_dn_password' => false,
		'ldap_url' => false,
		'ssl' => false,
		'validate_certificates' => false,
		'linked_service' => false,
		'ldap_server' => false,
		'ldap_realm' => false,
		'bind_path_user' => false,
		'bind_path_group' => false,
		'user_cn' => false,
		'cn_realm' => false,
		'ldap_domain' => false,
		'sssd_compat' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'schema_mode' => 'schema_mode',
        'unix_primary_group' => 'unix_primary_group',
        'unix_nss_info' => 'unix_nss_info',
        'rangesize' => 'rangesize',
        'readonly' => 'readonly',
        'ignore_builtin' => 'ignore_builtin',
        'ldap_base_dn' => 'ldap_base_dn',
        'ldap_user_dn' => 'ldap_user_dn',
        'ldap_user_dn_password' => 'ldap_user_dn_password',
        'ldap_url' => 'ldap_url',
        'ssl' => 'ssl',
        'validate_certificates' => 'validate_certificates',
        'linked_service' => 'linked_service',
        'ldap_server' => 'ldap_server',
        'ldap_realm' => 'ldap_realm',
        'bind_path_user' => 'bind_path_user',
        'bind_path_group' => 'bind_path_group',
        'user_cn' => 'user_cn',
        'cn_realm' => 'cn_realm',
        'ldap_domain' => 'ldap_domain',
        'sssd_compat' => 'sssd_compat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'schema_mode' => 'setSchemaMode',
        'unix_primary_group' => 'setUnixPrimaryGroup',
        'unix_nss_info' => 'setUnixNssInfo',
        'rangesize' => 'setRangesize',
        'readonly' => 'setReadonly',
        'ignore_builtin' => 'setIgnoreBuiltin',
        'ldap_base_dn' => 'setLdapBaseDn',
        'ldap_user_dn' => 'setLdapUserDn',
        'ldap_user_dn_password' => 'setLdapUserDnPassword',
        'ldap_url' => 'setLdapUrl',
        'ssl' => 'setSsl',
        'validate_certificates' => 'setValidateCertificates',
        'linked_service' => 'setLinkedService',
        'ldap_server' => 'setLdapServer',
        'ldap_realm' => 'setLdapRealm',
        'bind_path_user' => 'setBindPathUser',
        'bind_path_group' => 'setBindPathGroup',
        'user_cn' => 'setUserCn',
        'cn_realm' => 'setCnRealm',
        'ldap_domain' => 'setLdapDomain',
        'sssd_compat' => 'setSssdCompat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'schema_mode' => 'getSchemaMode',
        'unix_primary_group' => 'getUnixPrimaryGroup',
        'unix_nss_info' => 'getUnixNssInfo',
        'rangesize' => 'getRangesize',
        'readonly' => 'getReadonly',
        'ignore_builtin' => 'getIgnoreBuiltin',
        'ldap_base_dn' => 'getLdapBaseDn',
        'ldap_user_dn' => 'getLdapUserDn',
        'ldap_user_dn_password' => 'getLdapUserDnPassword',
        'ldap_url' => 'getLdapUrl',
        'ssl' => 'getSsl',
        'validate_certificates' => 'getValidateCertificates',
        'linked_service' => 'getLinkedService',
        'ldap_server' => 'getLdapServer',
        'ldap_realm' => 'getLdapRealm',
        'bind_path_user' => 'getBindPathUser',
        'bind_path_group' => 'getBindPathGroup',
        'user_cn' => 'getUserCn',
        'cn_realm' => 'getCnRealm',
        'ldap_domain' => 'getLdapDomain',
        'sssd_compat' => 'getSssdCompat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCHEMA_MODE_SFU = 'SFU';
    public const SCHEMA_MODE_SFU20 = 'SFU20';
    public const SCHEMA_MODE_RFC2307 = 'RFC2307';
    public const SSL_OFF = 'OFF';
    public const SSL_ON = 'ON';
    public const SSL_START_TLS = 'START_TLS';
    public const LINKED_SERVICE_LOCAL_ACCOUNT = 'LOCAL_ACCOUNT';
    public const LINKED_SERVICE_LDAP = 'LDAP';
    public const LDAP_SERVER_AD = 'AD';
    public const LDAP_SERVER_STANDALONE = 'STANDALONE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSchemaModeAllowableValues()
    {
        return [
            self::SCHEMA_MODE_SFU,
            self::SCHEMA_MODE_SFU20,
            self::SCHEMA_MODE_RFC2307,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSslAllowableValues()
    {
        return [
            self::SSL_OFF,
            self::SSL_ON,
            self::SSL_START_TLS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLinkedServiceAllowableValues()
    {
        return [
            self::LINKED_SERVICE_LOCAL_ACCOUNT,
            self::LINKED_SERVICE_LDAP,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLdapServerAllowableValues()
    {
        return [
            self::LDAP_SERVER_AD,
            self::LDAP_SERVER_STANDALONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('schema_mode', $data ?? [], 'SFU');
        $this->setIfExists('unix_primary_group', $data ?? [], false);
        $this->setIfExists('unix_nss_info', $data ?? [], false);
        $this->setIfExists('rangesize', $data ?? [], 100000);
        $this->setIfExists('readonly', $data ?? [], false);
        $this->setIfExists('ignore_builtin', $data ?? [], false);
        $this->setIfExists('ldap_base_dn', $data ?? [], null);
        $this->setIfExists('ldap_user_dn', $data ?? [], null);
        $this->setIfExists('ldap_user_dn_password', $data ?? [], null);
        $this->setIfExists('ldap_url', $data ?? [], null);
        $this->setIfExists('ssl', $data ?? [], 'ON');
        $this->setIfExists('validate_certificates', $data ?? [], true);
        $this->setIfExists('linked_service', $data ?? [], 'LOCAL_ACCOUNT');
        $this->setIfExists('ldap_server', $data ?? [], null);
        $this->setIfExists('ldap_realm', $data ?? [], false);
        $this->setIfExists('bind_path_user', $data ?? [], null);
        $this->setIfExists('bind_path_group', $data ?? [], null);
        $this->setIfExists('user_cn', $data ?? [], false);
        $this->setIfExists('cn_realm', $data ?? [], null);
        $this->setIfExists('ldap_domain', $data ?? [], null);
        $this->setIfExists('sssd_compat', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSchemaModeAllowableValues();
        if (!is_null($this->container['schema_mode']) && !in_array($this->container['schema_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schema_mode', must be one of '%s'",
                $this->container['schema_mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($this->container['ssl']) && !in_array($this->container['ssl'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ssl', must be one of '%s'",
                $this->container['ssl'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLinkedServiceAllowableValues();
        if (!is_null($this->container['linked_service']) && !in_array($this->container['linked_service'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'linked_service', must be one of '%s'",
                $this->container['linked_service'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLdapServerAllowableValues();
        if (!is_null($this->container['ldap_server']) && !in_array($this->container['ldap_server'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ldap_server', must be one of '%s'",
                $this->container['ldap_server'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets schema_mode
     *
     * @return string|null
     */
    public function getSchemaMode()
    {
        return $this->container['schema_mode'];
    }

    /**
     * Sets schema_mode
     *
     * @param string|null $schema_mode schema_mode
     *
     * @return self
     */
    public function setSchemaMode($schema_mode)
    {
        $allowedValues = $this->getSchemaModeAllowableValues();
        if (!is_null($schema_mode) && !in_array($schema_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schema_mode', must be one of '%s'",
                    $schema_mode,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($schema_mode)) {
            throw new \InvalidArgumentException('non-nullable schema_mode cannot be null');
        }

        $this->container['schema_mode'] = $schema_mode;

        return $this;
    }

    /**
     * Gets unix_primary_group
     *
     * @return bool|null
     */
    public function getUnixPrimaryGroup()
    {
        return $this->container['unix_primary_group'];
    }

    /**
     * Sets unix_primary_group
     *
     * @param bool|null $unix_primary_group unix_primary_group
     *
     * @return self
     */
    public function setUnixPrimaryGroup($unix_primary_group)
    {

        if (is_null($unix_primary_group)) {
            throw new \InvalidArgumentException('non-nullable unix_primary_group cannot be null');
        }

        $this->container['unix_primary_group'] = $unix_primary_group;

        return $this;
    }

    /**
     * Gets unix_nss_info
     *
     * @return bool|null
     */
    public function getUnixNssInfo()
    {
        return $this->container['unix_nss_info'];
    }

    /**
     * Sets unix_nss_info
     *
     * @param bool|null $unix_nss_info unix_nss_info
     *
     * @return self
     */
    public function setUnixNssInfo($unix_nss_info)
    {

        if (is_null($unix_nss_info)) {
            throw new \InvalidArgumentException('non-nullable unix_nss_info cannot be null');
        }

        $this->container['unix_nss_info'] = $unix_nss_info;

        return $this;
    }

    /**
     * Gets rangesize
     *
     * @return int|null
     */
    public function getRangesize()
    {
        return $this->container['rangesize'];
    }

    /**
     * Sets rangesize
     *
     * @param int|null $rangesize rangesize
     *
     * @return self
     */
    public function setRangesize($rangesize)
    {

        if (is_null($rangesize)) {
            throw new \InvalidArgumentException('non-nullable rangesize cannot be null');
        }

        $this->container['rangesize'] = $rangesize;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly readonly
     *
     * @return self
     */
    public function setReadonly($readonly)
    {

        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }

        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets ignore_builtin
     *
     * @return bool|null
     */
    public function getIgnoreBuiltin()
    {
        return $this->container['ignore_builtin'];
    }

    /**
     * Sets ignore_builtin
     *
     * @param bool|null $ignore_builtin ignore_builtin
     *
     * @return self
     */
    public function setIgnoreBuiltin($ignore_builtin)
    {

        if (is_null($ignore_builtin)) {
            throw new \InvalidArgumentException('non-nullable ignore_builtin cannot be null');
        }

        $this->container['ignore_builtin'] = $ignore_builtin;

        return $this;
    }

    /**
     * Gets ldap_base_dn
     *
     * @return string|null
     */
    public function getLdapBaseDn()
    {
        return $this->container['ldap_base_dn'];
    }

    /**
     * Sets ldap_base_dn
     *
     * @param string|null $ldap_base_dn ldap_base_dn
     *
     * @return self
     */
    public function setLdapBaseDn($ldap_base_dn)
    {

        if (is_null($ldap_base_dn)) {
            throw new \InvalidArgumentException('non-nullable ldap_base_dn cannot be null');
        }

        $this->container['ldap_base_dn'] = $ldap_base_dn;

        return $this;
    }

    /**
     * Gets ldap_user_dn
     *
     * @return string|null
     */
    public function getLdapUserDn()
    {
        return $this->container['ldap_user_dn'];
    }

    /**
     * Sets ldap_user_dn
     *
     * @param string|null $ldap_user_dn ldap_user_dn
     *
     * @return self
     */
    public function setLdapUserDn($ldap_user_dn)
    {

        if (is_null($ldap_user_dn)) {
            throw new \InvalidArgumentException('non-nullable ldap_user_dn cannot be null');
        }

        $this->container['ldap_user_dn'] = $ldap_user_dn;

        return $this;
    }

    /**
     * Gets ldap_user_dn_password
     *
     * @return string|null
     */
    public function getLdapUserDnPassword()
    {
        return $this->container['ldap_user_dn_password'];
    }

    /**
     * Sets ldap_user_dn_password
     *
     * @param string|null $ldap_user_dn_password ldap_user_dn_password
     *
     * @return self
     */
    public function setLdapUserDnPassword($ldap_user_dn_password)
    {

        if (is_null($ldap_user_dn_password)) {
            throw new \InvalidArgumentException('non-nullable ldap_user_dn_password cannot be null');
        }

        $this->container['ldap_user_dn_password'] = $ldap_user_dn_password;

        return $this;
    }

    /**
     * Gets ldap_url
     *
     * @return string|null
     */
    public function getLdapUrl()
    {
        return $this->container['ldap_url'];
    }

    /**
     * Sets ldap_url
     *
     * @param string|null $ldap_url ldap_url
     *
     * @return self
     */
    public function setLdapUrl($ldap_url)
    {

        if (is_null($ldap_url)) {
            throw new \InvalidArgumentException('non-nullable ldap_url cannot be null');
        }

        $this->container['ldap_url'] = $ldap_url;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string|null
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string|null $ssl ssl
     *
     * @return self
     */
    public function setSsl($ssl)
    {
        $allowedValues = $this->getSslAllowableValues();
        if (!is_null($ssl) && !in_array($ssl, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ssl', must be one of '%s'",
                    $ssl,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ssl)) {
            throw new \InvalidArgumentException('non-nullable ssl cannot be null');
        }

        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets validate_certificates
     *
     * @return bool|null
     */
    public function getValidateCertificates()
    {
        return $this->container['validate_certificates'];
    }

    /**
     * Sets validate_certificates
     *
     * @param bool|null $validate_certificates validate_certificates
     *
     * @return self
     */
    public function setValidateCertificates($validate_certificates)
    {

        if (is_null($validate_certificates)) {
            throw new \InvalidArgumentException('non-nullable validate_certificates cannot be null');
        }

        $this->container['validate_certificates'] = $validate_certificates;

        return $this;
    }

    /**
     * Gets linked_service
     *
     * @return string|null
     */
    public function getLinkedService()
    {
        return $this->container['linked_service'];
    }

    /**
     * Sets linked_service
     *
     * @param string|null $linked_service linked_service
     *
     * @return self
     */
    public function setLinkedService($linked_service)
    {
        $allowedValues = $this->getLinkedServiceAllowableValues();
        if (!is_null($linked_service) && !in_array($linked_service, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'linked_service', must be one of '%s'",
                    $linked_service,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($linked_service)) {
            throw new \InvalidArgumentException('non-nullable linked_service cannot be null');
        }

        $this->container['linked_service'] = $linked_service;

        return $this;
    }

    /**
     * Gets ldap_server
     *
     * @return string|null
     */
    public function getLdapServer()
    {
        return $this->container['ldap_server'];
    }

    /**
     * Sets ldap_server
     *
     * @param string|null $ldap_server ldap_server
     *
     * @return self
     */
    public function setLdapServer($ldap_server)
    {
        $allowedValues = $this->getLdapServerAllowableValues();
        if (!is_null($ldap_server) && !in_array($ldap_server, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ldap_server', must be one of '%s'",
                    $ldap_server,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ldap_server)) {
            throw new \InvalidArgumentException('non-nullable ldap_server cannot be null');
        }

        $this->container['ldap_server'] = $ldap_server;

        return $this;
    }

    /**
     * Gets ldap_realm
     *
     * @return bool|null
     */
    public function getLdapRealm()
    {
        return $this->container['ldap_realm'];
    }

    /**
     * Sets ldap_realm
     *
     * @param bool|null $ldap_realm ldap_realm
     *
     * @return self
     */
    public function setLdapRealm($ldap_realm)
    {

        if (is_null($ldap_realm)) {
            throw new \InvalidArgumentException('non-nullable ldap_realm cannot be null');
        }

        $this->container['ldap_realm'] = $ldap_realm;

        return $this;
    }

    /**
     * Gets bind_path_user
     *
     * @return string|null
     */
    public function getBindPathUser()
    {
        return $this->container['bind_path_user'];
    }

    /**
     * Sets bind_path_user
     *
     * @param string|null $bind_path_user bind_path_user
     *
     * @return self
     */
    public function setBindPathUser($bind_path_user)
    {

        if (is_null($bind_path_user)) {
            throw new \InvalidArgumentException('non-nullable bind_path_user cannot be null');
        }

        $this->container['bind_path_user'] = $bind_path_user;

        return $this;
    }

    /**
     * Gets bind_path_group
     *
     * @return string|null
     */
    public function getBindPathGroup()
    {
        return $this->container['bind_path_group'];
    }

    /**
     * Sets bind_path_group
     *
     * @param string|null $bind_path_group bind_path_group
     *
     * @return self
     */
    public function setBindPathGroup($bind_path_group)
    {

        if (is_null($bind_path_group)) {
            throw new \InvalidArgumentException('non-nullable bind_path_group cannot be null');
        }

        $this->container['bind_path_group'] = $bind_path_group;

        return $this;
    }

    /**
     * Gets user_cn
     *
     * @return bool|null
     */
    public function getUserCn()
    {
        return $this->container['user_cn'];
    }

    /**
     * Sets user_cn
     *
     * @param bool|null $user_cn user_cn
     *
     * @return self
     */
    public function setUserCn($user_cn)
    {

        if (is_null($user_cn)) {
            throw new \InvalidArgumentException('non-nullable user_cn cannot be null');
        }

        $this->container['user_cn'] = $user_cn;

        return $this;
    }

    /**
     * Gets cn_realm
     *
     * @return string|null
     */
    public function getCnRealm()
    {
        return $this->container['cn_realm'];
    }

    /**
     * Sets cn_realm
     *
     * @param string|null $cn_realm cn_realm
     *
     * @return self
     */
    public function setCnRealm($cn_realm)
    {

        if (is_null($cn_realm)) {
            throw new \InvalidArgumentException('non-nullable cn_realm cannot be null');
        }

        $this->container['cn_realm'] = $cn_realm;

        return $this;
    }

    /**
     * Gets ldap_domain
     *
     * @return string|null
     */
    public function getLdapDomain()
    {
        return $this->container['ldap_domain'];
    }

    /**
     * Sets ldap_domain
     *
     * @param string|null $ldap_domain ldap_domain
     *
     * @return self
     */
    public function setLdapDomain($ldap_domain)
    {

        if (is_null($ldap_domain)) {
            throw new \InvalidArgumentException('non-nullable ldap_domain cannot be null');
        }

        $this->container['ldap_domain'] = $ldap_domain;

        return $this;
    }

    /**
     * Gets sssd_compat
     *
     * @return bool|null
     */
    public function getSssdCompat()
    {
        return $this->container['sssd_compat'];
    }

    /**
     * Sets sssd_compat
     *
     * @param bool|null $sssd_compat sssd_compat
     *
     * @return self
     */
    public function setSssdCompat($sssd_compat)
    {

        if (is_null($sssd_compat)) {
            throw new \InvalidArgumentException('non-nullable sssd_compat cannot be null');
        }

        $this->container['sssd_compat'] = $sssd_compat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


