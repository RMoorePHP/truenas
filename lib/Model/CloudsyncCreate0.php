<?php
/**
 * CloudsyncCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * CloudsyncCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudsyncCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cloudsync_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'direction' => 'string',
        'transfer_mode' => 'string',
        'path' => 'string',
        'credentials' => 'int',
        'encryption' => 'bool',
        'filename_encryption' => 'bool',
        'encryption_password' => 'string',
        'encryption_salt' => 'string',
        'schedule' => '\RMoore\Truenas\Model\Schedule',
        'follow_symlinks' => 'bool',
        'transfers' => 'int',
        'bwlimit' => '\RMoore\Truenas\Model\CloudSyncBwlimit[]',
        'include' => 'string[]',
        'exclude' => 'string[]',
        'attributes' => 'array<string,mixed>',
        'snapshot' => 'bool',
        'pre_script' => 'string',
        'post_script' => 'string',
        'args' => 'string',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'direction' => null,
        'transfer_mode' => null,
        'path' => null,
        'credentials' => null,
        'encryption' => null,
        'filename_encryption' => null,
        'encryption_password' => null,
        'encryption_salt' => null,
        'schedule' => null,
        'follow_symlinks' => null,
        'transfers' => null,
        'bwlimit' => null,
        'include' => null,
        'exclude' => null,
        'attributes' => null,
        'snapshot' => null,
        'pre_script' => null,
        'post_script' => null,
        'args' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
		'direction' => false,
		'transfer_mode' => false,
		'path' => false,
		'credentials' => false,
		'encryption' => false,
		'filename_encryption' => false,
		'encryption_password' => false,
		'encryption_salt' => false,
		'schedule' => false,
		'follow_symlinks' => false,
		'transfers' => true,
		'bwlimit' => false,
		'include' => false,
		'exclude' => false,
		'attributes' => false,
		'snapshot' => false,
		'pre_script' => false,
		'post_script' => false,
		'args' => false,
		'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'direction' => 'direction',
        'transfer_mode' => 'transfer_mode',
        'path' => 'path',
        'credentials' => 'credentials',
        'encryption' => 'encryption',
        'filename_encryption' => 'filename_encryption',
        'encryption_password' => 'encryption_password',
        'encryption_salt' => 'encryption_salt',
        'schedule' => 'schedule',
        'follow_symlinks' => 'follow_symlinks',
        'transfers' => 'transfers',
        'bwlimit' => 'bwlimit',
        'include' => 'include',
        'exclude' => 'exclude',
        'attributes' => 'attributes',
        'snapshot' => 'snapshot',
        'pre_script' => 'pre_script',
        'post_script' => 'post_script',
        'args' => 'args',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'direction' => 'setDirection',
        'transfer_mode' => 'setTransferMode',
        'path' => 'setPath',
        'credentials' => 'setCredentials',
        'encryption' => 'setEncryption',
        'filename_encryption' => 'setFilenameEncryption',
        'encryption_password' => 'setEncryptionPassword',
        'encryption_salt' => 'setEncryptionSalt',
        'schedule' => 'setSchedule',
        'follow_symlinks' => 'setFollowSymlinks',
        'transfers' => 'setTransfers',
        'bwlimit' => 'setBwlimit',
        'include' => 'setInclude',
        'exclude' => 'setExclude',
        'attributes' => 'setAttributes',
        'snapshot' => 'setSnapshot',
        'pre_script' => 'setPreScript',
        'post_script' => 'setPostScript',
        'args' => 'setArgs',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'direction' => 'getDirection',
        'transfer_mode' => 'getTransferMode',
        'path' => 'getPath',
        'credentials' => 'getCredentials',
        'encryption' => 'getEncryption',
        'filename_encryption' => 'getFilenameEncryption',
        'encryption_password' => 'getEncryptionPassword',
        'encryption_salt' => 'getEncryptionSalt',
        'schedule' => 'getSchedule',
        'follow_symlinks' => 'getFollowSymlinks',
        'transfers' => 'getTransfers',
        'bwlimit' => 'getBwlimit',
        'include' => 'getInclude',
        'exclude' => 'getExclude',
        'attributes' => 'getAttributes',
        'snapshot' => 'getSnapshot',
        'pre_script' => 'getPreScript',
        'post_script' => 'getPostScript',
        'args' => 'getArgs',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DIRECTION_PUSH = 'PUSH';
    public const DIRECTION_PULL = 'PULL';
    public const TRANSFER_MODE_SYNC = 'SYNC';
    public const TRANSFER_MODE_COPY = 'COPY';
    public const TRANSFER_MODE_MOVE = 'MOVE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_PUSH,
            self::DIRECTION_PULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferModeAllowableValues()
    {
        return [
            self::TRANSFER_MODE_SYNC,
            self::TRANSFER_MODE_COPY,
            self::TRANSFER_MODE_MOVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('transfer_mode', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('encryption', $data ?? [], false);
        $this->setIfExists('filename_encryption', $data ?? [], false);
        $this->setIfExists('encryption_password', $data ?? [], '');
        $this->setIfExists('encryption_salt', $data ?? [], '');
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('follow_symlinks', $data ?? [], false);
        $this->setIfExists('transfers', $data ?? [], null);
        $this->setIfExists('bwlimit', $data ?? [], null);
        $this->setIfExists('include', $data ?? [], null);
        $this->setIfExists('exclude', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('snapshot', $data ?? [], false);
        $this->setIfExists('pre_script', $data ?? [], '');
        $this->setIfExists('post_script', $data ?? [], '');
        $this->setIfExists('args', $data ?? [], '');
        $this->setIfExists('enabled', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTransferModeAllowableValues();
        if (!is_null($this->container['transfer_mode']) && !in_array($this->container['transfer_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transfer_mode', must be one of '%s'",
                $this->container['transfer_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction direction
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }

        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets transfer_mode
     *
     * @return string|null
     */
    public function getTransferMode()
    {
        return $this->container['transfer_mode'];
    }

    /**
     * Sets transfer_mode
     *
     * @param string|null $transfer_mode transfer_mode
     *
     * @return self
     */
    public function setTransferMode($transfer_mode)
    {
        $allowedValues = $this->getTransferModeAllowableValues();
        if (!is_null($transfer_mode) && !in_array($transfer_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transfer_mode', must be one of '%s'",
                    $transfer_mode,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($transfer_mode)) {
            throw new \InvalidArgumentException('non-nullable transfer_mode cannot be null');
        }

        $this->container['transfer_mode'] = $transfer_mode;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {

        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }

        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return int|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param int|null $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {

        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }

        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return bool|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param bool|null $encryption encryption
     *
     * @return self
     */
    public function setEncryption($encryption)
    {

        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }

        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets filename_encryption
     *
     * @return bool|null
     */
    public function getFilenameEncryption()
    {
        return $this->container['filename_encryption'];
    }

    /**
     * Sets filename_encryption
     *
     * @param bool|null $filename_encryption filename_encryption
     *
     * @return self
     */
    public function setFilenameEncryption($filename_encryption)
    {

        if (is_null($filename_encryption)) {
            throw new \InvalidArgumentException('non-nullable filename_encryption cannot be null');
        }

        $this->container['filename_encryption'] = $filename_encryption;

        return $this;
    }

    /**
     * Gets encryption_password
     *
     * @return string|null
     */
    public function getEncryptionPassword()
    {
        return $this->container['encryption_password'];
    }

    /**
     * Sets encryption_password
     *
     * @param string|null $encryption_password encryption_password
     *
     * @return self
     */
    public function setEncryptionPassword($encryption_password)
    {

        if (is_null($encryption_password)) {
            throw new \InvalidArgumentException('non-nullable encryption_password cannot be null');
        }

        $this->container['encryption_password'] = $encryption_password;

        return $this;
    }

    /**
     * Gets encryption_salt
     *
     * @return string|null
     */
    public function getEncryptionSalt()
    {
        return $this->container['encryption_salt'];
    }

    /**
     * Sets encryption_salt
     *
     * @param string|null $encryption_salt encryption_salt
     *
     * @return self
     */
    public function setEncryptionSalt($encryption_salt)
    {

        if (is_null($encryption_salt)) {
            throw new \InvalidArgumentException('non-nullable encryption_salt cannot be null');
        }

        $this->container['encryption_salt'] = $encryption_salt;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \RMoore\Truenas\Model\Schedule|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \RMoore\Truenas\Model\Schedule|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {

        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }

        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets follow_symlinks
     *
     * @return bool|null
     */
    public function getFollowSymlinks()
    {
        return $this->container['follow_symlinks'];
    }

    /**
     * Sets follow_symlinks
     *
     * @param bool|null $follow_symlinks follow_symlinks
     *
     * @return self
     */
    public function setFollowSymlinks($follow_symlinks)
    {

        if (is_null($follow_symlinks)) {
            throw new \InvalidArgumentException('non-nullable follow_symlinks cannot be null');
        }

        $this->container['follow_symlinks'] = $follow_symlinks;

        return $this;
    }

    /**
     * Gets transfers
     *
     * @return int|null
     */
    public function getTransfers()
    {
        return $this->container['transfers'];
    }

    /**
     * Sets transfers
     *
     * @param int|null $transfers transfers
     *
     * @return self
     */
    public function setTransfers($transfers)
    {

        if (is_null($transfers)) {
            array_push($this->openAPINullablesSetToNull, 'transfers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transfers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['transfers'] = $transfers;

        return $this;
    }

    /**
     * Gets bwlimit
     *
     * @return \RMoore\Truenas\Model\CloudSyncBwlimit[]|null
     */
    public function getBwlimit()
    {
        return $this->container['bwlimit'];
    }

    /**
     * Sets bwlimit
     *
     * @param \RMoore\Truenas\Model\CloudSyncBwlimit[]|null $bwlimit bwlimit
     *
     * @return self
     */
    public function setBwlimit($bwlimit)
    {

        if (is_null($bwlimit)) {
            throw new \InvalidArgumentException('non-nullable bwlimit cannot be null');
        }

        $this->container['bwlimit'] = $bwlimit;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string[]|null
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string[]|null $include include
     *
     * @return self
     */
    public function setInclude($include)
    {

        if (is_null($include)) {
            throw new \InvalidArgumentException('non-nullable include cannot be null');
        }

        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets exclude
     *
     * @return string[]|null
     */
    public function getExclude()
    {
        return $this->container['exclude'];
    }

    /**
     * Sets exclude
     *
     * @param string[]|null $exclude exclude
     *
     * @return self
     */
    public function setExclude($exclude)
    {

        if (is_null($exclude)) {
            throw new \InvalidArgumentException('non-nullable exclude cannot be null');
        }

        $this->container['exclude'] = $exclude;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,mixed>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,mixed>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets snapshot
     *
     * @return bool|null
     */
    public function getSnapshot()
    {
        return $this->container['snapshot'];
    }

    /**
     * Sets snapshot
     *
     * @param bool|null $snapshot snapshot
     *
     * @return self
     */
    public function setSnapshot($snapshot)
    {

        if (is_null($snapshot)) {
            throw new \InvalidArgumentException('non-nullable snapshot cannot be null');
        }

        $this->container['snapshot'] = $snapshot;

        return $this;
    }

    /**
     * Gets pre_script
     *
     * @return string|null
     */
    public function getPreScript()
    {
        return $this->container['pre_script'];
    }

    /**
     * Sets pre_script
     *
     * @param string|null $pre_script pre_script
     *
     * @return self
     */
    public function setPreScript($pre_script)
    {

        if (is_null($pre_script)) {
            throw new \InvalidArgumentException('non-nullable pre_script cannot be null');
        }

        $this->container['pre_script'] = $pre_script;

        return $this;
    }

    /**
     * Gets post_script
     *
     * @return string|null
     */
    public function getPostScript()
    {
        return $this->container['post_script'];
    }

    /**
     * Sets post_script
     *
     * @param string|null $post_script post_script
     *
     * @return self
     */
    public function setPostScript($post_script)
    {

        if (is_null($post_script)) {
            throw new \InvalidArgumentException('non-nullable post_script cannot be null');
        }

        $this->container['post_script'] = $post_script;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string|null $args args
     *
     * @return self
     */
    public function setArgs($args)
    {

        if (is_null($args)) {
            throw new \InvalidArgumentException('non-nullable args cannot be null');
        }

        $this->container['args'] = $args;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


