<?php
/**
 * RsynctaskCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * RsynctaskCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RsynctaskCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rsynctask_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'path' => 'string',
        'user' => 'string',
        'remotehost' => 'string',
        'remoteport' => 'int',
        'mode' => 'string',
        'remotemodule' => 'string',
        'remotepath' => 'string',
        'validate_rpath' => 'bool',
        'direction' => 'string',
        'desc' => 'string',
        'schedule' => '\RMoore\Truenas\Model\Schedule',
        'recursive' => 'bool',
        'times' => 'bool',
        'compress' => 'bool',
        'archive' => 'bool',
        'delete' => 'bool',
        'quiet' => 'bool',
        'preserveperm' => 'bool',
        'preserveattr' => 'bool',
        'delayupdates' => 'bool',
        'extra' => 'string[]',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'path' => null,
        'user' => null,
        'remotehost' => null,
        'remoteport' => null,
        'mode' => null,
        'remotemodule' => null,
        'remotepath' => null,
        'validate_rpath' => null,
        'direction' => null,
        'desc' => null,
        'schedule' => null,
        'recursive' => null,
        'times' => null,
        'compress' => null,
        'archive' => null,
        'delete' => null,
        'quiet' => null,
        'preserveperm' => null,
        'preserveattr' => null,
        'delayupdates' => null,
        'extra' => null,
        'enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'path' => false,
		'user' => false,
		'remotehost' => false,
		'remoteport' => false,
		'mode' => false,
		'remotemodule' => false,
		'remotepath' => false,
		'validate_rpath' => false,
		'direction' => false,
		'desc' => false,
		'schedule' => false,
		'recursive' => false,
		'times' => false,
		'compress' => false,
		'archive' => false,
		'delete' => false,
		'quiet' => false,
		'preserveperm' => false,
		'preserveattr' => false,
		'delayupdates' => false,
		'extra' => false,
		'enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'path' => 'path',
        'user' => 'user',
        'remotehost' => 'remotehost',
        'remoteport' => 'remoteport',
        'mode' => 'mode',
        'remotemodule' => 'remotemodule',
        'remotepath' => 'remotepath',
        'validate_rpath' => 'validate_rpath',
        'direction' => 'direction',
        'desc' => 'desc',
        'schedule' => 'schedule',
        'recursive' => 'recursive',
        'times' => 'times',
        'compress' => 'compress',
        'archive' => 'archive',
        'delete' => 'delete',
        'quiet' => 'quiet',
        'preserveperm' => 'preserveperm',
        'preserveattr' => 'preserveattr',
        'delayupdates' => 'delayupdates',
        'extra' => 'extra',
        'enabled' => 'enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'path' => 'setPath',
        'user' => 'setUser',
        'remotehost' => 'setRemotehost',
        'remoteport' => 'setRemoteport',
        'mode' => 'setMode',
        'remotemodule' => 'setRemotemodule',
        'remotepath' => 'setRemotepath',
        'validate_rpath' => 'setValidateRpath',
        'direction' => 'setDirection',
        'desc' => 'setDesc',
        'schedule' => 'setSchedule',
        'recursive' => 'setRecursive',
        'times' => 'setTimes',
        'compress' => 'setCompress',
        'archive' => 'setArchive',
        'delete' => 'setDelete',
        'quiet' => 'setQuiet',
        'preserveperm' => 'setPreserveperm',
        'preserveattr' => 'setPreserveattr',
        'delayupdates' => 'setDelayupdates',
        'extra' => 'setExtra',
        'enabled' => 'setEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'path' => 'getPath',
        'user' => 'getUser',
        'remotehost' => 'getRemotehost',
        'remoteport' => 'getRemoteport',
        'mode' => 'getMode',
        'remotemodule' => 'getRemotemodule',
        'remotepath' => 'getRemotepath',
        'validate_rpath' => 'getValidateRpath',
        'direction' => 'getDirection',
        'desc' => 'getDesc',
        'schedule' => 'getSchedule',
        'recursive' => 'getRecursive',
        'times' => 'getTimes',
        'compress' => 'getCompress',
        'archive' => 'getArchive',
        'delete' => 'getDelete',
        'quiet' => 'getQuiet',
        'preserveperm' => 'getPreserveperm',
        'preserveattr' => 'getPreserveattr',
        'delayupdates' => 'getDelayupdates',
        'extra' => 'getExtra',
        'enabled' => 'getEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODE_MODULE = 'MODULE';
    public const MODE_SSH = 'SSH';
    public const DIRECTION_PULL = 'PULL';
    public const DIRECTION_PUSH = 'PUSH';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_MODULE,
            self::MODE_SSH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_PULL,
            self::DIRECTION_PUSH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('remotehost', $data ?? [], null);
        $this->setIfExists('remoteport', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], 'MODULE');
        $this->setIfExists('remotemodule', $data ?? [], null);
        $this->setIfExists('remotepath', $data ?? [], null);
        $this->setIfExists('validate_rpath', $data ?? [], true);
        $this->setIfExists('direction', $data ?? [], 'PUSH');
        $this->setIfExists('desc', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('recursive', $data ?? [], null);
        $this->setIfExists('times', $data ?? [], null);
        $this->setIfExists('compress', $data ?? [], null);
        $this->setIfExists('archive', $data ?? [], null);
        $this->setIfExists('delete', $data ?? [], null);
        $this->setIfExists('quiet', $data ?? [], null);
        $this->setIfExists('preserveperm', $data ?? [], null);
        $this->setIfExists('preserveattr', $data ?? [], null);
        $this->setIfExists('delayupdates', $data ?? [], null);
        $this->setIfExists('extra', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], true);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path See the comment in Rsyncmod about `path` length limits.
     *
     * @return self
     */
    public function setPath($path)
    {

        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }

        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets remotehost
     *
     * @return string|null
     */
    public function getRemotehost()
    {
        return $this->container['remotehost'];
    }

    /**
     * Sets remotehost
     *
     * @param string|null $remotehost `remotehost` is ip address or hostname of the remote system. If username differs on the remote host, \"username@remote_host\" format should be used.
     *
     * @return self
     */
    public function setRemotehost($remotehost)
    {

        if (is_null($remotehost)) {
            throw new \InvalidArgumentException('non-nullable remotehost cannot be null');
        }

        $this->container['remotehost'] = $remotehost;

        return $this;
    }

    /**
     * Gets remoteport
     *
     * @return int|null
     */
    public function getRemoteport()
    {
        return $this->container['remoteport'];
    }

    /**
     * Sets remoteport
     *
     * @param int|null $remoteport remoteport
     *
     * @return self
     */
    public function setRemoteport($remoteport)
    {

        if (is_null($remoteport)) {
            throw new \InvalidArgumentException('non-nullable remoteport cannot be null');
        }

        $this->container['remoteport'] = $remoteport;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode `mode` represents different operating mechanisms for Rsync i.e Rsync Module mode / Rsync SSH mode. `remotemodule` is the name of remote module, this attribute should be specified when `mode` is set to MODULE.
     *
     * @return self
     */
    public function setMode($mode)
    {
        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($mode) && !in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }

        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets remotemodule
     *
     * @return string|null
     */
    public function getRemotemodule()
    {
        return $this->container['remotemodule'];
    }

    /**
     * Sets remotemodule
     *
     * @param string|null $remotemodule `remotemodule` is the name of remote module, this attribute should be specified when `mode` is set to MODULE.
     *
     * @return self
     */
    public function setRemotemodule($remotemodule)
    {

        if (is_null($remotemodule)) {
            throw new \InvalidArgumentException('non-nullable remotemodule cannot be null');
        }

        $this->container['remotemodule'] = $remotemodule;

        return $this;
    }

    /**
     * Gets remotepath
     *
     * @return string|null
     */
    public function getRemotepath()
    {
        return $this->container['remotepath'];
    }

    /**
     * Sets remotepath
     *
     * @param string|null $remotepath `remotepath` specifies the path on the remote system.
     *
     * @return self
     */
    public function setRemotepath($remotepath)
    {

        if (is_null($remotepath)) {
            throw new \InvalidArgumentException('non-nullable remotepath cannot be null');
        }

        $this->container['remotepath'] = $remotepath;

        return $this;
    }

    /**
     * Gets validate_rpath
     *
     * @return bool|null
     */
    public function getValidateRpath()
    {
        return $this->container['validate_rpath'];
    }

    /**
     * Sets validate_rpath
     *
     * @param bool|null $validate_rpath `validate_rpath` is a boolean which when sets validates the existence of the remote path.
     *
     * @return self
     */
    public function setValidateRpath($validate_rpath)
    {

        if (is_null($validate_rpath)) {
            throw new \InvalidArgumentException('non-nullable validate_rpath cannot be null');
        }

        $this->container['validate_rpath'] = $validate_rpath;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction `direction` specifies if data should be PULLED or PUSHED from the remote system.
     *
     * @return self
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }

        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string|null
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string|null $desc desc
     *
     * @return self
     */
    public function setDesc($desc)
    {

        if (is_null($desc)) {
            throw new \InvalidArgumentException('non-nullable desc cannot be null');
        }

        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return \RMoore\Truenas\Model\Schedule|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param \RMoore\Truenas\Model\Schedule|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {

        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }

        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets recursive
     *
     * @return bool|null
     */
    public function getRecursive()
    {
        return $this->container['recursive'];
    }

    /**
     * Sets recursive
     *
     * @param bool|null $recursive recursive
     *
     * @return self
     */
    public function setRecursive($recursive)
    {

        if (is_null($recursive)) {
            throw new \InvalidArgumentException('non-nullable recursive cannot be null');
        }

        $this->container['recursive'] = $recursive;

        return $this;
    }

    /**
     * Gets times
     *
     * @return bool|null
     */
    public function getTimes()
    {
        return $this->container['times'];
    }

    /**
     * Sets times
     *
     * @param bool|null $times times
     *
     * @return self
     */
    public function setTimes($times)
    {

        if (is_null($times)) {
            throw new \InvalidArgumentException('non-nullable times cannot be null');
        }

        $this->container['times'] = $times;

        return $this;
    }

    /**
     * Gets compress
     *
     * @return bool|null
     */
    public function getCompress()
    {
        return $this->container['compress'];
    }

    /**
     * Sets compress
     *
     * @param bool|null $compress `compress` when set reduces the size of the data which is to be transmitted.
     *
     * @return self
     */
    public function setCompress($compress)
    {

        if (is_null($compress)) {
            throw new \InvalidArgumentException('non-nullable compress cannot be null');
        }

        $this->container['compress'] = $compress;

        return $this;
    }

    /**
     * Gets archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool|null $archive `archive` when set makes rsync run recursively, preserving symlinks, permissions, modification times, group, and special files.
     *
     * @return self
     */
    public function setArchive($archive)
    {

        if (is_null($archive)) {
            throw new \InvalidArgumentException('non-nullable archive cannot be null');
        }

        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool|null
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool|null $delete `delete` when set deletes files in the destination directory which do not exist in the source directory.
     *
     * @return self
     */
    public function setDelete($delete)
    {

        if (is_null($delete)) {
            throw new \InvalidArgumentException('non-nullable delete cannot be null');
        }

        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets quiet
     *
     * @return bool|null
     */
    public function getQuiet()
    {
        return $this->container['quiet'];
    }

    /**
     * Sets quiet
     *
     * @param bool|null $quiet quiet
     *
     * @return self
     */
    public function setQuiet($quiet)
    {

        if (is_null($quiet)) {
            throw new \InvalidArgumentException('non-nullable quiet cannot be null');
        }

        $this->container['quiet'] = $quiet;

        return $this;
    }

    /**
     * Gets preserveperm
     *
     * @return bool|null
     */
    public function getPreserveperm()
    {
        return $this->container['preserveperm'];
    }

    /**
     * Sets preserveperm
     *
     * @param bool|null $preserveperm `preserveperm` when set preserves original file permissions.
     *
     * @return self
     */
    public function setPreserveperm($preserveperm)
    {

        if (is_null($preserveperm)) {
            throw new \InvalidArgumentException('non-nullable preserveperm cannot be null');
        }

        $this->container['preserveperm'] = $preserveperm;

        return $this;
    }

    /**
     * Gets preserveattr
     *
     * @return bool|null
     */
    public function getPreserveattr()
    {
        return $this->container['preserveattr'];
    }

    /**
     * Sets preserveattr
     *
     * @param bool|null $preserveattr preserveattr
     *
     * @return self
     */
    public function setPreserveattr($preserveattr)
    {

        if (is_null($preserveattr)) {
            throw new \InvalidArgumentException('non-nullable preserveattr cannot be null');
        }

        $this->container['preserveattr'] = $preserveattr;

        return $this;
    }

    /**
     * Gets delayupdates
     *
     * @return bool|null
     */
    public function getDelayupdates()
    {
        return $this->container['delayupdates'];
    }

    /**
     * Sets delayupdates
     *
     * @param bool|null $delayupdates delayupdates
     *
     * @return self
     */
    public function setDelayupdates($delayupdates)
    {

        if (is_null($delayupdates)) {
            throw new \InvalidArgumentException('non-nullable delayupdates cannot be null');
        }

        $this->container['delayupdates'] = $delayupdates;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string[]|null
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string[]|null $extra extra
     *
     * @return self
     */
    public function setExtra($extra)
    {

        if (is_null($extra)) {
            throw new \InvalidArgumentException('non-nullable extra cannot be null');
        }

        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


