<?php
/**
 * CertificateauthorityCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * CertificateauthorityCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CertificateauthorityCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'certificateauthority_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tos' => 'bool',
        'csr_id' => 'int',
        'signedby' => 'int',
        'key_length' => 'int',
        'renew_days' => 'int',
        'type' => 'int',
        'lifetime' => 'int',
        'serial' => 'int',
        'acme_directory_uri' => 'string',
        'certificate' => 'string',
        'city' => 'string',
        'common' => 'string',
        'country' => 'string',
        'csr' => 'string',
        'ec_curve' => 'string',
        'email' => 'string',
        'key_type' => 'string',
        'name' => 'string',
        'organization' => 'string',
        'organizational_unit' => 'string',
        'passphrase' => 'string',
        'privatekey' => 'string',
        'state' => 'string',
        'create_type' => 'string',
        'digest_algorithm' => 'string',
        'san' => 'string[]',
        'cert_extensions' => '\RMoore\Truenas\Model\CertExtensions1',
        'add_to_trusted_store' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tos' => null,
        'csr_id' => null,
        'signedby' => null,
        'key_length' => null,
        'renew_days' => null,
        'type' => null,
        'lifetime' => null,
        'serial' => null,
        'acme_directory_uri' => null,
        'certificate' => null,
        'city' => null,
        'common' => null,
        'country' => null,
        'csr' => null,
        'ec_curve' => null,
        'email' => null,
        'key_type' => null,
        'name' => null,
        'organization' => null,
        'organizational_unit' => null,
        'passphrase' => null,
        'privatekey' => null,
        'state' => null,
        'create_type' => null,
        'digest_algorithm' => null,
        'san' => null,
        'cert_extensions' => null,
        'add_to_trusted_store' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tos' => false,
		'csr_id' => false,
		'signedby' => false,
		'key_length' => false,
		'renew_days' => false,
		'type' => false,
		'lifetime' => false,
		'serial' => false,
		'acme_directory_uri' => false,
		'certificate' => false,
		'city' => false,
		'common' => true,
		'country' => false,
		'csr' => false,
		'ec_curve' => false,
		'email' => false,
		'key_type' => false,
		'name' => false,
		'organization' => false,
		'organizational_unit' => false,
		'passphrase' => false,
		'privatekey' => false,
		'state' => false,
		'create_type' => false,
		'digest_algorithm' => false,
		'san' => false,
		'cert_extensions' => false,
		'add_to_trusted_store' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tos' => 'tos',
        'csr_id' => 'csr_id',
        'signedby' => 'signedby',
        'key_length' => 'key_length',
        'renew_days' => 'renew_days',
        'type' => 'type',
        'lifetime' => 'lifetime',
        'serial' => 'serial',
        'acme_directory_uri' => 'acme_directory_uri',
        'certificate' => 'certificate',
        'city' => 'city',
        'common' => 'common',
        'country' => 'country',
        'csr' => 'CSR',
        'ec_curve' => 'ec_curve',
        'email' => 'email',
        'key_type' => 'key_type',
        'name' => 'name',
        'organization' => 'organization',
        'organizational_unit' => 'organizational_unit',
        'passphrase' => 'passphrase',
        'privatekey' => 'privatekey',
        'state' => 'state',
        'create_type' => 'create_type',
        'digest_algorithm' => 'digest_algorithm',
        'san' => 'san',
        'cert_extensions' => 'cert_extensions',
        'add_to_trusted_store' => 'add_to_trusted_store'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tos' => 'setTos',
        'csr_id' => 'setCsrId',
        'signedby' => 'setSignedby',
        'key_length' => 'setKeyLength',
        'renew_days' => 'setRenewDays',
        'type' => 'setType',
        'lifetime' => 'setLifetime',
        'serial' => 'setSerial',
        'acme_directory_uri' => 'setAcmeDirectoryUri',
        'certificate' => 'setCertificate',
        'city' => 'setCity',
        'common' => 'setCommon',
        'country' => 'setCountry',
        'csr' => 'setCsr',
        'ec_curve' => 'setEcCurve',
        'email' => 'setEmail',
        'key_type' => 'setKeyType',
        'name' => 'setName',
        'organization' => 'setOrganization',
        'organizational_unit' => 'setOrganizationalUnit',
        'passphrase' => 'setPassphrase',
        'privatekey' => 'setPrivatekey',
        'state' => 'setState',
        'create_type' => 'setCreateType',
        'digest_algorithm' => 'setDigestAlgorithm',
        'san' => 'setSan',
        'cert_extensions' => 'setCertExtensions',
        'add_to_trusted_store' => 'setAddToTrustedStore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tos' => 'getTos',
        'csr_id' => 'getCsrId',
        'signedby' => 'getSignedby',
        'key_length' => 'getKeyLength',
        'renew_days' => 'getRenewDays',
        'type' => 'getType',
        'lifetime' => 'getLifetime',
        'serial' => 'getSerial',
        'acme_directory_uri' => 'getAcmeDirectoryUri',
        'certificate' => 'getCertificate',
        'city' => 'getCity',
        'common' => 'getCommon',
        'country' => 'getCountry',
        'csr' => 'getCsr',
        'ec_curve' => 'getEcCurve',
        'email' => 'getEmail',
        'key_type' => 'getKeyType',
        'name' => 'getName',
        'organization' => 'getOrganization',
        'organizational_unit' => 'getOrganizationalUnit',
        'passphrase' => 'getPassphrase',
        'privatekey' => 'getPrivatekey',
        'state' => 'getState',
        'create_type' => 'getCreateType',
        'digest_algorithm' => 'getDigestAlgorithm',
        'san' => 'getSan',
        'cert_extensions' => 'getCertExtensions',
        'add_to_trusted_store' => 'getAddToTrustedStore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EC_CURVE_BRAINPOOL_P512_R1 = 'BrainpoolP512R1';
    public const EC_CURVE_BRAINPOOL_P384_R1 = 'BrainpoolP384R1';
    public const EC_CURVE_BRAINPOOL_P256_R1 = 'BrainpoolP256R1';
    public const EC_CURVE_SECP256_K1 = 'SECP256K1';
    public const EC_CURVE_SECP384_R1 = 'SECP384R1';
    public const EC_CURVE_SECP521_R1 = 'SECP521R1';
    public const EC_CURVE_ED25519 = 'ed25519';
    public const KEY_TYPE_RSA = 'RSA';
    public const KEY_TYPE_EC = 'EC';
    public const CREATE_TYPE_INTERNAL = 'CA_CREATE_INTERNAL';
    public const CREATE_TYPE_IMPORTED = 'CA_CREATE_IMPORTED';
    public const CREATE_TYPE_INTERMEDIATE = 'CA_CREATE_INTERMEDIATE';
    public const DIGEST_ALGORITHM_SHA224 = 'SHA224';
    public const DIGEST_ALGORITHM_SHA256 = 'SHA256';
    public const DIGEST_ALGORITHM_SHA384 = 'SHA384';
    public const DIGEST_ALGORITHM_SHA512 = 'SHA512';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEcCurveAllowableValues()
    {
        return [
            self::EC_CURVE_BRAINPOOL_P512_R1,
            self::EC_CURVE_BRAINPOOL_P384_R1,
            self::EC_CURVE_BRAINPOOL_P256_R1,
            self::EC_CURVE_SECP256_K1,
            self::EC_CURVE_SECP384_R1,
            self::EC_CURVE_SECP521_R1,
            self::EC_CURVE_ED25519,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeyTypeAllowableValues()
    {
        return [
            self::KEY_TYPE_RSA,
            self::KEY_TYPE_EC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreateTypeAllowableValues()
    {
        return [
            self::CREATE_TYPE_INTERNAL,
            self::CREATE_TYPE_IMPORTED,
            self::CREATE_TYPE_INTERMEDIATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDigestAlgorithmAllowableValues()
    {
        return [
            self::DIGEST_ALGORITHM_SHA224,
            self::DIGEST_ALGORITHM_SHA256,
            self::DIGEST_ALGORITHM_SHA384,
            self::DIGEST_ALGORITHM_SHA512,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tos', $data ?? [], null);
        $this->setIfExists('csr_id', $data ?? [], null);
        $this->setIfExists('signedby', $data ?? [], null);
        $this->setIfExists('key_length', $data ?? [], null);
        $this->setIfExists('renew_days', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('lifetime', $data ?? [], null);
        $this->setIfExists('serial', $data ?? [], null);
        $this->setIfExists('acme_directory_uri', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('common', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('csr', $data ?? [], null);
        $this->setIfExists('ec_curve', $data ?? [], 'SECP384R1');
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('key_type', $data ?? [], 'RSA');
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('organizational_unit', $data ?? [], null);
        $this->setIfExists('passphrase', $data ?? [], null);
        $this->setIfExists('privatekey', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('create_type', $data ?? [], null);
        $this->setIfExists('digest_algorithm', $data ?? [], null);
        $this->setIfExists('san', $data ?? [], null);
        $this->setIfExists('cert_extensions', $data ?? [], null);
        $this->setIfExists('add_to_trusted_store', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEcCurveAllowableValues();
        if (!is_null($this->container['ec_curve']) && !in_array($this->container['ec_curve'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ec_curve', must be one of '%s'",
                $this->container['ec_curve'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!is_null($this->container['key_type']) && !in_array($this->container['key_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'key_type', must be one of '%s'",
                $this->container['key_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCreateTypeAllowableValues();
        if (!is_null($this->container['create_type']) && !in_array($this->container['create_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'create_type', must be one of '%s'",
                $this->container['create_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDigestAlgorithmAllowableValues();
        if (!is_null($this->container['digest_algorithm']) && !in_array($this->container['digest_algorithm'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'digest_algorithm', must be one of '%s'",
                $this->container['digest_algorithm'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tos
     *
     * @return bool|null
     */
    public function getTos()
    {
        return $this->container['tos'];
    }

    /**
     * Sets tos
     *
     * @param bool|null $tos tos
     *
     * @return self
     */
    public function setTos($tos)
    {

        if (is_null($tos)) {
            throw new \InvalidArgumentException('non-nullable tos cannot be null');
        }

        $this->container['tos'] = $tos;

        return $this;
    }

    /**
     * Gets csr_id
     *
     * @return int|null
     */
    public function getCsrId()
    {
        return $this->container['csr_id'];
    }

    /**
     * Sets csr_id
     *
     * @param int|null $csr_id csr_id
     *
     * @return self
     */
    public function setCsrId($csr_id)
    {

        if (is_null($csr_id)) {
            throw new \InvalidArgumentException('non-nullable csr_id cannot be null');
        }

        $this->container['csr_id'] = $csr_id;

        return $this;
    }

    /**
     * Gets signedby
     *
     * @return int|null
     */
    public function getSignedby()
    {
        return $this->container['signedby'];
    }

    /**
     * Sets signedby
     *
     * @param int|null $signedby signedby
     *
     * @return self
     */
    public function setSignedby($signedby)
    {

        if (is_null($signedby)) {
            throw new \InvalidArgumentException('non-nullable signedby cannot be null');
        }

        $this->container['signedby'] = $signedby;

        return $this;
    }

    /**
     * Gets key_length
     *
     * @return int|null
     */
    public function getKeyLength()
    {
        return $this->container['key_length'];
    }

    /**
     * Sets key_length
     *
     * @param int|null $key_length key_length
     *
     * @return self
     */
    public function setKeyLength($key_length)
    {

        if (is_null($key_length)) {
            throw new \InvalidArgumentException('non-nullable key_length cannot be null');
        }

        $this->container['key_length'] = $key_length;

        return $this;
    }

    /**
     * Gets renew_days
     *
     * @return int|null
     */
    public function getRenewDays()
    {
        return $this->container['renew_days'];
    }

    /**
     * Sets renew_days
     *
     * @param int|null $renew_days renew_days
     *
     * @return self
     */
    public function setRenewDays($renew_days)
    {

        if (is_null($renew_days)) {
            throw new \InvalidArgumentException('non-nullable renew_days cannot be null');
        }

        $this->container['renew_days'] = $renew_days;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int|null $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets lifetime
     *
     * @return int|null
     */
    public function getLifetime()
    {
        return $this->container['lifetime'];
    }

    /**
     * Sets lifetime
     *
     * @param int|null $lifetime lifetime
     *
     * @return self
     */
    public function setLifetime($lifetime)
    {

        if (is_null($lifetime)) {
            throw new \InvalidArgumentException('non-nullable lifetime cannot be null');
        }

        $this->container['lifetime'] = $lifetime;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return int|null
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param int|null $serial serial
     *
     * @return self
     */
    public function setSerial($serial)
    {

        if (is_null($serial)) {
            throw new \InvalidArgumentException('non-nullable serial cannot be null');
        }

        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets acme_directory_uri
     *
     * @return string|null
     */
    public function getAcmeDirectoryUri()
    {
        return $this->container['acme_directory_uri'];
    }

    /**
     * Sets acme_directory_uri
     *
     * @param string|null $acme_directory_uri acme_directory_uri
     *
     * @return self
     */
    public function setAcmeDirectoryUri($acme_directory_uri)
    {

        if (is_null($acme_directory_uri)) {
            throw new \InvalidArgumentException('non-nullable acme_directory_uri cannot be null');
        }

        $this->container['acme_directory_uri'] = $acme_directory_uri;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate certificate
     *
     * @return self
     */
    public function setCertificate($certificate)
    {

        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }

        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets common
     *
     * @return string|null
     */
    public function getCommon()
    {
        return $this->container['common'];
    }

    /**
     * Sets common
     *
     * @param string|null $common common
     *
     * @return self
     */
    public function setCommon($common)
    {

        if (is_null($common)) {
            array_push($this->openAPINullablesSetToNull, 'common');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('common', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['common'] = $common;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {

        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets csr
     *
     * @return string|null
     */
    public function getCsr()
    {
        return $this->container['csr'];
    }

    /**
     * Sets csr
     *
     * @param string|null $csr csr
     *
     * @return self
     */
    public function setCsr($csr)
    {

        if (is_null($csr)) {
            throw new \InvalidArgumentException('non-nullable csr cannot be null');
        }

        $this->container['csr'] = $csr;

        return $this;
    }

    /**
     * Gets ec_curve
     *
     * @return string|null
     */
    public function getEcCurve()
    {
        return $this->container['ec_curve'];
    }

    /**
     * Sets ec_curve
     *
     * @param string|null $ec_curve Created certificate authorities use RSA keys by default. If an Elliptic Curve Key is desired, then it can be specified with the `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, default to using \"BrainpoolP384R1\" curve.
     *
     * @return self
     */
    public function setEcCurve($ec_curve)
    {
        $allowedValues = $this->getEcCurveAllowableValues();
        if (!is_null($ec_curve) && !in_array($ec_curve, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ec_curve', must be one of '%s'",
                    $ec_curve,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ec_curve)) {
            throw new \InvalidArgumentException('non-nullable ec_curve cannot be null');
        }

        $this->container['ec_curve'] = $ec_curve;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets key_type
     *
     * @return string|null
     */
    public function getKeyType()
    {
        return $this->container['key_type'];
    }

    /**
     * Sets key_type
     *
     * @param string|null $key_type Created certificate authorities use RSA keys by default. If an Elliptic Curve Key is desired, then it can be specified with the `key_type` attribute. If the `ec_curve` attribute is not specified for the Elliptic Curve Key, default to using \"BrainpoolP384R1\" curve.
     *
     * @return self
     */
    public function setKeyType($key_type)
    {
        $allowedValues = $this->getKeyTypeAllowableValues();
        if (!is_null($key_type) && !in_array($key_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'key_type', must be one of '%s'",
                    $key_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($key_type)) {
            throw new \InvalidArgumentException('non-nullable key_type cannot be null');
        }

        $this->container['key_type'] = $key_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {

        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }

        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organizational_unit
     *
     * @return string|null
     */
    public function getOrganizationalUnit()
    {
        return $this->container['organizational_unit'];
    }

    /**
     * Sets organizational_unit
     *
     * @param string|null $organizational_unit organizational_unit
     *
     * @return self
     */
    public function setOrganizationalUnit($organizational_unit)
    {

        if (is_null($organizational_unit)) {
            throw new \InvalidArgumentException('non-nullable organizational_unit cannot be null');
        }

        $this->container['organizational_unit'] = $organizational_unit;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string|null
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string|null $passphrase passphrase
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {

        if (is_null($passphrase)) {
            throw new \InvalidArgumentException('non-nullable passphrase cannot be null');
        }

        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets privatekey
     *
     * @return string|null
     */
    public function getPrivatekey()
    {
        return $this->container['privatekey'];
    }

    /**
     * Sets privatekey
     *
     * @param string|null $privatekey privatekey
     *
     * @return self
     */
    public function setPrivatekey($privatekey)
    {

        if (is_null($privatekey)) {
            throw new \InvalidArgumentException('non-nullable privatekey cannot be null');
        }

        $this->container['privatekey'] = $privatekey;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets create_type
     *
     * @return string|null
     */
    public function getCreateType()
    {
        return $this->container['create_type'];
    }

    /**
     * Sets create_type
     *
     * @param string|null $create_type Certificate Authorities are classified under following types with the necessary keywords to be passed for `create_type` attribute to create the respective type of certificate authority A type is selected by the Certificate Authority Service based on `create_type`. The rest of the values are validated accordingly and finally a certificate is made based on the selected type.
     *
     * @return self
     */
    public function setCreateType($create_type)
    {
        $allowedValues = $this->getCreateTypeAllowableValues();
        if (!is_null($create_type) && !in_array($create_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'create_type', must be one of '%s'",
                    $create_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($create_type)) {
            throw new \InvalidArgumentException('non-nullable create_type cannot be null');
        }

        $this->container['create_type'] = $create_type;

        return $this;
    }

    /**
     * Gets digest_algorithm
     *
     * @return string|null
     */
    public function getDigestAlgorithm()
    {
        return $this->container['digest_algorithm'];
    }

    /**
     * Sets digest_algorithm
     *
     * @param string|null $digest_algorithm digest_algorithm
     *
     * @return self
     */
    public function setDigestAlgorithm($digest_algorithm)
    {
        $allowedValues = $this->getDigestAlgorithmAllowableValues();
        if (!is_null($digest_algorithm) && !in_array($digest_algorithm, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'digest_algorithm', must be one of '%s'",
                    $digest_algorithm,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($digest_algorithm)) {
            throw new \InvalidArgumentException('non-nullable digest_algorithm cannot be null');
        }

        $this->container['digest_algorithm'] = $digest_algorithm;

        return $this;
    }

    /**
     * Gets san
     *
     * @return string[]|null
     */
    public function getSan()
    {
        return $this->container['san'];
    }

    /**
     * Sets san
     *
     * @param string[]|null $san san
     *
     * @return self
     */
    public function setSan($san)
    {

        if (is_null($san)) {
            throw new \InvalidArgumentException('non-nullable san cannot be null');
        }

        $this->container['san'] = $san;

        return $this;
    }

    /**
     * Gets cert_extensions
     *
     * @return \RMoore\Truenas\Model\CertExtensions1|null
     */
    public function getCertExtensions()
    {
        return $this->container['cert_extensions'];
    }

    /**
     * Sets cert_extensions
     *
     * @param \RMoore\Truenas\Model\CertExtensions1|null $cert_extensions cert_extensions
     *
     * @return self
     */
    public function setCertExtensions($cert_extensions)
    {

        if (is_null($cert_extensions)) {
            throw new \InvalidArgumentException('non-nullable cert_extensions cannot be null');
        }

        $this->container['cert_extensions'] = $cert_extensions;

        return $this;
    }

    /**
     * Gets add_to_trusted_store
     *
     * @return bool|null
     */
    public function getAddToTrustedStore()
    {
        return $this->container['add_to_trusted_store'];
    }

    /**
     * Sets add_to_trusted_store
     *
     * @param bool|null $add_to_trusted_store add_to_trusted_store
     *
     * @return self
     */
    public function setAddToTrustedStore($add_to_trusted_store)
    {

        if (is_null($add_to_trusted_store)) {
            throw new \InvalidArgumentException('non-nullable add_to_trusted_store cannot be null');
        }

        $this->container['add_to_trusted_store'] = $add_to_trusted_store;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


