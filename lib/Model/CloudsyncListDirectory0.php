<?php
/**
 * CloudsyncListDirectory0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * CloudsyncListDirectory0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CloudsyncListDirectory0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cloudsync_list_directory_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'credentials' => 'int',
        'encryption' => 'bool',
        'filename_encryption' => 'bool',
        'encryption_password' => 'string',
        'encryption_salt' => 'string',
        'attributes' => 'array<string,mixed>',
        'args' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'credentials' => null,
        'encryption' => null,
        'filename_encryption' => null,
        'encryption_password' => null,
        'encryption_salt' => null,
        'attributes' => null,
        'args' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'credentials' => false,
		'encryption' => false,
		'filename_encryption' => false,
		'encryption_password' => false,
		'encryption_salt' => false,
		'attributes' => false,
		'args' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credentials' => 'credentials',
        'encryption' => 'encryption',
        'filename_encryption' => 'filename_encryption',
        'encryption_password' => 'encryption_password',
        'encryption_salt' => 'encryption_salt',
        'attributes' => 'attributes',
        'args' => 'args'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credentials' => 'setCredentials',
        'encryption' => 'setEncryption',
        'filename_encryption' => 'setFilenameEncryption',
        'encryption_password' => 'setEncryptionPassword',
        'encryption_salt' => 'setEncryptionSalt',
        'attributes' => 'setAttributes',
        'args' => 'setArgs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credentials' => 'getCredentials',
        'encryption' => 'getEncryption',
        'filename_encryption' => 'getFilenameEncryption',
        'encryption_password' => 'getEncryptionPassword',
        'encryption_salt' => 'getEncryptionSalt',
        'attributes' => 'getAttributes',
        'args' => 'getArgs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('encryption', $data ?? [], false);
        $this->setIfExists('filename_encryption', $data ?? [], false);
        $this->setIfExists('encryption_password', $data ?? [], '');
        $this->setIfExists('encryption_salt', $data ?? [], '');
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('args', $data ?? [], '');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credentials
     *
     * @return int|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param int|null $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {

        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }

        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return bool|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param bool|null $encryption encryption
     *
     * @return self
     */
    public function setEncryption($encryption)
    {

        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }

        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets filename_encryption
     *
     * @return bool|null
     */
    public function getFilenameEncryption()
    {
        return $this->container['filename_encryption'];
    }

    /**
     * Sets filename_encryption
     *
     * @param bool|null $filename_encryption filename_encryption
     *
     * @return self
     */
    public function setFilenameEncryption($filename_encryption)
    {

        if (is_null($filename_encryption)) {
            throw new \InvalidArgumentException('non-nullable filename_encryption cannot be null');
        }

        $this->container['filename_encryption'] = $filename_encryption;

        return $this;
    }

    /**
     * Gets encryption_password
     *
     * @return string|null
     */
    public function getEncryptionPassword()
    {
        return $this->container['encryption_password'];
    }

    /**
     * Sets encryption_password
     *
     * @param string|null $encryption_password encryption_password
     *
     * @return self
     */
    public function setEncryptionPassword($encryption_password)
    {

        if (is_null($encryption_password)) {
            throw new \InvalidArgumentException('non-nullable encryption_password cannot be null');
        }

        $this->container['encryption_password'] = $encryption_password;

        return $this;
    }

    /**
     * Gets encryption_salt
     *
     * @return string|null
     */
    public function getEncryptionSalt()
    {
        return $this->container['encryption_salt'];
    }

    /**
     * Sets encryption_salt
     *
     * @param string|null $encryption_salt encryption_salt
     *
     * @return self
     */
    public function setEncryptionSalt($encryption_salt)
    {

        if (is_null($encryption_salt)) {
            throw new \InvalidArgumentException('non-nullable encryption_salt cannot be null');
        }

        $this->container['encryption_salt'] = $encryption_salt;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,mixed>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,mixed>|null $attributes If remote supports buckets, path is constructed by two keys \"bucket\"/\"folder\" in `attributes`. If remote does not support buckets, path is constructed using \"folder\" key only in `attributes`. \"folder\" is directory name and \"bucket\" is bucket name for remote.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {

        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }

        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets args
     *
     * @return string|null
     */
    public function getArgs()
    {
        return $this->container['args'];
    }

    /**
     * Sets args
     *
     * @param string|null $args args
     *
     * @return self
     */
    public function setArgs($args)
    {

        if (is_null($args)) {
            throw new \InvalidArgumentException('non-nullable args cannot be null');
        }

        $this->container['args'] = $args;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


