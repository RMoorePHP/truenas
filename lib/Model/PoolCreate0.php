<?php
/**
 * PoolCreate0
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace RMoore\Truenas\Model;

use \ArrayAccess;
use \RMoore\Truenas\ObjectSerializer;

/**
 * PoolCreate0 Class Doc Comment
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PoolCreate0 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'pool_create_0';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'encryption' => 'bool',
        'deduplication' => 'string',
        'checksum' => 'string',
        'encryption_options' => '\RMoore\Truenas\Model\EncryptionOptions',
        'topology' => '\RMoore\Truenas\Model\Topology',
        'allow_duplicate_serials' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'encryption' => null,
        'deduplication' => null,
        'checksum' => null,
        'encryption_options' => null,
        'topology' => null,
        'allow_duplicate_serials' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'encryption' => false,
		'deduplication' => true,
		'checksum' => true,
		'encryption_options' => false,
		'topology' => false,
		'allow_duplicate_serials' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'encryption' => 'encryption',
        'deduplication' => 'deduplication',
        'checksum' => 'checksum',
        'encryption_options' => 'encryption_options',
        'topology' => 'topology',
        'allow_duplicate_serials' => 'allow_duplicate_serials'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'encryption' => 'setEncryption',
        'deduplication' => 'setDeduplication',
        'checksum' => 'setChecksum',
        'encryption_options' => 'setEncryptionOptions',
        'topology' => 'setTopology',
        'allow_duplicate_serials' => 'setAllowDuplicateSerials'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'encryption' => 'getEncryption',
        'deduplication' => 'getDeduplication',
        'checksum' => 'getChecksum',
        'encryption_options' => 'getEncryptionOptions',
        'topology' => 'getTopology',
        'allow_duplicate_serials' => 'getAllowDuplicateSerials'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEDUPLICATION_NULL = 'null';
    public const DEDUPLICATION_ON = 'ON';
    public const DEDUPLICATION_VERIFY = 'VERIFY';
    public const DEDUPLICATION_OFF = 'OFF';
    public const CHECKSUM_NULL = 'null';
    public const CHECKSUM_ON = 'ON';
    public const CHECKSUM_OFF = 'OFF';
    public const CHECKSUM_FLETCHER2 = 'FLETCHER2';
    public const CHECKSUM_FLETCHER4 = 'FLETCHER4';
    public const CHECKSUM_SHA256 = 'SHA256';
    public const CHECKSUM_SHA512 = 'SHA512';
    public const CHECKSUM_SKEIN = 'SKEIN';
    public const CHECKSUM_EDONR = 'EDONR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeduplicationAllowableValues()
    {
        return [
            self::DEDUPLICATION_NULL,
            self::DEDUPLICATION_ON,
            self::DEDUPLICATION_VERIFY,
            self::DEDUPLICATION_OFF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChecksumAllowableValues()
    {
        return [
            self::CHECKSUM_NULL,
            self::CHECKSUM_ON,
            self::CHECKSUM_OFF,
            self::CHECKSUM_FLETCHER2,
            self::CHECKSUM_FLETCHER4,
            self::CHECKSUM_SHA256,
            self::CHECKSUM_SHA512,
            self::CHECKSUM_SKEIN,
            self::CHECKSUM_EDONR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('encryption', $data ?? [], false);
        $this->setIfExists('deduplication', $data ?? [], null);
        $this->setIfExists('checksum', $data ?? [], null);
        $this->setIfExists('encryption_options', $data ?? [], null);
        $this->setIfExists('topology', $data ?? [], null);
        $this->setIfExists('allow_duplicate_serials', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeduplicationAllowableValues();
        if (!is_null($this->container['deduplication']) && !in_array($this->container['deduplication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deduplication', must be one of '%s'",
                $this->container['deduplication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChecksumAllowableValues();
        if (!is_null($this->container['checksum']) && !in_array($this->container['checksum'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'checksum', must be one of '%s'",
                $this->container['checksum'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool. `encryption_options` specifies configuration for encryption of root dataset for `name` pool. `encryption_options.passphrase` must be specified if encryption for root dataset is desired with a passphrase as a key. Otherwise a hex encoded key can be specified by providing `encryption_options.key`. `encryption_options.generate_key` when enabled automatically generates the key to be used for dataset encryption.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return bool|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param bool|null $encryption `encryption` when enabled will create an ZFS encrypted root dataset for `name` pool.
     *
     * @return self
     */
    public function setEncryption($encryption)
    {

        if (is_null($encryption)) {
            throw new \InvalidArgumentException('non-nullable encryption cannot be null');
        }

        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets deduplication
     *
     * @return string|null
     */
    public function getDeduplication()
    {
        return $this->container['deduplication'];
    }

    /**
     * Sets deduplication
     *
     * @param string|null $deduplication `deduplication` when set to ON or VERIFY makes sure that no block of data is duplicated in the pool. When VERIFY is specified, if two blocks have similar signatures, byte to byte comparison is performed to ensure that the blocks are identical. This should be used in special circumstances as it carries a significant overhead.
     *
     * @return self
     */
    public function setDeduplication($deduplication)
    {
        $allowedValues = $this->getDeduplicationAllowableValues();
        if (!is_null($deduplication) && !in_array($deduplication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deduplication', must be one of '%s'",
                    $deduplication,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($deduplication)) {
            array_push($this->openAPINullablesSetToNull, 'deduplication');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduplication', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['deduplication'] = $deduplication;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string|null
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string|null $checksum checksum
     *
     * @return self
     */
    public function setChecksum($checksum)
    {
        $allowedValues = $this->getChecksumAllowableValues();
        if (!is_null($checksum) && !in_array($checksum, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'checksum', must be one of '%s'",
                    $checksum,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($checksum)) {
            array_push($this->openAPINullablesSetToNull, 'checksum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('checksum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Gets encryption_options
     *
     * @return \RMoore\Truenas\Model\EncryptionOptions|null
     */
    public function getEncryptionOptions()
    {
        return $this->container['encryption_options'];
    }

    /**
     * Sets encryption_options
     *
     * @param \RMoore\Truenas\Model\EncryptionOptions|null $encryption_options encryption_options
     *
     * @return self
     */
    public function setEncryptionOptions($encryption_options)
    {

        if (is_null($encryption_options)) {
            throw new \InvalidArgumentException('non-nullable encryption_options cannot be null');
        }

        $this->container['encryption_options'] = $encryption_options;

        return $this;
    }

    /**
     * Gets topology
     *
     * @return \RMoore\Truenas\Model\Topology|null
     */
    public function getTopology()
    {
        return $this->container['topology'];
    }

    /**
     * Sets topology
     *
     * @param \RMoore\Truenas\Model\Topology|null $topology topology
     *
     * @return self
     */
    public function setTopology($topology)
    {

        if (is_null($topology)) {
            throw new \InvalidArgumentException('non-nullable topology cannot be null');
        }

        $this->container['topology'] = $topology;

        return $this;
    }

    /**
     * Gets allow_duplicate_serials
     *
     * @return bool|null
     */
    public function getAllowDuplicateSerials()
    {
        return $this->container['allow_duplicate_serials'];
    }

    /**
     * Sets allow_duplicate_serials
     *
     * @param bool|null $allow_duplicate_serials allow_duplicate_serials
     *
     * @return self
     */
    public function setAllowDuplicateSerials($allow_duplicate_serials)
    {

        if (is_null($allow_duplicate_serials)) {
            throw new \InvalidArgumentException('non-nullable allow_duplicate_serials cannot be null');
        }

        $this->container['allow_duplicate_serials'] = $allow_duplicate_serials;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


