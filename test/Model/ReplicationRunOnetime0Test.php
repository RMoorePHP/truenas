<?php
/**
 * ReplicationRunOnetime0Test
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace RMoore\Truenas\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * ReplicationRunOnetime0Test Class Doc Comment
 *
 * @category    Class
 * @description ReplicationRunOnetime0
 * @package     RMoore\Truenas
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class ReplicationRunOnetime0Test extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "ReplicationRunOnetime0"
     */
    public function testReplicationRunOnetime0()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "direction"
     */
    public function testPropertyDirection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transport"
     */
    public function testPropertyTransport()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ssh_credentials"
     */
    public function testPropertySshCredentials()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "netcat_active_side"
     */
    public function testPropertyNetcatActiveSide()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "netcat_active_side_listen_address"
     */
    public function testPropertyNetcatActiveSideListenAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "netcat_active_side_port_min"
     */
    public function testPropertyNetcatActiveSidePortMin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "netcat_active_side_port_max"
     */
    public function testPropertyNetcatActiveSidePortMax()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "netcat_passive_side_connect_address"
     */
    public function testPropertyNetcatPassiveSideConnectAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "source_datasets"
     */
    public function testPropertySourceDatasets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "target_dataset"
     */
    public function testPropertyTargetDataset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recursive"
     */
    public function testPropertyRecursive()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exclude"
     */
    public function testPropertyExclude()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "properties"
     */
    public function testPropertyProperties()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "properties_exclude"
     */
    public function testPropertyPropertiesExclude()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "properties_override"
     */
    public function testPropertyPropertiesOverride()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "replicate"
     */
    public function testPropertyReplicate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encryption"
     */
    public function testPropertyEncryption()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encryption_key"
     */
    public function testPropertyEncryptionKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encryption_key_format"
     */
    public function testPropertyEncryptionKeyFormat()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "encryption_key_location"
     */
    public function testPropertyEncryptionKeyLocation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "periodic_snapshot_tasks"
     */
    public function testPropertyPeriodicSnapshotTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "naming_schema"
     */
    public function testPropertyNamingSchema()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "also_include_naming_schema"
     */
    public function testPropertyAlsoIncludeNamingSchema()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "name_regex"
     */
    public function testPropertyNameRegex()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "restrict_schedule"
     */
    public function testPropertyRestrictSchedule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allow_from_scratch"
     */
    public function testPropertyAllowFromScratch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "readonly"
     */
    public function testPropertyReadonly()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hold_pending_snapshots"
     */
    public function testPropertyHoldPendingSnapshots()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "retention_policy"
     */
    public function testPropertyRetentionPolicy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lifetime_value"
     */
    public function testPropertyLifetimeValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lifetime_unit"
     */
    public function testPropertyLifetimeUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lifetimes"
     */
    public function testPropertyLifetimes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "compression"
     */
    public function testPropertyCompression()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "speed_limit"
     */
    public function testPropertySpeedLimit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "large_block"
     */
    public function testPropertyLargeBlock()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "embed"
     */
    public function testPropertyEmbed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "compressed"
     */
    public function testPropertyCompressed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "retries"
     */
    public function testPropertyRetries()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "logging_level"
     */
    public function testPropertyLoggingLevel()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exclude_mountpoint_property"
     */
    public function testPropertyExcludeMountpointProperty()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "only_from_scratch"
     */
    public function testPropertyOnlyFromScratch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
