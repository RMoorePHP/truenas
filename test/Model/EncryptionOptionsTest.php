<?php
/**
 * EncryptionOptionsTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  RMoore\Truenas
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace RMoore\Truenas\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * EncryptionOptionsTest Class Doc Comment
 *
 * @category    Class
 * @description &#x60;encryption_options&#x60; specifies configuration for encryption of root dataset for &#x60;name&#x60; pool. &#x60;encryption_options.passphrase&#x60; must be specified if encryption for root dataset is desired with a passphrase as a key. Otherwise a hex encoded key can be specified by providing &#x60;encryption_options.key&#x60;. &#x60;encryption_options.generate_key&#x60; when enabled automatically generates the key to be used for dataset encryption.
 * @package     RMoore\Truenas
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class EncryptionOptionsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "EncryptionOptions"
     */
    public function testEncryptionOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "generate_key"
     */
    public function testPropertyGenerateKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pbkdf2iters"
     */
    public function testPropertyPbkdf2iters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "algorithm"
     */
    public function testPropertyAlgorithm()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "passphrase"
     */
    public function testPropertyPassphrase()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "key"
     */
    public function testPropertyKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
